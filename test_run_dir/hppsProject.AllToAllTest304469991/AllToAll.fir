circuit AllToAll :
  module AllToAllController :
    input clock : Clock
    input reset : Reset
    output io : { processor : { flip cmd : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>}}, resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { rd : UInt<5>, data : UInt<64>}}, busy : UInt<1>, interrupt : UInt<1>, flip exception : UInt<1>}, flip mesh : { flip cmd : { flip ready : UInt<1>, valid : UInt<1>, bits : { load : UInt<1>, store : UInt<1>, doAllToAll : UInt<1>, rs1 : UInt<64>, rs2 : UInt<64>}}, resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>}}, busy : UInt<1>}}

    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AllToAllController.scala 40:22]
    reg rd_address : UInt<5>, clock with :
      reset => (UInt<1>("h0"), rd_address) @[AllToAllController.scala 47:23]
    node _T = eq(io.processor.resp.ready, UInt<1>("h0")) @[AllToAllController.scala 52:20]
    node stall_resp = and(_T, io.mesh.resp.valid) @[AllToAllController.scala 52:33]
    io.processor.interrupt <= UInt<1>("h0") @[AllToAllController.scala 56:26]
    io.mesh.cmd.bits.rs1 <= io.processor.cmd.bits.rs1 @[AllToAllController.scala 59:24]
    io.mesh.cmd.bits.rs2 <= io.processor.cmd.bits.rs2 @[AllToAllController.scala 60:24]
    io.processor.resp.bits.data <= io.mesh.resp.bits.data @[AllToAllController.scala 63:19]
    node _T_1 = eq(io.processor.cmd.bits.inst.opcode, UInt<6>("h2b")) @[AllToAllController.scala 70:60]
    node action_signal = and(io.processor.cmd.valid, _T_1) @[AllToAllController.scala 70:34]
    node done_action_signal = eq(io.mesh.busy, UInt<1>("h0")) @[AllToAllController.scala 71:28]
    node _T_2 = eq(io.processor.cmd.bits.inst.opcode, UInt<4>("hb")) @[AllToAllController.scala 74:54]
    node mem_cmd = and(io.processor.cmd.valid, _T_2) @[AllToAllController.scala 74:28]
    node load_signal = eq(io.processor.cmd.bits.inst.funct, UInt<1>("h1")) @[AllToAllController.scala 76:42]
    node store_signal = eq(io.processor.cmd.bits.inst.funct, UInt<2>("h2")) @[AllToAllController.scala 78:43]
    io.mesh.cmd.valid <= io.processor.cmd.valid @[AllToAllController.scala 81:21]
    node _T_3 = and(mem_cmd, load_signal) @[AllToAllController.scala 82:36]
    io.mesh.cmd.bits.load <= _T_3 @[AllToAllController.scala 82:25]
    node _T_4 = and(mem_cmd, store_signal) @[AllToAllController.scala 83:37]
    io.mesh.cmd.bits.store <= _T_4 @[AllToAllController.scala 83:26]
    io.mesh.cmd.bits.doAllToAll <= action_signal @[AllToAllController.scala 84:31]
    node _T_5 = eq(state, UInt<3>("h0")) @[AllToAllController.scala 86:14]
    when _T_5 : @[AllToAllController.scala 86:23]
      io.processor.busy <= UInt<1>("h0") @[AllToAllController.scala 88:23]
      io.processor.cmd.ready <= UInt<1>("h1") @[AllToAllController.scala 89:16]
      io.mesh.cmd.valid <= io.processor.cmd.valid @[AllToAllController.scala 90:23]
      io.processor.resp.valid <= UInt<1>("h0") @[AllToAllController.scala 91:17]
      io.mesh.resp.ready <= UInt<1>("h0") @[AllToAllController.scala 92:24]
      io.processor.resp.bits.rd <= io.processor.cmd.bits.inst.rd @[AllToAllController.scala 93:31]
      rd_address <= io.processor.cmd.bits.inst.rd @[AllToAllController.scala 94:16]
      when action_signal : @[AllToAllController.scala 96:24]
        state <= UInt<3>("h1") @[AllToAllController.scala 97:13]
      else :
        node _T_6 = and(mem_cmd, load_signal) @[AllToAllController.scala 98:24]
        when _T_6 : @[AllToAllController.scala 98:39]
          state <= UInt<3>("h4") @[AllToAllController.scala 99:13]
        else :
          node _T_7 = and(mem_cmd, store_signal) @[AllToAllController.scala 100:24]
          when _T_7 : @[AllToAllController.scala 100:40]
            state <= UInt<3>("h5") @[AllToAllController.scala 101:13]
          else :
            state <= UInt<3>("h0") @[AllToAllController.scala 103:13]
    else :
      node _T_8 = eq(state, UInt<3>("h4")) @[AllToAllController.scala 106:20]
      when _T_8 : @[AllToAllController.scala 106:35]
        io.processor.busy <= stall_resp @[AllToAllController.scala 108:23]
        node _T_9 = eq(stall_resp, UInt<1>("h0")) @[AllToAllController.scala 109:19]
        io.processor.cmd.ready <= _T_9 @[AllToAllController.scala 109:16]
        node _T_10 = eq(stall_resp, UInt<1>("h0")) @[AllToAllController.scala 110:26]
        node _T_11 = and(_T_10, io.processor.cmd.valid) @[AllToAllController.scala 110:38]
        io.mesh.cmd.valid <= _T_11 @[AllToAllController.scala 110:23]
        io.processor.resp.valid <= UInt<1>("h1") @[AllToAllController.scala 111:17]
        io.mesh.resp.ready <= io.processor.resp.ready @[AllToAllController.scala 112:24]
        io.processor.resp.bits.rd <= rd_address @[AllToAllController.scala 113:31]
        node _T_12 = eq(stall_resp, UInt<1>("h0")) @[AllToAllController.scala 115:10]
        when _T_12 : @[AllToAllController.scala 115:22]
          rd_address <= io.processor.cmd.bits.inst.rd @[AllToAllController.scala 116:18]
        node _T_13 = eq(stall_resp, UInt<1>("h0")) @[AllToAllController.scala 119:28]
        node _T_14 = and(action_signal, _T_13) @[AllToAllController.scala 119:25]
        when _T_14 : @[AllToAllController.scala 119:40]
          state <= UInt<3>("h1") @[AllToAllController.scala 120:13]
        else :
          node _T_15 = and(mem_cmd, load_signal) @[AllToAllController.scala 121:24]
          node _T_16 = eq(stall_resp, UInt<1>("h0")) @[AllToAllController.scala 121:42]
          node _T_17 = and(_T_15, _T_16) @[AllToAllController.scala 121:39]
          when _T_17 : @[AllToAllController.scala 121:54]
            state <= UInt<3>("h4") @[AllToAllController.scala 122:13]
          else :
            node _T_18 = and(mem_cmd, store_signal) @[AllToAllController.scala 123:24]
            node _T_19 = eq(stall_resp, UInt<1>("h0")) @[AllToAllController.scala 123:43]
            node _T_20 = and(_T_18, _T_19) @[AllToAllController.scala 123:40]
            when _T_20 : @[AllToAllController.scala 123:55]
              state <= UInt<3>("h5") @[AllToAllController.scala 124:13]
            else :
              when stall_resp : @[AllToAllController.scala 125:27]
                state <= UInt<3>("h7") @[AllToAllController.scala 126:13]
              else :
                state <= UInt<3>("h0") @[AllToAllController.scala 128:13]
      else :
        node _T_21 = eq(state, UInt<3>("h5")) @[AllToAllController.scala 131:20]
        when _T_21 : @[AllToAllController.scala 131:36]
          io.processor.busy <= UInt<1>("h1") @[AllToAllController.scala 133:23]
          io.processor.cmd.ready <= UInt<1>("h0") @[AllToAllController.scala 134:16]
          io.mesh.cmd.valid <= UInt<1>("h0") @[AllToAllController.scala 135:23]
          io.processor.resp.valid <= UInt<1>("h0") @[AllToAllController.scala 136:17]
          io.mesh.resp.ready <= UInt<1>("h0") @[AllToAllController.scala 137:24]
          io.processor.resp.bits.rd <= rd_address @[AllToAllController.scala 138:31]
          state <= UInt<3>("h6") @[AllToAllController.scala 140:11]
        else :
          node _T_22 = eq(state, UInt<3>("h6")) @[AllToAllController.scala 142:20]
          when _T_22 : @[AllToAllController.scala 142:35]
            io.processor.busy <= stall_resp @[AllToAllController.scala 144:23]
            node _T_23 = eq(stall_resp, UInt<1>("h0")) @[AllToAllController.scala 145:19]
            io.processor.cmd.ready <= _T_23 @[AllToAllController.scala 145:16]
            node _T_24 = and(io.processor.cmd.valid, io.processor.cmd.valid) @[AllToAllController.scala 146:37]
            io.mesh.cmd.valid <= _T_24 @[AllToAllController.scala 146:23]
            io.processor.resp.valid <= UInt<1>("h1") @[AllToAllController.scala 147:17]
            io.mesh.resp.ready <= io.processor.resp.ready @[AllToAllController.scala 148:24]
            io.processor.resp.bits.rd <= rd_address @[AllToAllController.scala 149:31]
            node _T_25 = eq(stall_resp, UInt<1>("h0")) @[AllToAllController.scala 151:10]
            when _T_25 : @[AllToAllController.scala 151:22]
              rd_address <= io.processor.cmd.bits.inst.rd @[AllToAllController.scala 152:18]
            node _T_26 = eq(stall_resp, UInt<1>("h0")) @[AllToAllController.scala 155:28]
            node _T_27 = and(action_signal, _T_26) @[AllToAllController.scala 155:25]
            when _T_27 : @[AllToAllController.scala 155:40]
              state <= UInt<3>("h1") @[AllToAllController.scala 156:13]
            else :
              node _T_28 = and(mem_cmd, load_signal) @[AllToAllController.scala 157:24]
              node _T_29 = eq(stall_resp, UInt<1>("h0")) @[AllToAllController.scala 157:42]
              node _T_30 = and(_T_28, _T_29) @[AllToAllController.scala 157:39]
              when _T_30 : @[AllToAllController.scala 157:54]
                state <= UInt<3>("h4") @[AllToAllController.scala 158:13]
              else :
                node _T_31 = and(mem_cmd, store_signal) @[AllToAllController.scala 159:24]
                node _T_32 = eq(stall_resp, UInt<1>("h0")) @[AllToAllController.scala 159:43]
                node _T_33 = and(_T_31, _T_32) @[AllToAllController.scala 159:40]
                when _T_33 : @[AllToAllController.scala 159:55]
                  state <= UInt<3>("h5") @[AllToAllController.scala 160:13]
                else :
                  when stall_resp : @[AllToAllController.scala 161:27]
                    state <= UInt<3>("h7") @[AllToAllController.scala 162:13]
                  else :
                    state <= UInt<3>("h0") @[AllToAllController.scala 164:13]
          else :
            node _T_34 = eq(state, UInt<3>("h7")) @[AllToAllController.scala 167:20]
            when _T_34 : @[AllToAllController.scala 167:41]
              io.processor.busy <= UInt<1>("h1") @[AllToAllController.scala 169:23]
              io.processor.cmd.ready <= UInt<1>("h0") @[AllToAllController.scala 170:16]
              io.mesh.cmd.valid <= UInt<1>("h0") @[AllToAllController.scala 171:23]
              io.processor.resp.valid <= UInt<1>("h1") @[AllToAllController.scala 172:17]
              io.mesh.resp.ready <= io.processor.resp.ready @[AllToAllController.scala 173:24]
              io.processor.resp.bits.rd <= rd_address @[AllToAllController.scala 174:31]
              when stall_resp : @[AllToAllController.scala 176:21]
                state <= UInt<3>("h7") @[AllToAllController.scala 177:13]
              else :
                state <= UInt<3>("h0") @[AllToAllController.scala 179:13]
            else :
              node _T_35 = eq(state, UInt<3>("h1")) @[AllToAllController.scala 182:20]
              when _T_35 : @[AllToAllController.scala 182:31]
                io.processor.busy <= UInt<1>("h1") @[AllToAllController.scala 184:23]
                io.processor.cmd.ready <= UInt<1>("h0") @[AllToAllController.scala 185:16]
                io.mesh.resp.ready <= UInt<1>("h0") @[AllToAllController.scala 186:24]
                io.processor.resp.bits.rd <= rd_address @[AllToAllController.scala 187:19]
                io.processor.resp.valid <= UInt<1>("h0") @[AllToAllController.scala 188:17]
                state <= UInt<3>("h2") @[AllToAllController.scala 190:11]
              else :
                node _T_36 = eq(state, UInt<3>("h2")) @[AllToAllController.scala 192:20]
                when _T_36 : @[AllToAllController.scala 192:41]
                  io.processor.busy <= UInt<1>("h1") @[AllToAllController.scala 194:23]
                  io.processor.cmd.ready <= UInt<1>("h0") @[AllToAllController.scala 195:16]
                  io.mesh.resp.ready <= UInt<1>("h0") @[AllToAllController.scala 196:24]
                  io.processor.resp.bits.rd <= rd_address @[AllToAllController.scala 197:31]
                  io.processor.resp.valid <= UInt<1>("h0") @[AllToAllController.scala 198:17]
                  when done_action_signal : @[AllToAllController.scala 200:30]
                    state <= UInt<3>("h3") @[AllToAllController.scala 201:13]
                  else :
                    state <= UInt<3>("h2") @[AllToAllController.scala 203:13]
                else :
                  node _T_37 = eq(state, UInt<3>("h3")) @[AllToAllController.scala 206:20]
                  when _T_37 : @[AllToAllController.scala 206:36]
                    io.processor.busy <= UInt<1>("h1") @[AllToAllController.scala 208:23]
                    io.processor.cmd.ready <= UInt<1>("h0") @[AllToAllController.scala 209:16]
                    io.mesh.resp.ready <= UInt<1>("h1") @[AllToAllController.scala 210:24]
                    io.processor.resp.bits.rd <= rd_address @[AllToAllController.scala 211:31]
                    io.processor.resp.valid <= UInt<1>("h1") @[AllToAllController.scala 212:17]
                    state <= UInt<3>("h0") @[AllToAllController.scala 213:11]
                  else :
                    io.processor.busy <= UInt<1>("h0") @[AllToAllController.scala 217:23]
                    io.processor.cmd.ready <= UInt<1>("h0") @[AllToAllController.scala 218:16]
                    io.processor.resp.valid <= UInt<1>("h0") @[AllToAllController.scala 219:17]
                    io.mesh.resp.ready <= UInt<1>("h0") @[AllToAllController.scala 220:24]
                    io.processor.resp.bits.rd <= rd_address @[AllToAllController.scala 221:31]
                    state <= UInt<3>("h0") @[AllToAllController.scala 223:11]

  module Queue :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module AllToAllPEupLeftCorner :
    input clock : Clock
    input reset : Reset
    output io : { busy : UInt<1>, flip end_AllToAll : UInt<1>, flip cmd : { flip ready : UInt<1>, valid : UInt<1>, bits : { load : UInt<1>, store : UInt<1>, doAllToAll : UInt<1>, rs1 : UInt<64>, rs2 : UInt<64>}}, resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, write_enable : UInt<1>}}, left : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, right : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, up : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, bottom : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}}

    cmem memPE : UInt<64> [32] @[AllToAllPE.scala 72:18]
    reg x_coord : UInt<2>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 75:24]
    reg y_coord : UInt<2>, clock with :
      reset => (reset, UInt<2>("h2")) @[AllToAllPE.scala 76:24]
    reg rs1 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), rs1) @[AllToAllPE.scala 79:16]
    reg rs2 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), rs2) @[AllToAllPE.scala 80:16]
    rs1 <= io.cmd.bits.rs1 @[AllToAllPE.scala 86:7]
    rs2 <= io.cmd.bits.rs2 @[AllToAllPE.scala 87:7]
    reg w_en : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 91:21]
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AllToAllPE.scala 96:22]
    reg resp_value : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 97:27]
    node x_value = bits(rs2, 15, 0) @[AllToAllPE.scala 99:20]
    node y_value = bits(rs2, 31, 16) @[AllToAllPE.scala 100:20]
    node memIndex = bits(rs2, 63, 32) @[AllToAllPE.scala 101:21]
    node _T = eq(x_value, x_coord) @[AllToAllPE.scala 109:29]
    node _T_1 = eq(y_value, y_coord) @[AllToAllPE.scala 109:54]
    node is_this_PE = and(_T, _T_1) @[AllToAllPE.scala 109:42]
    node load_signal = and(io.cmd.valid, io.cmd.bits.load) @[AllToAllPE.scala 110:34]
    node store_signal = and(io.cmd.valid, io.cmd.bits.store) @[AllToAllPE.scala 111:35]
    node allToAll_signal = and(io.cmd.valid, io.cmd.bits.doAllToAll) @[AllToAllPE.scala 112:38]
    node _T_2 = eq(io.resp.ready, UInt<1>("h0")) @[AllToAllPE.scala 114:20]
    node stall_resp = and(_T_2, io.resp.valid) @[AllToAllPE.scala 114:35]
    node start_AllToAll = eq(state, UInt<3>("h1")) @[AllToAllPE.scala 115:30]
    wire leftBusy : UInt<1> @[AllToAllPE.scala 117:22]
    wire rightBusy : UInt<1> @[AllToAllPE.scala 118:23]
    wire upBusy : UInt<1> @[AllToAllPE.scala 119:20]
    wire bottomBusy : UInt<1> @[AllToAllPE.scala 120:24]
    leftBusy <= UInt<1>("h0") @[AllToAllPE.scala 122:12]
    rightBusy <= UInt<1>("h0") @[AllToAllPE.scala 123:13]
    rightBusy <= UInt<1>("h0") @[AllToAllPE.scala 124:13]
    upBusy <= UInt<1>("h0") @[AllToAllPE.scala 125:10]
    bottomBusy <= UInt<1>("h0") @[AllToAllPE.scala 126:14]
    node _T_3 = eq(state, UInt<3>("h0")) @[AllToAllPE.scala 128:14]
    when _T_3 : @[AllToAllPE.scala 128:23]
      io.busy <= UInt<1>("h0") @[AllToAllPE.scala 129:13]
      io.cmd.ready <= UInt<1>("h1") @[AllToAllPE.scala 130:18]
      io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 131:19]
      io.resp.bits.data <= UInt<1>("h0") @[AllToAllPE.scala 132:23]
      io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 134:31]
      w_en <= UInt<1>("h0") @[AllToAllPE.scala 135:10]
      when load_signal : @[AllToAllPE.scala 137:22]
        state <= UInt<3>("h4") @[AllToAllPE.scala 138:13]
      else :
        when store_signal : @[AllToAllPE.scala 139:29]
          state <= UInt<3>("h5") @[AllToAllPE.scala 140:13]
        else :
          when allToAll_signal : @[AllToAllPE.scala 141:32]
            state <= UInt<3>("h1") @[AllToAllPE.scala 142:13]
          else :
            state <= UInt<3>("h0") @[AllToAllPE.scala 144:13]
    else :
      node _T_4 = eq(state, UInt<3>("h4")) @[AllToAllPE.scala 147:20]
      when _T_4 : @[AllToAllPE.scala 147:32]
        io.busy <= stall_resp @[AllToAllPE.scala 148:13]
        node _T_5 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 149:21]
        io.cmd.ready <= _T_5 @[AllToAllPE.scala 149:18]
        io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 150:19]
        io.resp.bits.data <= UInt<6>("h20") @[AllToAllPE.scala 151:23]
        resp_value <= UInt<6>("h20") @[AllToAllPE.scala 152:16]
        when is_this_PE : @[AllToAllPE.scala 154:21]
          node _T_6 = bits(memIndex, 4, 0) @[AllToAllPE.scala 155:12]
          infer mport MPORT = memPE[_T_6], clock @[AllToAllPE.scala 155:12]
          MPORT <= rs1 @[AllToAllPE.scala 155:23]
          io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 156:33]
          w_en <= UInt<1>("h1") @[AllToAllPE.scala 157:12]
        else :
          io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 159:33]
          w_en <= UInt<1>("h0") @[AllToAllPE.scala 160:12]
        node _T_7 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 163:25]
        node _T_8 = and(load_signal, _T_7) @[AllToAllPE.scala 163:22]
        when _T_8 : @[AllToAllPE.scala 163:37]
          state <= UInt<3>("h4") @[AllToAllPE.scala 164:13]
        else :
          node _T_9 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 165:32]
          node _T_10 = and(store_signal, _T_9) @[AllToAllPE.scala 165:29]
          when _T_10 : @[AllToAllPE.scala 165:44]
            state <= UInt<3>("h5") @[AllToAllPE.scala 166:13]
          else :
            node _T_11 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 167:35]
            node _T_12 = and(allToAll_signal, _T_11) @[AllToAllPE.scala 167:32]
            when _T_12 : @[AllToAllPE.scala 167:47]
              state <= UInt<3>("h1") @[AllToAllPE.scala 168:13]
            else :
              when stall_resp : @[AllToAllPE.scala 169:27]
                state <= UInt<3>("h7") @[AllToAllPE.scala 170:13]
              else :
                state <= UInt<3>("h0") @[AllToAllPE.scala 172:13]
      else :
        node _T_13 = eq(state, UInt<3>("h5")) @[AllToAllPE.scala 175:20]
        when _T_13 : @[AllToAllPE.scala 175:33]
          io.busy <= UInt<1>("h1") @[AllToAllPE.scala 177:13]
          io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 178:18]
          io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 179:19]
          io.resp.bits.data <= UInt<6>("h21") @[AllToAllPE.scala 180:23]
          when is_this_PE : @[AllToAllPE.scala 182:21]
            node _T_14 = bits(memIndex, 4, 0) @[AllToAllPE.scala 183:26]
            infer mport MPORT_1 = memPE[_T_14], clock @[AllToAllPE.scala 183:26]
            resp_value <= MPORT_1 @[AllToAllPE.scala 183:18]
            w_en <= UInt<1>("h1") @[AllToAllPE.scala 184:12]
          else :
            w_en <= UInt<1>("h0") @[AllToAllPE.scala 186:12]
          io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 189:31]
          state <= UInt<3>("h6") @[AllToAllPE.scala 191:11]
        else :
          node _T_15 = eq(state, UInt<3>("h6")) @[AllToAllPE.scala 193:20]
          when _T_15 : @[AllToAllPE.scala 193:35]
            io.busy <= stall_resp @[AllToAllPE.scala 195:13]
            node _T_16 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 196:21]
            io.cmd.ready <= _T_16 @[AllToAllPE.scala 196:18]
            io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 197:19]
            io.resp.bits.data <= resp_value @[AllToAllPE.scala 198:23]
            io.resp.bits.write_enable <= w_en @[AllToAllPE.scala 199:31]
            node _T_17 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 201:25]
            node _T_18 = and(load_signal, _T_17) @[AllToAllPE.scala 201:22]
            when _T_18 : @[AllToAllPE.scala 201:37]
              state <= UInt<3>("h4") @[AllToAllPE.scala 202:13]
            else :
              node _T_19 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 203:32]
              node _T_20 = and(store_signal, _T_19) @[AllToAllPE.scala 203:29]
              when _T_20 : @[AllToAllPE.scala 203:44]
                state <= UInt<3>("h5") @[AllToAllPE.scala 204:13]
              else :
                node _T_21 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 205:35]
                node _T_22 = and(allToAll_signal, _T_21) @[AllToAllPE.scala 205:32]
                when _T_22 : @[AllToAllPE.scala 205:47]
                  state <= UInt<3>("h1") @[AllToAllPE.scala 206:13]
                else :
                  when stall_resp : @[AllToAllPE.scala 207:27]
                    state <= UInt<3>("h7") @[AllToAllPE.scala 208:13]
                  else :
                    state <= UInt<3>("h0") @[AllToAllPE.scala 210:13]
          else :
            node _T_23 = eq(state, UInt<3>("h7")) @[AllToAllPE.scala 213:20]
            when _T_23 : @[AllToAllPE.scala 213:36]
              io.busy <= UInt<1>("h1") @[AllToAllPE.scala 215:13]
              io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 216:18]
              io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 217:19]
              io.resp.bits.data <= resp_value @[AllToAllPE.scala 218:23]
              io.resp.bits.write_enable <= w_en @[AllToAllPE.scala 220:31]
              when stall_resp : @[AllToAllPE.scala 222:21]
                state <= UInt<3>("h7") @[AllToAllPE.scala 223:13]
              else :
                state <= UInt<3>("h0") @[AllToAllPE.scala 225:13]
            else :
              node _T_24 = eq(state, UInt<3>("h1")) @[AllToAllPE.scala 228:20]
              when _T_24 : @[AllToAllPE.scala 228:31]
                io.busy <= UInt<1>("h1") @[AllToAllPE.scala 229:13]
                io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 230:18]
                io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 231:19]
                io.resp.bits.data <= resp_value @[AllToAllPE.scala 232:23]
                w_en <= UInt<1>("h0") @[AllToAllPE.scala 234:10]
                io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 235:31]
                io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 238:22]
                io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 239:23]
                io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 240:20]
                io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 241:24]
                state <= UInt<3>("h3") @[AllToAllPE.scala 243:11]
              else :
                node _T_25 = eq(state, UInt<3>("h2")) @[AllToAllPE.scala 245:20]
                when _T_25 : @[AllToAllPE.scala 245:41]
                  node _T_26 = or(leftBusy, rightBusy) @[AllToAllPE.scala 247:25]
                  node _T_27 = or(_T_26, upBusy) @[AllToAllPE.scala 247:38]
                  node _T_28 = or(_T_27, bottomBusy) @[AllToAllPE.scala 247:48]
                  io.busy <= _T_28 @[AllToAllPE.scala 247:13]
                  io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 248:18]
                  io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 249:19]
                  io.resp.bits.data <= resp_value @[AllToAllPE.scala 250:23]
                  io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 251:31]
                  io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 254:22]
                  io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 255:23]
                  io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 256:20]
                  io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 257:24]
                  when io.end_AllToAll : @[AllToAllPE.scala 259:27]
                    state <= UInt<3>("h3") @[AllToAllPE.scala 260:13]
                  else :
                    state <= UInt<3>("h2") @[AllToAllPE.scala 262:13]
                else :
                  node _T_29 = eq(state, UInt<3>("h3")) @[AllToAllPE.scala 265:20]
                  when _T_29 : @[AllToAllPE.scala 265:36]
                    io.busy <= UInt<1>("h0") @[AllToAllPE.scala 266:13]
                    io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 267:18]
                    io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 268:19]
                    io.resp.bits.data <= UInt<1>("h0") @[AllToAllPE.scala 269:23]
                    io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 270:31]
                    state <= UInt<3>("h0") @[AllToAllPE.scala 272:11]
                  else :
                    io.busy <= UInt<1>("h0") @[AllToAllPE.scala 276:13]
                    io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 277:18]
                    io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 278:19]
                    io.resp.bits.data <= UInt<64>("haaaaaaaa") @[AllToAllPE.scala 279:23]
                    io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 280:31]
    reg stateAction : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AllToAllPE.scala 289:28]
    node _T_30 = eq(stateAction, UInt<3>("h0")) @[AllToAllPE.scala 293:20]
    when _T_30 : @[AllToAllPE.scala 293:29]
      io.left.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 295:22]
      io.right.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 296:23]
      io.up.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 297:20]
      io.bottom.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 298:24]
      when start_AllToAll : @[AllToAllPE.scala 300:25]
        stateAction <= UInt<3>("h1") @[AllToAllPE.scala 301:19]
      else :
        stateAction <= UInt<3>("h0") @[AllToAllPE.scala 303:19]
    else :
      node _T_31 = eq(stateAction, UInt<3>("h1")) @[AllToAllPE.scala 305:26]
      when _T_31 : @[AllToAllPE.scala 305:37]
        io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 307:22]
        io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 308:23]
        io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 309:20]
        io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 310:24]
        when io.end_AllToAll : @[AllToAllPE.scala 313:26]
          stateAction <= UInt<3>("h0") @[AllToAllPE.scala 314:19]
        else :
          stateAction <= UInt<3>("h1") @[AllToAllPE.scala 316:19]
      else :
        skip
    io.left.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 324:25]
    io.left.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 325:24]
    io.left.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 326:24]
    io.left.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 327:27]
    io.left.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 328:27]
    io.left.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 329:21]
    io.left.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 330:20]
    io.right.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 332:26]
    io.right.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 333:25]
    io.right.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 334:25]
    io.right.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 335:28]
    io.right.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 336:28]
    io.right.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 337:22]
    io.right.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 338:21]
    io.up.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 340:23]
    io.up.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 341:22]
    io.up.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 342:22]
    io.up.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 343:25]
    io.up.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 344:25]
    io.up.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 345:19]
    io.up.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 346:18]
    io.bottom.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 348:27]
    io.bottom.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 349:26]
    io.bottom.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 350:26]
    io.bottom.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 351:29]
    io.bottom.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 352:29]
    io.bottom.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 353:23]
    io.bottom.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 354:22]
    inst left_in of Queue @[Decoupled.scala 296:21]
    left_in.clock <= clock
    left_in.reset <= reset
    left_in.io.enq.valid <= io.left.in.valid @[Decoupled.scala 297:22]
    left_in.io.enq.bits.y_dest <= io.left.in.bits.y_dest @[Decoupled.scala 298:21]
    left_in.io.enq.bits.x_dest <= io.left.in.bits.x_dest @[Decoupled.scala 298:21]
    left_in.io.enq.bits.y_0 <= io.left.in.bits.y_0 @[Decoupled.scala 298:21]
    left_in.io.enq.bits.x_0 <= io.left.in.bits.x_0 @[Decoupled.scala 298:21]
    left_in.io.enq.bits.data <= io.left.in.bits.data @[Decoupled.scala 298:21]
    io.left.in.ready <= left_in.io.enq.ready @[Decoupled.scala 299:17]
    inst right_in of Queue_1 @[Decoupled.scala 296:21]
    right_in.clock <= clock
    right_in.reset <= reset
    right_in.io.enq.valid <= io.right.in.valid @[Decoupled.scala 297:22]
    right_in.io.enq.bits.y_dest <= io.right.in.bits.y_dest @[Decoupled.scala 298:21]
    right_in.io.enq.bits.x_dest <= io.right.in.bits.x_dest @[Decoupled.scala 298:21]
    right_in.io.enq.bits.y_0 <= io.right.in.bits.y_0 @[Decoupled.scala 298:21]
    right_in.io.enq.bits.x_0 <= io.right.in.bits.x_0 @[Decoupled.scala 298:21]
    right_in.io.enq.bits.data <= io.right.in.bits.data @[Decoupled.scala 298:21]
    io.right.in.ready <= right_in.io.enq.ready @[Decoupled.scala 299:17]
    inst up_in of Queue_2 @[Decoupled.scala 296:21]
    up_in.clock <= clock
    up_in.reset <= reset
    up_in.io.enq.valid <= io.up.in.valid @[Decoupled.scala 297:22]
    up_in.io.enq.bits.y_dest <= io.up.in.bits.y_dest @[Decoupled.scala 298:21]
    up_in.io.enq.bits.x_dest <= io.up.in.bits.x_dest @[Decoupled.scala 298:21]
    up_in.io.enq.bits.y_0 <= io.up.in.bits.y_0 @[Decoupled.scala 298:21]
    up_in.io.enq.bits.x_0 <= io.up.in.bits.x_0 @[Decoupled.scala 298:21]
    up_in.io.enq.bits.data <= io.up.in.bits.data @[Decoupled.scala 298:21]
    io.up.in.ready <= up_in.io.enq.ready @[Decoupled.scala 299:17]
    inst bottom_in of Queue_3 @[Decoupled.scala 296:21]
    bottom_in.clock <= clock
    bottom_in.reset <= reset
    bottom_in.io.enq.valid <= io.bottom.in.valid @[Decoupled.scala 297:22]
    bottom_in.io.enq.bits.y_dest <= io.bottom.in.bits.y_dest @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.x_dest <= io.bottom.in.bits.x_dest @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.y_0 <= io.bottom.in.bits.y_0 @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.x_0 <= io.bottom.in.bits.x_0 @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.data <= io.bottom.in.bits.data @[Decoupled.scala 298:21]
    io.bottom.in.ready <= bottom_in.io.enq.ready @[Decoupled.scala 299:17]
    left_in.io.deq.ready <= io.left.in.ready @[AllToAllPE.scala 373:17]
    right_in.io.deq.ready <= io.right.in.ready @[AllToAllPE.scala 374:18]
    up_in.io.deq.ready <= io.up.in.ready @[AllToAllPE.scala 375:15]
    bottom_in.io.deq.ready <= io.bottom.in.ready @[AllToAllPE.scala 376:19]

  module Queue_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_6 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_7 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module AllToAllPEup :
    input clock : Clock
    input reset : Reset
    output io : { busy : UInt<1>, flip end_AllToAll : UInt<1>, flip cmd : { flip ready : UInt<1>, valid : UInt<1>, bits : { load : UInt<1>, store : UInt<1>, doAllToAll : UInt<1>, rs1 : UInt<64>, rs2 : UInt<64>}}, resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, write_enable : UInt<1>}}, left : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, right : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, up : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, bottom : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}}

    cmem memPE : UInt<64> [32] @[AllToAllPE.scala 72:18]
    reg x_coord : UInt<2>, clock with :
      reset => (reset, UInt<1>("h1")) @[AllToAllPE.scala 75:24]
    reg y_coord : UInt<2>, clock with :
      reset => (reset, UInt<2>("h2")) @[AllToAllPE.scala 76:24]
    reg rs1 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), rs1) @[AllToAllPE.scala 79:16]
    reg rs2 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), rs2) @[AllToAllPE.scala 80:16]
    rs1 <= io.cmd.bits.rs1 @[AllToAllPE.scala 86:7]
    rs2 <= io.cmd.bits.rs2 @[AllToAllPE.scala 87:7]
    reg w_en : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 91:21]
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AllToAllPE.scala 96:22]
    reg resp_value : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 97:27]
    node x_value = bits(rs2, 15, 0) @[AllToAllPE.scala 99:20]
    node y_value = bits(rs2, 31, 16) @[AllToAllPE.scala 100:20]
    node memIndex = bits(rs2, 63, 32) @[AllToAllPE.scala 101:21]
    node _T = eq(x_value, x_coord) @[AllToAllPE.scala 109:29]
    node _T_1 = eq(y_value, y_coord) @[AllToAllPE.scala 109:54]
    node is_this_PE = and(_T, _T_1) @[AllToAllPE.scala 109:42]
    node load_signal = and(io.cmd.valid, io.cmd.bits.load) @[AllToAllPE.scala 110:34]
    node store_signal = and(io.cmd.valid, io.cmd.bits.store) @[AllToAllPE.scala 111:35]
    node allToAll_signal = and(io.cmd.valid, io.cmd.bits.doAllToAll) @[AllToAllPE.scala 112:38]
    node _T_2 = eq(io.resp.ready, UInt<1>("h0")) @[AllToAllPE.scala 114:20]
    node stall_resp = and(_T_2, io.resp.valid) @[AllToAllPE.scala 114:35]
    node start_AllToAll = eq(state, UInt<3>("h1")) @[AllToAllPE.scala 115:30]
    wire leftBusy : UInt<1> @[AllToAllPE.scala 117:22]
    wire rightBusy : UInt<1> @[AllToAllPE.scala 118:23]
    wire upBusy : UInt<1> @[AllToAllPE.scala 119:20]
    wire bottomBusy : UInt<1> @[AllToAllPE.scala 120:24]
    leftBusy <= UInt<1>("h0") @[AllToAllPE.scala 122:12]
    rightBusy <= UInt<1>("h0") @[AllToAllPE.scala 123:13]
    rightBusy <= UInt<1>("h0") @[AllToAllPE.scala 124:13]
    upBusy <= UInt<1>("h0") @[AllToAllPE.scala 125:10]
    bottomBusy <= UInt<1>("h0") @[AllToAllPE.scala 126:14]
    node _T_3 = eq(state, UInt<3>("h0")) @[AllToAllPE.scala 128:14]
    when _T_3 : @[AllToAllPE.scala 128:23]
      io.busy <= UInt<1>("h0") @[AllToAllPE.scala 129:13]
      io.cmd.ready <= UInt<1>("h1") @[AllToAllPE.scala 130:18]
      io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 131:19]
      io.resp.bits.data <= UInt<1>("h0") @[AllToAllPE.scala 132:23]
      io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 134:31]
      w_en <= UInt<1>("h0") @[AllToAllPE.scala 135:10]
      when load_signal : @[AllToAllPE.scala 137:22]
        state <= UInt<3>("h4") @[AllToAllPE.scala 138:13]
      else :
        when store_signal : @[AllToAllPE.scala 139:29]
          state <= UInt<3>("h5") @[AllToAllPE.scala 140:13]
        else :
          when allToAll_signal : @[AllToAllPE.scala 141:32]
            state <= UInt<3>("h1") @[AllToAllPE.scala 142:13]
          else :
            state <= UInt<3>("h0") @[AllToAllPE.scala 144:13]
    else :
      node _T_4 = eq(state, UInt<3>("h4")) @[AllToAllPE.scala 147:20]
      when _T_4 : @[AllToAllPE.scala 147:32]
        io.busy <= stall_resp @[AllToAllPE.scala 148:13]
        node _T_5 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 149:21]
        io.cmd.ready <= _T_5 @[AllToAllPE.scala 149:18]
        io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 150:19]
        io.resp.bits.data <= UInt<6>("h20") @[AllToAllPE.scala 151:23]
        resp_value <= UInt<6>("h20") @[AllToAllPE.scala 152:16]
        when is_this_PE : @[AllToAllPE.scala 154:21]
          node _T_6 = bits(memIndex, 4, 0) @[AllToAllPE.scala 155:12]
          infer mport MPORT = memPE[_T_6], clock @[AllToAllPE.scala 155:12]
          MPORT <= rs1 @[AllToAllPE.scala 155:23]
          io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 156:33]
          w_en <= UInt<1>("h1") @[AllToAllPE.scala 157:12]
        else :
          io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 159:33]
          w_en <= UInt<1>("h0") @[AllToAllPE.scala 160:12]
        node _T_7 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 163:25]
        node _T_8 = and(load_signal, _T_7) @[AllToAllPE.scala 163:22]
        when _T_8 : @[AllToAllPE.scala 163:37]
          state <= UInt<3>("h4") @[AllToAllPE.scala 164:13]
        else :
          node _T_9 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 165:32]
          node _T_10 = and(store_signal, _T_9) @[AllToAllPE.scala 165:29]
          when _T_10 : @[AllToAllPE.scala 165:44]
            state <= UInt<3>("h5") @[AllToAllPE.scala 166:13]
          else :
            node _T_11 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 167:35]
            node _T_12 = and(allToAll_signal, _T_11) @[AllToAllPE.scala 167:32]
            when _T_12 : @[AllToAllPE.scala 167:47]
              state <= UInt<3>("h1") @[AllToAllPE.scala 168:13]
            else :
              when stall_resp : @[AllToAllPE.scala 169:27]
                state <= UInt<3>("h7") @[AllToAllPE.scala 170:13]
              else :
                state <= UInt<3>("h0") @[AllToAllPE.scala 172:13]
      else :
        node _T_13 = eq(state, UInt<3>("h5")) @[AllToAllPE.scala 175:20]
        when _T_13 : @[AllToAllPE.scala 175:33]
          io.busy <= UInt<1>("h1") @[AllToAllPE.scala 177:13]
          io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 178:18]
          io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 179:19]
          io.resp.bits.data <= UInt<6>("h21") @[AllToAllPE.scala 180:23]
          when is_this_PE : @[AllToAllPE.scala 182:21]
            node _T_14 = bits(memIndex, 4, 0) @[AllToAllPE.scala 183:26]
            infer mport MPORT_1 = memPE[_T_14], clock @[AllToAllPE.scala 183:26]
            resp_value <= MPORT_1 @[AllToAllPE.scala 183:18]
            w_en <= UInt<1>("h1") @[AllToAllPE.scala 184:12]
          else :
            w_en <= UInt<1>("h0") @[AllToAllPE.scala 186:12]
          io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 189:31]
          state <= UInt<3>("h6") @[AllToAllPE.scala 191:11]
        else :
          node _T_15 = eq(state, UInt<3>("h6")) @[AllToAllPE.scala 193:20]
          when _T_15 : @[AllToAllPE.scala 193:35]
            io.busy <= stall_resp @[AllToAllPE.scala 195:13]
            node _T_16 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 196:21]
            io.cmd.ready <= _T_16 @[AllToAllPE.scala 196:18]
            io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 197:19]
            io.resp.bits.data <= resp_value @[AllToAllPE.scala 198:23]
            io.resp.bits.write_enable <= w_en @[AllToAllPE.scala 199:31]
            node _T_17 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 201:25]
            node _T_18 = and(load_signal, _T_17) @[AllToAllPE.scala 201:22]
            when _T_18 : @[AllToAllPE.scala 201:37]
              state <= UInt<3>("h4") @[AllToAllPE.scala 202:13]
            else :
              node _T_19 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 203:32]
              node _T_20 = and(store_signal, _T_19) @[AllToAllPE.scala 203:29]
              when _T_20 : @[AllToAllPE.scala 203:44]
                state <= UInt<3>("h5") @[AllToAllPE.scala 204:13]
              else :
                node _T_21 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 205:35]
                node _T_22 = and(allToAll_signal, _T_21) @[AllToAllPE.scala 205:32]
                when _T_22 : @[AllToAllPE.scala 205:47]
                  state <= UInt<3>("h1") @[AllToAllPE.scala 206:13]
                else :
                  when stall_resp : @[AllToAllPE.scala 207:27]
                    state <= UInt<3>("h7") @[AllToAllPE.scala 208:13]
                  else :
                    state <= UInt<3>("h0") @[AllToAllPE.scala 210:13]
          else :
            node _T_23 = eq(state, UInt<3>("h7")) @[AllToAllPE.scala 213:20]
            when _T_23 : @[AllToAllPE.scala 213:36]
              io.busy <= UInt<1>("h1") @[AllToAllPE.scala 215:13]
              io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 216:18]
              io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 217:19]
              io.resp.bits.data <= resp_value @[AllToAllPE.scala 218:23]
              io.resp.bits.write_enable <= w_en @[AllToAllPE.scala 220:31]
              when stall_resp : @[AllToAllPE.scala 222:21]
                state <= UInt<3>("h7") @[AllToAllPE.scala 223:13]
              else :
                state <= UInt<3>("h0") @[AllToAllPE.scala 225:13]
            else :
              node _T_24 = eq(state, UInt<3>("h1")) @[AllToAllPE.scala 228:20]
              when _T_24 : @[AllToAllPE.scala 228:31]
                io.busy <= UInt<1>("h1") @[AllToAllPE.scala 229:13]
                io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 230:18]
                io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 231:19]
                io.resp.bits.data <= resp_value @[AllToAllPE.scala 232:23]
                w_en <= UInt<1>("h0") @[AllToAllPE.scala 234:10]
                io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 235:31]
                io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 238:22]
                io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 239:23]
                io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 240:20]
                io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 241:24]
                state <= UInt<3>("h3") @[AllToAllPE.scala 243:11]
              else :
                node _T_25 = eq(state, UInt<3>("h2")) @[AllToAllPE.scala 245:20]
                when _T_25 : @[AllToAllPE.scala 245:41]
                  node _T_26 = or(leftBusy, rightBusy) @[AllToAllPE.scala 247:25]
                  node _T_27 = or(_T_26, upBusy) @[AllToAllPE.scala 247:38]
                  node _T_28 = or(_T_27, bottomBusy) @[AllToAllPE.scala 247:48]
                  io.busy <= _T_28 @[AllToAllPE.scala 247:13]
                  io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 248:18]
                  io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 249:19]
                  io.resp.bits.data <= resp_value @[AllToAllPE.scala 250:23]
                  io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 251:31]
                  io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 254:22]
                  io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 255:23]
                  io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 256:20]
                  io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 257:24]
                  when io.end_AllToAll : @[AllToAllPE.scala 259:27]
                    state <= UInt<3>("h3") @[AllToAllPE.scala 260:13]
                  else :
                    state <= UInt<3>("h2") @[AllToAllPE.scala 262:13]
                else :
                  node _T_29 = eq(state, UInt<3>("h3")) @[AllToAllPE.scala 265:20]
                  when _T_29 : @[AllToAllPE.scala 265:36]
                    io.busy <= UInt<1>("h0") @[AllToAllPE.scala 266:13]
                    io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 267:18]
                    io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 268:19]
                    io.resp.bits.data <= UInt<1>("h0") @[AllToAllPE.scala 269:23]
                    io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 270:31]
                    state <= UInt<3>("h0") @[AllToAllPE.scala 272:11]
                  else :
                    io.busy <= UInt<1>("h0") @[AllToAllPE.scala 276:13]
                    io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 277:18]
                    io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 278:19]
                    io.resp.bits.data <= UInt<64>("haaaaaaaa") @[AllToAllPE.scala 279:23]
                    io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 280:31]
    reg stateAction : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AllToAllPE.scala 289:28]
    node _T_30 = eq(stateAction, UInt<3>("h0")) @[AllToAllPE.scala 293:20]
    when _T_30 : @[AllToAllPE.scala 293:29]
      io.left.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 295:22]
      io.right.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 296:23]
      io.up.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 297:20]
      io.bottom.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 298:24]
      when start_AllToAll : @[AllToAllPE.scala 300:25]
        stateAction <= UInt<3>("h1") @[AllToAllPE.scala 301:19]
      else :
        stateAction <= UInt<3>("h0") @[AllToAllPE.scala 303:19]
    else :
      node _T_31 = eq(stateAction, UInt<3>("h1")) @[AllToAllPE.scala 305:26]
      when _T_31 : @[AllToAllPE.scala 305:37]
        io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 307:22]
        io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 308:23]
        io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 309:20]
        io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 310:24]
        when io.end_AllToAll : @[AllToAllPE.scala 313:26]
          stateAction <= UInt<3>("h0") @[AllToAllPE.scala 314:19]
        else :
          stateAction <= UInt<3>("h1") @[AllToAllPE.scala 316:19]
      else :
        skip
    io.left.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 324:25]
    io.left.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 325:24]
    io.left.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 326:24]
    io.left.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 327:27]
    io.left.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 328:27]
    io.left.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 329:21]
    io.left.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 330:20]
    io.right.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 332:26]
    io.right.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 333:25]
    io.right.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 334:25]
    io.right.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 335:28]
    io.right.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 336:28]
    io.right.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 337:22]
    io.right.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 338:21]
    io.up.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 340:23]
    io.up.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 341:22]
    io.up.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 342:22]
    io.up.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 343:25]
    io.up.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 344:25]
    io.up.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 345:19]
    io.up.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 346:18]
    io.bottom.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 348:27]
    io.bottom.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 349:26]
    io.bottom.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 350:26]
    io.bottom.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 351:29]
    io.bottom.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 352:29]
    io.bottom.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 353:23]
    io.bottom.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 354:22]
    inst left_in of Queue_4 @[Decoupled.scala 296:21]
    left_in.clock <= clock
    left_in.reset <= reset
    left_in.io.enq.valid <= io.left.in.valid @[Decoupled.scala 297:22]
    left_in.io.enq.bits.y_dest <= io.left.in.bits.y_dest @[Decoupled.scala 298:21]
    left_in.io.enq.bits.x_dest <= io.left.in.bits.x_dest @[Decoupled.scala 298:21]
    left_in.io.enq.bits.y_0 <= io.left.in.bits.y_0 @[Decoupled.scala 298:21]
    left_in.io.enq.bits.x_0 <= io.left.in.bits.x_0 @[Decoupled.scala 298:21]
    left_in.io.enq.bits.data <= io.left.in.bits.data @[Decoupled.scala 298:21]
    io.left.in.ready <= left_in.io.enq.ready @[Decoupled.scala 299:17]
    inst right_in of Queue_5 @[Decoupled.scala 296:21]
    right_in.clock <= clock
    right_in.reset <= reset
    right_in.io.enq.valid <= io.right.in.valid @[Decoupled.scala 297:22]
    right_in.io.enq.bits.y_dest <= io.right.in.bits.y_dest @[Decoupled.scala 298:21]
    right_in.io.enq.bits.x_dest <= io.right.in.bits.x_dest @[Decoupled.scala 298:21]
    right_in.io.enq.bits.y_0 <= io.right.in.bits.y_0 @[Decoupled.scala 298:21]
    right_in.io.enq.bits.x_0 <= io.right.in.bits.x_0 @[Decoupled.scala 298:21]
    right_in.io.enq.bits.data <= io.right.in.bits.data @[Decoupled.scala 298:21]
    io.right.in.ready <= right_in.io.enq.ready @[Decoupled.scala 299:17]
    inst up_in of Queue_6 @[Decoupled.scala 296:21]
    up_in.clock <= clock
    up_in.reset <= reset
    up_in.io.enq.valid <= io.up.in.valid @[Decoupled.scala 297:22]
    up_in.io.enq.bits.y_dest <= io.up.in.bits.y_dest @[Decoupled.scala 298:21]
    up_in.io.enq.bits.x_dest <= io.up.in.bits.x_dest @[Decoupled.scala 298:21]
    up_in.io.enq.bits.y_0 <= io.up.in.bits.y_0 @[Decoupled.scala 298:21]
    up_in.io.enq.bits.x_0 <= io.up.in.bits.x_0 @[Decoupled.scala 298:21]
    up_in.io.enq.bits.data <= io.up.in.bits.data @[Decoupled.scala 298:21]
    io.up.in.ready <= up_in.io.enq.ready @[Decoupled.scala 299:17]
    inst bottom_in of Queue_7 @[Decoupled.scala 296:21]
    bottom_in.clock <= clock
    bottom_in.reset <= reset
    bottom_in.io.enq.valid <= io.bottom.in.valid @[Decoupled.scala 297:22]
    bottom_in.io.enq.bits.y_dest <= io.bottom.in.bits.y_dest @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.x_dest <= io.bottom.in.bits.x_dest @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.y_0 <= io.bottom.in.bits.y_0 @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.x_0 <= io.bottom.in.bits.x_0 @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.data <= io.bottom.in.bits.data @[Decoupled.scala 298:21]
    io.bottom.in.ready <= bottom_in.io.enq.ready @[Decoupled.scala 299:17]
    left_in.io.deq.ready <= io.left.in.ready @[AllToAllPE.scala 373:17]
    right_in.io.deq.ready <= io.right.in.ready @[AllToAllPE.scala 374:18]
    up_in.io.deq.ready <= io.up.in.ready @[AllToAllPE.scala 375:15]
    bottom_in.io.deq.ready <= io.bottom.in.ready @[AllToAllPE.scala 376:19]

  module Queue_8 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_9 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_10 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_11 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module AllToAllPEupRightCorner :
    input clock : Clock
    input reset : Reset
    output io : { busy : UInt<1>, flip end_AllToAll : UInt<1>, flip cmd : { flip ready : UInt<1>, valid : UInt<1>, bits : { load : UInt<1>, store : UInt<1>, doAllToAll : UInt<1>, rs1 : UInt<64>, rs2 : UInt<64>}}, resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, write_enable : UInt<1>}}, left : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, right : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, up : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, bottom : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}}

    cmem memPE : UInt<64> [32] @[AllToAllPE.scala 72:18]
    reg x_coord : UInt<2>, clock with :
      reset => (reset, UInt<2>("h2")) @[AllToAllPE.scala 75:24]
    reg y_coord : UInt<2>, clock with :
      reset => (reset, UInt<2>("h2")) @[AllToAllPE.scala 76:24]
    reg rs1 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), rs1) @[AllToAllPE.scala 79:16]
    reg rs2 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), rs2) @[AllToAllPE.scala 80:16]
    rs1 <= io.cmd.bits.rs1 @[AllToAllPE.scala 86:7]
    rs2 <= io.cmd.bits.rs2 @[AllToAllPE.scala 87:7]
    reg w_en : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 91:21]
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AllToAllPE.scala 96:22]
    reg resp_value : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 97:27]
    node x_value = bits(rs2, 15, 0) @[AllToAllPE.scala 99:20]
    node y_value = bits(rs2, 31, 16) @[AllToAllPE.scala 100:20]
    node memIndex = bits(rs2, 63, 32) @[AllToAllPE.scala 101:21]
    node _T = eq(x_value, x_coord) @[AllToAllPE.scala 109:29]
    node _T_1 = eq(y_value, y_coord) @[AllToAllPE.scala 109:54]
    node is_this_PE = and(_T, _T_1) @[AllToAllPE.scala 109:42]
    node load_signal = and(io.cmd.valid, io.cmd.bits.load) @[AllToAllPE.scala 110:34]
    node store_signal = and(io.cmd.valid, io.cmd.bits.store) @[AllToAllPE.scala 111:35]
    node allToAll_signal = and(io.cmd.valid, io.cmd.bits.doAllToAll) @[AllToAllPE.scala 112:38]
    node _T_2 = eq(io.resp.ready, UInt<1>("h0")) @[AllToAllPE.scala 114:20]
    node stall_resp = and(_T_2, io.resp.valid) @[AllToAllPE.scala 114:35]
    node start_AllToAll = eq(state, UInt<3>("h1")) @[AllToAllPE.scala 115:30]
    wire leftBusy : UInt<1> @[AllToAllPE.scala 117:22]
    wire rightBusy : UInt<1> @[AllToAllPE.scala 118:23]
    wire upBusy : UInt<1> @[AllToAllPE.scala 119:20]
    wire bottomBusy : UInt<1> @[AllToAllPE.scala 120:24]
    leftBusy <= UInt<1>("h0") @[AllToAllPE.scala 122:12]
    rightBusy <= UInt<1>("h0") @[AllToAllPE.scala 123:13]
    rightBusy <= UInt<1>("h0") @[AllToAllPE.scala 124:13]
    upBusy <= UInt<1>("h0") @[AllToAllPE.scala 125:10]
    bottomBusy <= UInt<1>("h0") @[AllToAllPE.scala 126:14]
    node _T_3 = eq(state, UInt<3>("h0")) @[AllToAllPE.scala 128:14]
    when _T_3 : @[AllToAllPE.scala 128:23]
      io.busy <= UInt<1>("h0") @[AllToAllPE.scala 129:13]
      io.cmd.ready <= UInt<1>("h1") @[AllToAllPE.scala 130:18]
      io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 131:19]
      io.resp.bits.data <= UInt<1>("h0") @[AllToAllPE.scala 132:23]
      io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 134:31]
      w_en <= UInt<1>("h0") @[AllToAllPE.scala 135:10]
      when load_signal : @[AllToAllPE.scala 137:22]
        state <= UInt<3>("h4") @[AllToAllPE.scala 138:13]
      else :
        when store_signal : @[AllToAllPE.scala 139:29]
          state <= UInt<3>("h5") @[AllToAllPE.scala 140:13]
        else :
          when allToAll_signal : @[AllToAllPE.scala 141:32]
            state <= UInt<3>("h1") @[AllToAllPE.scala 142:13]
          else :
            state <= UInt<3>("h0") @[AllToAllPE.scala 144:13]
    else :
      node _T_4 = eq(state, UInt<3>("h4")) @[AllToAllPE.scala 147:20]
      when _T_4 : @[AllToAllPE.scala 147:32]
        io.busy <= stall_resp @[AllToAllPE.scala 148:13]
        node _T_5 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 149:21]
        io.cmd.ready <= _T_5 @[AllToAllPE.scala 149:18]
        io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 150:19]
        io.resp.bits.data <= UInt<6>("h20") @[AllToAllPE.scala 151:23]
        resp_value <= UInt<6>("h20") @[AllToAllPE.scala 152:16]
        when is_this_PE : @[AllToAllPE.scala 154:21]
          node _T_6 = bits(memIndex, 4, 0) @[AllToAllPE.scala 155:12]
          infer mport MPORT = memPE[_T_6], clock @[AllToAllPE.scala 155:12]
          MPORT <= rs1 @[AllToAllPE.scala 155:23]
          io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 156:33]
          w_en <= UInt<1>("h1") @[AllToAllPE.scala 157:12]
        else :
          io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 159:33]
          w_en <= UInt<1>("h0") @[AllToAllPE.scala 160:12]
        node _T_7 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 163:25]
        node _T_8 = and(load_signal, _T_7) @[AllToAllPE.scala 163:22]
        when _T_8 : @[AllToAllPE.scala 163:37]
          state <= UInt<3>("h4") @[AllToAllPE.scala 164:13]
        else :
          node _T_9 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 165:32]
          node _T_10 = and(store_signal, _T_9) @[AllToAllPE.scala 165:29]
          when _T_10 : @[AllToAllPE.scala 165:44]
            state <= UInt<3>("h5") @[AllToAllPE.scala 166:13]
          else :
            node _T_11 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 167:35]
            node _T_12 = and(allToAll_signal, _T_11) @[AllToAllPE.scala 167:32]
            when _T_12 : @[AllToAllPE.scala 167:47]
              state <= UInt<3>("h1") @[AllToAllPE.scala 168:13]
            else :
              when stall_resp : @[AllToAllPE.scala 169:27]
                state <= UInt<3>("h7") @[AllToAllPE.scala 170:13]
              else :
                state <= UInt<3>("h0") @[AllToAllPE.scala 172:13]
      else :
        node _T_13 = eq(state, UInt<3>("h5")) @[AllToAllPE.scala 175:20]
        when _T_13 : @[AllToAllPE.scala 175:33]
          io.busy <= UInt<1>("h1") @[AllToAllPE.scala 177:13]
          io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 178:18]
          io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 179:19]
          io.resp.bits.data <= UInt<6>("h21") @[AllToAllPE.scala 180:23]
          when is_this_PE : @[AllToAllPE.scala 182:21]
            node _T_14 = bits(memIndex, 4, 0) @[AllToAllPE.scala 183:26]
            infer mport MPORT_1 = memPE[_T_14], clock @[AllToAllPE.scala 183:26]
            resp_value <= MPORT_1 @[AllToAllPE.scala 183:18]
            w_en <= UInt<1>("h1") @[AllToAllPE.scala 184:12]
          else :
            w_en <= UInt<1>("h0") @[AllToAllPE.scala 186:12]
          io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 189:31]
          state <= UInt<3>("h6") @[AllToAllPE.scala 191:11]
        else :
          node _T_15 = eq(state, UInt<3>("h6")) @[AllToAllPE.scala 193:20]
          when _T_15 : @[AllToAllPE.scala 193:35]
            io.busy <= stall_resp @[AllToAllPE.scala 195:13]
            node _T_16 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 196:21]
            io.cmd.ready <= _T_16 @[AllToAllPE.scala 196:18]
            io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 197:19]
            io.resp.bits.data <= resp_value @[AllToAllPE.scala 198:23]
            io.resp.bits.write_enable <= w_en @[AllToAllPE.scala 199:31]
            node _T_17 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 201:25]
            node _T_18 = and(load_signal, _T_17) @[AllToAllPE.scala 201:22]
            when _T_18 : @[AllToAllPE.scala 201:37]
              state <= UInt<3>("h4") @[AllToAllPE.scala 202:13]
            else :
              node _T_19 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 203:32]
              node _T_20 = and(store_signal, _T_19) @[AllToAllPE.scala 203:29]
              when _T_20 : @[AllToAllPE.scala 203:44]
                state <= UInt<3>("h5") @[AllToAllPE.scala 204:13]
              else :
                node _T_21 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 205:35]
                node _T_22 = and(allToAll_signal, _T_21) @[AllToAllPE.scala 205:32]
                when _T_22 : @[AllToAllPE.scala 205:47]
                  state <= UInt<3>("h1") @[AllToAllPE.scala 206:13]
                else :
                  when stall_resp : @[AllToAllPE.scala 207:27]
                    state <= UInt<3>("h7") @[AllToAllPE.scala 208:13]
                  else :
                    state <= UInt<3>("h0") @[AllToAllPE.scala 210:13]
          else :
            node _T_23 = eq(state, UInt<3>("h7")) @[AllToAllPE.scala 213:20]
            when _T_23 : @[AllToAllPE.scala 213:36]
              io.busy <= UInt<1>("h1") @[AllToAllPE.scala 215:13]
              io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 216:18]
              io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 217:19]
              io.resp.bits.data <= resp_value @[AllToAllPE.scala 218:23]
              io.resp.bits.write_enable <= w_en @[AllToAllPE.scala 220:31]
              when stall_resp : @[AllToAllPE.scala 222:21]
                state <= UInt<3>("h7") @[AllToAllPE.scala 223:13]
              else :
                state <= UInt<3>("h0") @[AllToAllPE.scala 225:13]
            else :
              node _T_24 = eq(state, UInt<3>("h1")) @[AllToAllPE.scala 228:20]
              when _T_24 : @[AllToAllPE.scala 228:31]
                io.busy <= UInt<1>("h1") @[AllToAllPE.scala 229:13]
                io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 230:18]
                io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 231:19]
                io.resp.bits.data <= resp_value @[AllToAllPE.scala 232:23]
                w_en <= UInt<1>("h0") @[AllToAllPE.scala 234:10]
                io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 235:31]
                io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 238:22]
                io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 239:23]
                io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 240:20]
                io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 241:24]
                state <= UInt<3>("h3") @[AllToAllPE.scala 243:11]
              else :
                node _T_25 = eq(state, UInt<3>("h2")) @[AllToAllPE.scala 245:20]
                when _T_25 : @[AllToAllPE.scala 245:41]
                  node _T_26 = or(leftBusy, rightBusy) @[AllToAllPE.scala 247:25]
                  node _T_27 = or(_T_26, upBusy) @[AllToAllPE.scala 247:38]
                  node _T_28 = or(_T_27, bottomBusy) @[AllToAllPE.scala 247:48]
                  io.busy <= _T_28 @[AllToAllPE.scala 247:13]
                  io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 248:18]
                  io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 249:19]
                  io.resp.bits.data <= resp_value @[AllToAllPE.scala 250:23]
                  io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 251:31]
                  io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 254:22]
                  io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 255:23]
                  io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 256:20]
                  io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 257:24]
                  when io.end_AllToAll : @[AllToAllPE.scala 259:27]
                    state <= UInt<3>("h3") @[AllToAllPE.scala 260:13]
                  else :
                    state <= UInt<3>("h2") @[AllToAllPE.scala 262:13]
                else :
                  node _T_29 = eq(state, UInt<3>("h3")) @[AllToAllPE.scala 265:20]
                  when _T_29 : @[AllToAllPE.scala 265:36]
                    io.busy <= UInt<1>("h0") @[AllToAllPE.scala 266:13]
                    io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 267:18]
                    io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 268:19]
                    io.resp.bits.data <= UInt<1>("h0") @[AllToAllPE.scala 269:23]
                    io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 270:31]
                    state <= UInt<3>("h0") @[AllToAllPE.scala 272:11]
                  else :
                    io.busy <= UInt<1>("h0") @[AllToAllPE.scala 276:13]
                    io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 277:18]
                    io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 278:19]
                    io.resp.bits.data <= UInt<64>("haaaaaaaa") @[AllToAllPE.scala 279:23]
                    io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 280:31]
    reg stateAction : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AllToAllPE.scala 289:28]
    node _T_30 = eq(stateAction, UInt<3>("h0")) @[AllToAllPE.scala 293:20]
    when _T_30 : @[AllToAllPE.scala 293:29]
      io.left.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 295:22]
      io.right.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 296:23]
      io.up.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 297:20]
      io.bottom.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 298:24]
      when start_AllToAll : @[AllToAllPE.scala 300:25]
        stateAction <= UInt<3>("h1") @[AllToAllPE.scala 301:19]
      else :
        stateAction <= UInt<3>("h0") @[AllToAllPE.scala 303:19]
    else :
      node _T_31 = eq(stateAction, UInt<3>("h1")) @[AllToAllPE.scala 305:26]
      when _T_31 : @[AllToAllPE.scala 305:37]
        io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 307:22]
        io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 308:23]
        io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 309:20]
        io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 310:24]
        when io.end_AllToAll : @[AllToAllPE.scala 313:26]
          stateAction <= UInt<3>("h0") @[AllToAllPE.scala 314:19]
        else :
          stateAction <= UInt<3>("h1") @[AllToAllPE.scala 316:19]
      else :
        skip
    io.left.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 324:25]
    io.left.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 325:24]
    io.left.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 326:24]
    io.left.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 327:27]
    io.left.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 328:27]
    io.left.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 329:21]
    io.left.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 330:20]
    io.right.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 332:26]
    io.right.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 333:25]
    io.right.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 334:25]
    io.right.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 335:28]
    io.right.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 336:28]
    io.right.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 337:22]
    io.right.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 338:21]
    io.up.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 340:23]
    io.up.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 341:22]
    io.up.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 342:22]
    io.up.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 343:25]
    io.up.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 344:25]
    io.up.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 345:19]
    io.up.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 346:18]
    io.bottom.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 348:27]
    io.bottom.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 349:26]
    io.bottom.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 350:26]
    io.bottom.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 351:29]
    io.bottom.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 352:29]
    io.bottom.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 353:23]
    io.bottom.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 354:22]
    inst left_in of Queue_8 @[Decoupled.scala 296:21]
    left_in.clock <= clock
    left_in.reset <= reset
    left_in.io.enq.valid <= io.left.in.valid @[Decoupled.scala 297:22]
    left_in.io.enq.bits.y_dest <= io.left.in.bits.y_dest @[Decoupled.scala 298:21]
    left_in.io.enq.bits.x_dest <= io.left.in.bits.x_dest @[Decoupled.scala 298:21]
    left_in.io.enq.bits.y_0 <= io.left.in.bits.y_0 @[Decoupled.scala 298:21]
    left_in.io.enq.bits.x_0 <= io.left.in.bits.x_0 @[Decoupled.scala 298:21]
    left_in.io.enq.bits.data <= io.left.in.bits.data @[Decoupled.scala 298:21]
    io.left.in.ready <= left_in.io.enq.ready @[Decoupled.scala 299:17]
    inst right_in of Queue_9 @[Decoupled.scala 296:21]
    right_in.clock <= clock
    right_in.reset <= reset
    right_in.io.enq.valid <= io.right.in.valid @[Decoupled.scala 297:22]
    right_in.io.enq.bits.y_dest <= io.right.in.bits.y_dest @[Decoupled.scala 298:21]
    right_in.io.enq.bits.x_dest <= io.right.in.bits.x_dest @[Decoupled.scala 298:21]
    right_in.io.enq.bits.y_0 <= io.right.in.bits.y_0 @[Decoupled.scala 298:21]
    right_in.io.enq.bits.x_0 <= io.right.in.bits.x_0 @[Decoupled.scala 298:21]
    right_in.io.enq.bits.data <= io.right.in.bits.data @[Decoupled.scala 298:21]
    io.right.in.ready <= right_in.io.enq.ready @[Decoupled.scala 299:17]
    inst up_in of Queue_10 @[Decoupled.scala 296:21]
    up_in.clock <= clock
    up_in.reset <= reset
    up_in.io.enq.valid <= io.up.in.valid @[Decoupled.scala 297:22]
    up_in.io.enq.bits.y_dest <= io.up.in.bits.y_dest @[Decoupled.scala 298:21]
    up_in.io.enq.bits.x_dest <= io.up.in.bits.x_dest @[Decoupled.scala 298:21]
    up_in.io.enq.bits.y_0 <= io.up.in.bits.y_0 @[Decoupled.scala 298:21]
    up_in.io.enq.bits.x_0 <= io.up.in.bits.x_0 @[Decoupled.scala 298:21]
    up_in.io.enq.bits.data <= io.up.in.bits.data @[Decoupled.scala 298:21]
    io.up.in.ready <= up_in.io.enq.ready @[Decoupled.scala 299:17]
    inst bottom_in of Queue_11 @[Decoupled.scala 296:21]
    bottom_in.clock <= clock
    bottom_in.reset <= reset
    bottom_in.io.enq.valid <= io.bottom.in.valid @[Decoupled.scala 297:22]
    bottom_in.io.enq.bits.y_dest <= io.bottom.in.bits.y_dest @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.x_dest <= io.bottom.in.bits.x_dest @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.y_0 <= io.bottom.in.bits.y_0 @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.x_0 <= io.bottom.in.bits.x_0 @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.data <= io.bottom.in.bits.data @[Decoupled.scala 298:21]
    io.bottom.in.ready <= bottom_in.io.enq.ready @[Decoupled.scala 299:17]
    left_in.io.deq.ready <= io.left.in.ready @[AllToAllPE.scala 373:17]
    right_in.io.deq.ready <= io.right.in.ready @[AllToAllPE.scala 374:18]
    up_in.io.deq.ready <= io.up.in.ready @[AllToAllPE.scala 375:15]
    bottom_in.io.deq.ready <= io.bottom.in.ready @[AllToAllPE.scala 376:19]

  module Queue_12 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_13 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_14 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_15 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module AllToAllPEleft :
    input clock : Clock
    input reset : Reset
    output io : { busy : UInt<1>, flip end_AllToAll : UInt<1>, flip cmd : { flip ready : UInt<1>, valid : UInt<1>, bits : { load : UInt<1>, store : UInt<1>, doAllToAll : UInt<1>, rs1 : UInt<64>, rs2 : UInt<64>}}, resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, write_enable : UInt<1>}}, left : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, right : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, up : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, bottom : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}}

    cmem memPE : UInt<64> [32] @[AllToAllPE.scala 72:18]
    reg x_coord : UInt<2>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 75:24]
    reg y_coord : UInt<2>, clock with :
      reset => (reset, UInt<1>("h1")) @[AllToAllPE.scala 76:24]
    reg rs1 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), rs1) @[AllToAllPE.scala 79:16]
    reg rs2 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), rs2) @[AllToAllPE.scala 80:16]
    rs1 <= io.cmd.bits.rs1 @[AllToAllPE.scala 86:7]
    rs2 <= io.cmd.bits.rs2 @[AllToAllPE.scala 87:7]
    reg w_en : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 91:21]
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AllToAllPE.scala 96:22]
    reg resp_value : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 97:27]
    node x_value = bits(rs2, 15, 0) @[AllToAllPE.scala 99:20]
    node y_value = bits(rs2, 31, 16) @[AllToAllPE.scala 100:20]
    node memIndex = bits(rs2, 63, 32) @[AllToAllPE.scala 101:21]
    node _T = eq(x_value, x_coord) @[AllToAllPE.scala 109:29]
    node _T_1 = eq(y_value, y_coord) @[AllToAllPE.scala 109:54]
    node is_this_PE = and(_T, _T_1) @[AllToAllPE.scala 109:42]
    node load_signal = and(io.cmd.valid, io.cmd.bits.load) @[AllToAllPE.scala 110:34]
    node store_signal = and(io.cmd.valid, io.cmd.bits.store) @[AllToAllPE.scala 111:35]
    node allToAll_signal = and(io.cmd.valid, io.cmd.bits.doAllToAll) @[AllToAllPE.scala 112:38]
    node _T_2 = eq(io.resp.ready, UInt<1>("h0")) @[AllToAllPE.scala 114:20]
    node stall_resp = and(_T_2, io.resp.valid) @[AllToAllPE.scala 114:35]
    node start_AllToAll = eq(state, UInt<3>("h1")) @[AllToAllPE.scala 115:30]
    wire leftBusy : UInt<1> @[AllToAllPE.scala 117:22]
    wire rightBusy : UInt<1> @[AllToAllPE.scala 118:23]
    wire upBusy : UInt<1> @[AllToAllPE.scala 119:20]
    wire bottomBusy : UInt<1> @[AllToAllPE.scala 120:24]
    leftBusy <= UInt<1>("h0") @[AllToAllPE.scala 122:12]
    rightBusy <= UInt<1>("h0") @[AllToAllPE.scala 123:13]
    rightBusy <= UInt<1>("h0") @[AllToAllPE.scala 124:13]
    upBusy <= UInt<1>("h0") @[AllToAllPE.scala 125:10]
    bottomBusy <= UInt<1>("h0") @[AllToAllPE.scala 126:14]
    node _T_3 = eq(state, UInt<3>("h0")) @[AllToAllPE.scala 128:14]
    when _T_3 : @[AllToAllPE.scala 128:23]
      io.busy <= UInt<1>("h0") @[AllToAllPE.scala 129:13]
      io.cmd.ready <= UInt<1>("h1") @[AllToAllPE.scala 130:18]
      io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 131:19]
      io.resp.bits.data <= UInt<1>("h0") @[AllToAllPE.scala 132:23]
      io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 134:31]
      w_en <= UInt<1>("h0") @[AllToAllPE.scala 135:10]
      when load_signal : @[AllToAllPE.scala 137:22]
        state <= UInt<3>("h4") @[AllToAllPE.scala 138:13]
      else :
        when store_signal : @[AllToAllPE.scala 139:29]
          state <= UInt<3>("h5") @[AllToAllPE.scala 140:13]
        else :
          when allToAll_signal : @[AllToAllPE.scala 141:32]
            state <= UInt<3>("h1") @[AllToAllPE.scala 142:13]
          else :
            state <= UInt<3>("h0") @[AllToAllPE.scala 144:13]
    else :
      node _T_4 = eq(state, UInt<3>("h4")) @[AllToAllPE.scala 147:20]
      when _T_4 : @[AllToAllPE.scala 147:32]
        io.busy <= stall_resp @[AllToAllPE.scala 148:13]
        node _T_5 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 149:21]
        io.cmd.ready <= _T_5 @[AllToAllPE.scala 149:18]
        io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 150:19]
        io.resp.bits.data <= UInt<6>("h20") @[AllToAllPE.scala 151:23]
        resp_value <= UInt<6>("h20") @[AllToAllPE.scala 152:16]
        when is_this_PE : @[AllToAllPE.scala 154:21]
          node _T_6 = bits(memIndex, 4, 0) @[AllToAllPE.scala 155:12]
          infer mport MPORT = memPE[_T_6], clock @[AllToAllPE.scala 155:12]
          MPORT <= rs1 @[AllToAllPE.scala 155:23]
          io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 156:33]
          w_en <= UInt<1>("h1") @[AllToAllPE.scala 157:12]
        else :
          io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 159:33]
          w_en <= UInt<1>("h0") @[AllToAllPE.scala 160:12]
        node _T_7 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 163:25]
        node _T_8 = and(load_signal, _T_7) @[AllToAllPE.scala 163:22]
        when _T_8 : @[AllToAllPE.scala 163:37]
          state <= UInt<3>("h4") @[AllToAllPE.scala 164:13]
        else :
          node _T_9 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 165:32]
          node _T_10 = and(store_signal, _T_9) @[AllToAllPE.scala 165:29]
          when _T_10 : @[AllToAllPE.scala 165:44]
            state <= UInt<3>("h5") @[AllToAllPE.scala 166:13]
          else :
            node _T_11 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 167:35]
            node _T_12 = and(allToAll_signal, _T_11) @[AllToAllPE.scala 167:32]
            when _T_12 : @[AllToAllPE.scala 167:47]
              state <= UInt<3>("h1") @[AllToAllPE.scala 168:13]
            else :
              when stall_resp : @[AllToAllPE.scala 169:27]
                state <= UInt<3>("h7") @[AllToAllPE.scala 170:13]
              else :
                state <= UInt<3>("h0") @[AllToAllPE.scala 172:13]
      else :
        node _T_13 = eq(state, UInt<3>("h5")) @[AllToAllPE.scala 175:20]
        when _T_13 : @[AllToAllPE.scala 175:33]
          io.busy <= UInt<1>("h1") @[AllToAllPE.scala 177:13]
          io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 178:18]
          io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 179:19]
          io.resp.bits.data <= UInt<6>("h21") @[AllToAllPE.scala 180:23]
          when is_this_PE : @[AllToAllPE.scala 182:21]
            node _T_14 = bits(memIndex, 4, 0) @[AllToAllPE.scala 183:26]
            infer mport MPORT_1 = memPE[_T_14], clock @[AllToAllPE.scala 183:26]
            resp_value <= MPORT_1 @[AllToAllPE.scala 183:18]
            w_en <= UInt<1>("h1") @[AllToAllPE.scala 184:12]
          else :
            w_en <= UInt<1>("h0") @[AllToAllPE.scala 186:12]
          io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 189:31]
          state <= UInt<3>("h6") @[AllToAllPE.scala 191:11]
        else :
          node _T_15 = eq(state, UInt<3>("h6")) @[AllToAllPE.scala 193:20]
          when _T_15 : @[AllToAllPE.scala 193:35]
            io.busy <= stall_resp @[AllToAllPE.scala 195:13]
            node _T_16 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 196:21]
            io.cmd.ready <= _T_16 @[AllToAllPE.scala 196:18]
            io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 197:19]
            io.resp.bits.data <= resp_value @[AllToAllPE.scala 198:23]
            io.resp.bits.write_enable <= w_en @[AllToAllPE.scala 199:31]
            node _T_17 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 201:25]
            node _T_18 = and(load_signal, _T_17) @[AllToAllPE.scala 201:22]
            when _T_18 : @[AllToAllPE.scala 201:37]
              state <= UInt<3>("h4") @[AllToAllPE.scala 202:13]
            else :
              node _T_19 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 203:32]
              node _T_20 = and(store_signal, _T_19) @[AllToAllPE.scala 203:29]
              when _T_20 : @[AllToAllPE.scala 203:44]
                state <= UInt<3>("h5") @[AllToAllPE.scala 204:13]
              else :
                node _T_21 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 205:35]
                node _T_22 = and(allToAll_signal, _T_21) @[AllToAllPE.scala 205:32]
                when _T_22 : @[AllToAllPE.scala 205:47]
                  state <= UInt<3>("h1") @[AllToAllPE.scala 206:13]
                else :
                  when stall_resp : @[AllToAllPE.scala 207:27]
                    state <= UInt<3>("h7") @[AllToAllPE.scala 208:13]
                  else :
                    state <= UInt<3>("h0") @[AllToAllPE.scala 210:13]
          else :
            node _T_23 = eq(state, UInt<3>("h7")) @[AllToAllPE.scala 213:20]
            when _T_23 : @[AllToAllPE.scala 213:36]
              io.busy <= UInt<1>("h1") @[AllToAllPE.scala 215:13]
              io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 216:18]
              io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 217:19]
              io.resp.bits.data <= resp_value @[AllToAllPE.scala 218:23]
              io.resp.bits.write_enable <= w_en @[AllToAllPE.scala 220:31]
              when stall_resp : @[AllToAllPE.scala 222:21]
                state <= UInt<3>("h7") @[AllToAllPE.scala 223:13]
              else :
                state <= UInt<3>("h0") @[AllToAllPE.scala 225:13]
            else :
              node _T_24 = eq(state, UInt<3>("h1")) @[AllToAllPE.scala 228:20]
              when _T_24 : @[AllToAllPE.scala 228:31]
                io.busy <= UInt<1>("h1") @[AllToAllPE.scala 229:13]
                io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 230:18]
                io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 231:19]
                io.resp.bits.data <= resp_value @[AllToAllPE.scala 232:23]
                w_en <= UInt<1>("h0") @[AllToAllPE.scala 234:10]
                io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 235:31]
                io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 238:22]
                io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 239:23]
                io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 240:20]
                io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 241:24]
                state <= UInt<3>("h3") @[AllToAllPE.scala 243:11]
              else :
                node _T_25 = eq(state, UInt<3>("h2")) @[AllToAllPE.scala 245:20]
                when _T_25 : @[AllToAllPE.scala 245:41]
                  node _T_26 = or(leftBusy, rightBusy) @[AllToAllPE.scala 247:25]
                  node _T_27 = or(_T_26, upBusy) @[AllToAllPE.scala 247:38]
                  node _T_28 = or(_T_27, bottomBusy) @[AllToAllPE.scala 247:48]
                  io.busy <= _T_28 @[AllToAllPE.scala 247:13]
                  io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 248:18]
                  io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 249:19]
                  io.resp.bits.data <= resp_value @[AllToAllPE.scala 250:23]
                  io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 251:31]
                  io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 254:22]
                  io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 255:23]
                  io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 256:20]
                  io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 257:24]
                  when io.end_AllToAll : @[AllToAllPE.scala 259:27]
                    state <= UInt<3>("h3") @[AllToAllPE.scala 260:13]
                  else :
                    state <= UInt<3>("h2") @[AllToAllPE.scala 262:13]
                else :
                  node _T_29 = eq(state, UInt<3>("h3")) @[AllToAllPE.scala 265:20]
                  when _T_29 : @[AllToAllPE.scala 265:36]
                    io.busy <= UInt<1>("h0") @[AllToAllPE.scala 266:13]
                    io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 267:18]
                    io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 268:19]
                    io.resp.bits.data <= UInt<1>("h0") @[AllToAllPE.scala 269:23]
                    io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 270:31]
                    state <= UInt<3>("h0") @[AllToAllPE.scala 272:11]
                  else :
                    io.busy <= UInt<1>("h0") @[AllToAllPE.scala 276:13]
                    io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 277:18]
                    io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 278:19]
                    io.resp.bits.data <= UInt<64>("haaaaaaaa") @[AllToAllPE.scala 279:23]
                    io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 280:31]
    reg stateAction : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AllToAllPE.scala 289:28]
    node _T_30 = eq(stateAction, UInt<3>("h0")) @[AllToAllPE.scala 293:20]
    when _T_30 : @[AllToAllPE.scala 293:29]
      io.left.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 295:22]
      io.right.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 296:23]
      io.up.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 297:20]
      io.bottom.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 298:24]
      when start_AllToAll : @[AllToAllPE.scala 300:25]
        stateAction <= UInt<3>("h1") @[AllToAllPE.scala 301:19]
      else :
        stateAction <= UInt<3>("h0") @[AllToAllPE.scala 303:19]
    else :
      node _T_31 = eq(stateAction, UInt<3>("h1")) @[AllToAllPE.scala 305:26]
      when _T_31 : @[AllToAllPE.scala 305:37]
        io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 307:22]
        io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 308:23]
        io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 309:20]
        io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 310:24]
        when io.end_AllToAll : @[AllToAllPE.scala 313:26]
          stateAction <= UInt<3>("h0") @[AllToAllPE.scala 314:19]
        else :
          stateAction <= UInt<3>("h1") @[AllToAllPE.scala 316:19]
      else :
        skip
    io.left.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 324:25]
    io.left.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 325:24]
    io.left.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 326:24]
    io.left.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 327:27]
    io.left.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 328:27]
    io.left.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 329:21]
    io.left.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 330:20]
    io.right.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 332:26]
    io.right.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 333:25]
    io.right.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 334:25]
    io.right.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 335:28]
    io.right.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 336:28]
    io.right.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 337:22]
    io.right.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 338:21]
    io.up.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 340:23]
    io.up.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 341:22]
    io.up.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 342:22]
    io.up.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 343:25]
    io.up.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 344:25]
    io.up.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 345:19]
    io.up.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 346:18]
    io.bottom.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 348:27]
    io.bottom.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 349:26]
    io.bottom.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 350:26]
    io.bottom.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 351:29]
    io.bottom.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 352:29]
    io.bottom.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 353:23]
    io.bottom.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 354:22]
    inst left_in of Queue_12 @[Decoupled.scala 296:21]
    left_in.clock <= clock
    left_in.reset <= reset
    left_in.io.enq.valid <= io.left.in.valid @[Decoupled.scala 297:22]
    left_in.io.enq.bits.y_dest <= io.left.in.bits.y_dest @[Decoupled.scala 298:21]
    left_in.io.enq.bits.x_dest <= io.left.in.bits.x_dest @[Decoupled.scala 298:21]
    left_in.io.enq.bits.y_0 <= io.left.in.bits.y_0 @[Decoupled.scala 298:21]
    left_in.io.enq.bits.x_0 <= io.left.in.bits.x_0 @[Decoupled.scala 298:21]
    left_in.io.enq.bits.data <= io.left.in.bits.data @[Decoupled.scala 298:21]
    io.left.in.ready <= left_in.io.enq.ready @[Decoupled.scala 299:17]
    inst right_in of Queue_13 @[Decoupled.scala 296:21]
    right_in.clock <= clock
    right_in.reset <= reset
    right_in.io.enq.valid <= io.right.in.valid @[Decoupled.scala 297:22]
    right_in.io.enq.bits.y_dest <= io.right.in.bits.y_dest @[Decoupled.scala 298:21]
    right_in.io.enq.bits.x_dest <= io.right.in.bits.x_dest @[Decoupled.scala 298:21]
    right_in.io.enq.bits.y_0 <= io.right.in.bits.y_0 @[Decoupled.scala 298:21]
    right_in.io.enq.bits.x_0 <= io.right.in.bits.x_0 @[Decoupled.scala 298:21]
    right_in.io.enq.bits.data <= io.right.in.bits.data @[Decoupled.scala 298:21]
    io.right.in.ready <= right_in.io.enq.ready @[Decoupled.scala 299:17]
    inst up_in of Queue_14 @[Decoupled.scala 296:21]
    up_in.clock <= clock
    up_in.reset <= reset
    up_in.io.enq.valid <= io.up.in.valid @[Decoupled.scala 297:22]
    up_in.io.enq.bits.y_dest <= io.up.in.bits.y_dest @[Decoupled.scala 298:21]
    up_in.io.enq.bits.x_dest <= io.up.in.bits.x_dest @[Decoupled.scala 298:21]
    up_in.io.enq.bits.y_0 <= io.up.in.bits.y_0 @[Decoupled.scala 298:21]
    up_in.io.enq.bits.x_0 <= io.up.in.bits.x_0 @[Decoupled.scala 298:21]
    up_in.io.enq.bits.data <= io.up.in.bits.data @[Decoupled.scala 298:21]
    io.up.in.ready <= up_in.io.enq.ready @[Decoupled.scala 299:17]
    inst bottom_in of Queue_15 @[Decoupled.scala 296:21]
    bottom_in.clock <= clock
    bottom_in.reset <= reset
    bottom_in.io.enq.valid <= io.bottom.in.valid @[Decoupled.scala 297:22]
    bottom_in.io.enq.bits.y_dest <= io.bottom.in.bits.y_dest @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.x_dest <= io.bottom.in.bits.x_dest @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.y_0 <= io.bottom.in.bits.y_0 @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.x_0 <= io.bottom.in.bits.x_0 @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.data <= io.bottom.in.bits.data @[Decoupled.scala 298:21]
    io.bottom.in.ready <= bottom_in.io.enq.ready @[Decoupled.scala 299:17]
    left_in.io.deq.ready <= io.left.in.ready @[AllToAllPE.scala 373:17]
    right_in.io.deq.ready <= io.right.in.ready @[AllToAllPE.scala 374:18]
    up_in.io.deq.ready <= io.up.in.ready @[AllToAllPE.scala 375:15]
    bottom_in.io.deq.ready <= io.bottom.in.ready @[AllToAllPE.scala 376:19]

  module Queue_16 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_17 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_18 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_19 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module AllToAllPEmiddle :
    input clock : Clock
    input reset : Reset
    output io : { busy : UInt<1>, flip end_AllToAll : UInt<1>, flip cmd : { flip ready : UInt<1>, valid : UInt<1>, bits : { load : UInt<1>, store : UInt<1>, doAllToAll : UInt<1>, rs1 : UInt<64>, rs2 : UInt<64>}}, resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, write_enable : UInt<1>}}, left : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, right : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, up : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, bottom : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}}

    cmem memPE : UInt<64> [32] @[AllToAllPE.scala 72:18]
    reg x_coord : UInt<2>, clock with :
      reset => (reset, UInt<1>("h1")) @[AllToAllPE.scala 75:24]
    reg y_coord : UInt<2>, clock with :
      reset => (reset, UInt<1>("h1")) @[AllToAllPE.scala 76:24]
    reg rs1 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), rs1) @[AllToAllPE.scala 79:16]
    reg rs2 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), rs2) @[AllToAllPE.scala 80:16]
    rs1 <= io.cmd.bits.rs1 @[AllToAllPE.scala 86:7]
    rs2 <= io.cmd.bits.rs2 @[AllToAllPE.scala 87:7]
    reg w_en : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 91:21]
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AllToAllPE.scala 96:22]
    reg resp_value : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 97:27]
    node x_value = bits(rs2, 15, 0) @[AllToAllPE.scala 99:20]
    node y_value = bits(rs2, 31, 16) @[AllToAllPE.scala 100:20]
    node memIndex = bits(rs2, 63, 32) @[AllToAllPE.scala 101:21]
    node _T = eq(x_value, x_coord) @[AllToAllPE.scala 109:29]
    node _T_1 = eq(y_value, y_coord) @[AllToAllPE.scala 109:54]
    node is_this_PE = and(_T, _T_1) @[AllToAllPE.scala 109:42]
    node load_signal = and(io.cmd.valid, io.cmd.bits.load) @[AllToAllPE.scala 110:34]
    node store_signal = and(io.cmd.valid, io.cmd.bits.store) @[AllToAllPE.scala 111:35]
    node allToAll_signal = and(io.cmd.valid, io.cmd.bits.doAllToAll) @[AllToAllPE.scala 112:38]
    node _T_2 = eq(io.resp.ready, UInt<1>("h0")) @[AllToAllPE.scala 114:20]
    node stall_resp = and(_T_2, io.resp.valid) @[AllToAllPE.scala 114:35]
    node start_AllToAll = eq(state, UInt<3>("h1")) @[AllToAllPE.scala 115:30]
    wire leftBusy : UInt<1> @[AllToAllPE.scala 117:22]
    wire rightBusy : UInt<1> @[AllToAllPE.scala 118:23]
    wire upBusy : UInt<1> @[AllToAllPE.scala 119:20]
    wire bottomBusy : UInt<1> @[AllToAllPE.scala 120:24]
    leftBusy <= UInt<1>("h0") @[AllToAllPE.scala 122:12]
    rightBusy <= UInt<1>("h0") @[AllToAllPE.scala 123:13]
    rightBusy <= UInt<1>("h0") @[AllToAllPE.scala 124:13]
    upBusy <= UInt<1>("h0") @[AllToAllPE.scala 125:10]
    bottomBusy <= UInt<1>("h0") @[AllToAllPE.scala 126:14]
    node _T_3 = eq(state, UInt<3>("h0")) @[AllToAllPE.scala 128:14]
    when _T_3 : @[AllToAllPE.scala 128:23]
      io.busy <= UInt<1>("h0") @[AllToAllPE.scala 129:13]
      io.cmd.ready <= UInt<1>("h1") @[AllToAllPE.scala 130:18]
      io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 131:19]
      io.resp.bits.data <= UInt<1>("h0") @[AllToAllPE.scala 132:23]
      io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 134:31]
      w_en <= UInt<1>("h0") @[AllToAllPE.scala 135:10]
      when load_signal : @[AllToAllPE.scala 137:22]
        state <= UInt<3>("h4") @[AllToAllPE.scala 138:13]
      else :
        when store_signal : @[AllToAllPE.scala 139:29]
          state <= UInt<3>("h5") @[AllToAllPE.scala 140:13]
        else :
          when allToAll_signal : @[AllToAllPE.scala 141:32]
            state <= UInt<3>("h1") @[AllToAllPE.scala 142:13]
          else :
            state <= UInt<3>("h0") @[AllToAllPE.scala 144:13]
    else :
      node _T_4 = eq(state, UInt<3>("h4")) @[AllToAllPE.scala 147:20]
      when _T_4 : @[AllToAllPE.scala 147:32]
        io.busy <= stall_resp @[AllToAllPE.scala 148:13]
        node _T_5 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 149:21]
        io.cmd.ready <= _T_5 @[AllToAllPE.scala 149:18]
        io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 150:19]
        io.resp.bits.data <= UInt<6>("h20") @[AllToAllPE.scala 151:23]
        resp_value <= UInt<6>("h20") @[AllToAllPE.scala 152:16]
        when is_this_PE : @[AllToAllPE.scala 154:21]
          node _T_6 = bits(memIndex, 4, 0) @[AllToAllPE.scala 155:12]
          infer mport MPORT = memPE[_T_6], clock @[AllToAllPE.scala 155:12]
          MPORT <= rs1 @[AllToAllPE.scala 155:23]
          io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 156:33]
          w_en <= UInt<1>("h1") @[AllToAllPE.scala 157:12]
        else :
          io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 159:33]
          w_en <= UInt<1>("h0") @[AllToAllPE.scala 160:12]
        node _T_7 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 163:25]
        node _T_8 = and(load_signal, _T_7) @[AllToAllPE.scala 163:22]
        when _T_8 : @[AllToAllPE.scala 163:37]
          state <= UInt<3>("h4") @[AllToAllPE.scala 164:13]
        else :
          node _T_9 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 165:32]
          node _T_10 = and(store_signal, _T_9) @[AllToAllPE.scala 165:29]
          when _T_10 : @[AllToAllPE.scala 165:44]
            state <= UInt<3>("h5") @[AllToAllPE.scala 166:13]
          else :
            node _T_11 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 167:35]
            node _T_12 = and(allToAll_signal, _T_11) @[AllToAllPE.scala 167:32]
            when _T_12 : @[AllToAllPE.scala 167:47]
              state <= UInt<3>("h1") @[AllToAllPE.scala 168:13]
            else :
              when stall_resp : @[AllToAllPE.scala 169:27]
                state <= UInt<3>("h7") @[AllToAllPE.scala 170:13]
              else :
                state <= UInt<3>("h0") @[AllToAllPE.scala 172:13]
      else :
        node _T_13 = eq(state, UInt<3>("h5")) @[AllToAllPE.scala 175:20]
        when _T_13 : @[AllToAllPE.scala 175:33]
          io.busy <= UInt<1>("h1") @[AllToAllPE.scala 177:13]
          io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 178:18]
          io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 179:19]
          io.resp.bits.data <= UInt<6>("h21") @[AllToAllPE.scala 180:23]
          when is_this_PE : @[AllToAllPE.scala 182:21]
            node _T_14 = bits(memIndex, 4, 0) @[AllToAllPE.scala 183:26]
            infer mport MPORT_1 = memPE[_T_14], clock @[AllToAllPE.scala 183:26]
            resp_value <= MPORT_1 @[AllToAllPE.scala 183:18]
            w_en <= UInt<1>("h1") @[AllToAllPE.scala 184:12]
          else :
            w_en <= UInt<1>("h0") @[AllToAllPE.scala 186:12]
          io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 189:31]
          state <= UInt<3>("h6") @[AllToAllPE.scala 191:11]
        else :
          node _T_15 = eq(state, UInt<3>("h6")) @[AllToAllPE.scala 193:20]
          when _T_15 : @[AllToAllPE.scala 193:35]
            io.busy <= stall_resp @[AllToAllPE.scala 195:13]
            node _T_16 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 196:21]
            io.cmd.ready <= _T_16 @[AllToAllPE.scala 196:18]
            io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 197:19]
            io.resp.bits.data <= resp_value @[AllToAllPE.scala 198:23]
            io.resp.bits.write_enable <= w_en @[AllToAllPE.scala 199:31]
            node _T_17 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 201:25]
            node _T_18 = and(load_signal, _T_17) @[AllToAllPE.scala 201:22]
            when _T_18 : @[AllToAllPE.scala 201:37]
              state <= UInt<3>("h4") @[AllToAllPE.scala 202:13]
            else :
              node _T_19 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 203:32]
              node _T_20 = and(store_signal, _T_19) @[AllToAllPE.scala 203:29]
              when _T_20 : @[AllToAllPE.scala 203:44]
                state <= UInt<3>("h5") @[AllToAllPE.scala 204:13]
              else :
                node _T_21 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 205:35]
                node _T_22 = and(allToAll_signal, _T_21) @[AllToAllPE.scala 205:32]
                when _T_22 : @[AllToAllPE.scala 205:47]
                  state <= UInt<3>("h1") @[AllToAllPE.scala 206:13]
                else :
                  when stall_resp : @[AllToAllPE.scala 207:27]
                    state <= UInt<3>("h7") @[AllToAllPE.scala 208:13]
                  else :
                    state <= UInt<3>("h0") @[AllToAllPE.scala 210:13]
          else :
            node _T_23 = eq(state, UInt<3>("h7")) @[AllToAllPE.scala 213:20]
            when _T_23 : @[AllToAllPE.scala 213:36]
              io.busy <= UInt<1>("h1") @[AllToAllPE.scala 215:13]
              io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 216:18]
              io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 217:19]
              io.resp.bits.data <= resp_value @[AllToAllPE.scala 218:23]
              io.resp.bits.write_enable <= w_en @[AllToAllPE.scala 220:31]
              when stall_resp : @[AllToAllPE.scala 222:21]
                state <= UInt<3>("h7") @[AllToAllPE.scala 223:13]
              else :
                state <= UInt<3>("h0") @[AllToAllPE.scala 225:13]
            else :
              node _T_24 = eq(state, UInt<3>("h1")) @[AllToAllPE.scala 228:20]
              when _T_24 : @[AllToAllPE.scala 228:31]
                io.busy <= UInt<1>("h1") @[AllToAllPE.scala 229:13]
                io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 230:18]
                io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 231:19]
                io.resp.bits.data <= resp_value @[AllToAllPE.scala 232:23]
                w_en <= UInt<1>("h0") @[AllToAllPE.scala 234:10]
                io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 235:31]
                io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 238:22]
                io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 239:23]
                io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 240:20]
                io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 241:24]
                state <= UInt<3>("h3") @[AllToAllPE.scala 243:11]
              else :
                node _T_25 = eq(state, UInt<3>("h2")) @[AllToAllPE.scala 245:20]
                when _T_25 : @[AllToAllPE.scala 245:41]
                  node _T_26 = or(leftBusy, rightBusy) @[AllToAllPE.scala 247:25]
                  node _T_27 = or(_T_26, upBusy) @[AllToAllPE.scala 247:38]
                  node _T_28 = or(_T_27, bottomBusy) @[AllToAllPE.scala 247:48]
                  io.busy <= _T_28 @[AllToAllPE.scala 247:13]
                  io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 248:18]
                  io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 249:19]
                  io.resp.bits.data <= resp_value @[AllToAllPE.scala 250:23]
                  io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 251:31]
                  io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 254:22]
                  io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 255:23]
                  io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 256:20]
                  io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 257:24]
                  when io.end_AllToAll : @[AllToAllPE.scala 259:27]
                    state <= UInt<3>("h3") @[AllToAllPE.scala 260:13]
                  else :
                    state <= UInt<3>("h2") @[AllToAllPE.scala 262:13]
                else :
                  node _T_29 = eq(state, UInt<3>("h3")) @[AllToAllPE.scala 265:20]
                  when _T_29 : @[AllToAllPE.scala 265:36]
                    io.busy <= UInt<1>("h0") @[AllToAllPE.scala 266:13]
                    io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 267:18]
                    io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 268:19]
                    io.resp.bits.data <= UInt<1>("h0") @[AllToAllPE.scala 269:23]
                    io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 270:31]
                    state <= UInt<3>("h0") @[AllToAllPE.scala 272:11]
                  else :
                    io.busy <= UInt<1>("h0") @[AllToAllPE.scala 276:13]
                    io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 277:18]
                    io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 278:19]
                    io.resp.bits.data <= UInt<64>("haaaaaaaa") @[AllToAllPE.scala 279:23]
                    io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 280:31]
    reg stateAction : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AllToAllPE.scala 289:28]
    node _T_30 = eq(stateAction, UInt<3>("h0")) @[AllToAllPE.scala 293:20]
    when _T_30 : @[AllToAllPE.scala 293:29]
      io.left.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 295:22]
      io.right.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 296:23]
      io.up.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 297:20]
      io.bottom.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 298:24]
      when start_AllToAll : @[AllToAllPE.scala 300:25]
        stateAction <= UInt<3>("h1") @[AllToAllPE.scala 301:19]
      else :
        stateAction <= UInt<3>("h0") @[AllToAllPE.scala 303:19]
    else :
      node _T_31 = eq(stateAction, UInt<3>("h1")) @[AllToAllPE.scala 305:26]
      when _T_31 : @[AllToAllPE.scala 305:37]
        io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 307:22]
        io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 308:23]
        io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 309:20]
        io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 310:24]
        when io.end_AllToAll : @[AllToAllPE.scala 313:26]
          stateAction <= UInt<3>("h0") @[AllToAllPE.scala 314:19]
        else :
          stateAction <= UInt<3>("h1") @[AllToAllPE.scala 316:19]
      else :
        skip
    io.left.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 324:25]
    io.left.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 325:24]
    io.left.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 326:24]
    io.left.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 327:27]
    io.left.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 328:27]
    io.left.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 329:21]
    io.left.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 330:20]
    io.right.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 332:26]
    io.right.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 333:25]
    io.right.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 334:25]
    io.right.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 335:28]
    io.right.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 336:28]
    io.right.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 337:22]
    io.right.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 338:21]
    io.up.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 340:23]
    io.up.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 341:22]
    io.up.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 342:22]
    io.up.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 343:25]
    io.up.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 344:25]
    io.up.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 345:19]
    io.up.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 346:18]
    io.bottom.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 348:27]
    io.bottom.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 349:26]
    io.bottom.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 350:26]
    io.bottom.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 351:29]
    io.bottom.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 352:29]
    io.bottom.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 353:23]
    io.bottom.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 354:22]
    inst left_in of Queue_16 @[Decoupled.scala 296:21]
    left_in.clock <= clock
    left_in.reset <= reset
    left_in.io.enq.valid <= io.left.in.valid @[Decoupled.scala 297:22]
    left_in.io.enq.bits.y_dest <= io.left.in.bits.y_dest @[Decoupled.scala 298:21]
    left_in.io.enq.bits.x_dest <= io.left.in.bits.x_dest @[Decoupled.scala 298:21]
    left_in.io.enq.bits.y_0 <= io.left.in.bits.y_0 @[Decoupled.scala 298:21]
    left_in.io.enq.bits.x_0 <= io.left.in.bits.x_0 @[Decoupled.scala 298:21]
    left_in.io.enq.bits.data <= io.left.in.bits.data @[Decoupled.scala 298:21]
    io.left.in.ready <= left_in.io.enq.ready @[Decoupled.scala 299:17]
    inst right_in of Queue_17 @[Decoupled.scala 296:21]
    right_in.clock <= clock
    right_in.reset <= reset
    right_in.io.enq.valid <= io.right.in.valid @[Decoupled.scala 297:22]
    right_in.io.enq.bits.y_dest <= io.right.in.bits.y_dest @[Decoupled.scala 298:21]
    right_in.io.enq.bits.x_dest <= io.right.in.bits.x_dest @[Decoupled.scala 298:21]
    right_in.io.enq.bits.y_0 <= io.right.in.bits.y_0 @[Decoupled.scala 298:21]
    right_in.io.enq.bits.x_0 <= io.right.in.bits.x_0 @[Decoupled.scala 298:21]
    right_in.io.enq.bits.data <= io.right.in.bits.data @[Decoupled.scala 298:21]
    io.right.in.ready <= right_in.io.enq.ready @[Decoupled.scala 299:17]
    inst up_in of Queue_18 @[Decoupled.scala 296:21]
    up_in.clock <= clock
    up_in.reset <= reset
    up_in.io.enq.valid <= io.up.in.valid @[Decoupled.scala 297:22]
    up_in.io.enq.bits.y_dest <= io.up.in.bits.y_dest @[Decoupled.scala 298:21]
    up_in.io.enq.bits.x_dest <= io.up.in.bits.x_dest @[Decoupled.scala 298:21]
    up_in.io.enq.bits.y_0 <= io.up.in.bits.y_0 @[Decoupled.scala 298:21]
    up_in.io.enq.bits.x_0 <= io.up.in.bits.x_0 @[Decoupled.scala 298:21]
    up_in.io.enq.bits.data <= io.up.in.bits.data @[Decoupled.scala 298:21]
    io.up.in.ready <= up_in.io.enq.ready @[Decoupled.scala 299:17]
    inst bottom_in of Queue_19 @[Decoupled.scala 296:21]
    bottom_in.clock <= clock
    bottom_in.reset <= reset
    bottom_in.io.enq.valid <= io.bottom.in.valid @[Decoupled.scala 297:22]
    bottom_in.io.enq.bits.y_dest <= io.bottom.in.bits.y_dest @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.x_dest <= io.bottom.in.bits.x_dest @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.y_0 <= io.bottom.in.bits.y_0 @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.x_0 <= io.bottom.in.bits.x_0 @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.data <= io.bottom.in.bits.data @[Decoupled.scala 298:21]
    io.bottom.in.ready <= bottom_in.io.enq.ready @[Decoupled.scala 299:17]
    left_in.io.deq.ready <= io.left.in.ready @[AllToAllPE.scala 373:17]
    right_in.io.deq.ready <= io.right.in.ready @[AllToAllPE.scala 374:18]
    up_in.io.deq.ready <= io.up.in.ready @[AllToAllPE.scala 375:15]
    bottom_in.io.deq.ready <= io.bottom.in.ready @[AllToAllPE.scala 376:19]

  module Queue_20 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_21 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_22 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_23 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module AllToAllPEright :
    input clock : Clock
    input reset : Reset
    output io : { busy : UInt<1>, flip end_AllToAll : UInt<1>, flip cmd : { flip ready : UInt<1>, valid : UInt<1>, bits : { load : UInt<1>, store : UInt<1>, doAllToAll : UInt<1>, rs1 : UInt<64>, rs2 : UInt<64>}}, resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, write_enable : UInt<1>}}, left : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, right : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, up : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, bottom : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}}

    cmem memPE : UInt<64> [32] @[AllToAllPE.scala 72:18]
    reg x_coord : UInt<2>, clock with :
      reset => (reset, UInt<2>("h2")) @[AllToAllPE.scala 75:24]
    reg y_coord : UInt<2>, clock with :
      reset => (reset, UInt<1>("h1")) @[AllToAllPE.scala 76:24]
    reg rs1 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), rs1) @[AllToAllPE.scala 79:16]
    reg rs2 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), rs2) @[AllToAllPE.scala 80:16]
    rs1 <= io.cmd.bits.rs1 @[AllToAllPE.scala 86:7]
    rs2 <= io.cmd.bits.rs2 @[AllToAllPE.scala 87:7]
    reg w_en : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 91:21]
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AllToAllPE.scala 96:22]
    reg resp_value : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 97:27]
    node x_value = bits(rs2, 15, 0) @[AllToAllPE.scala 99:20]
    node y_value = bits(rs2, 31, 16) @[AllToAllPE.scala 100:20]
    node memIndex = bits(rs2, 63, 32) @[AllToAllPE.scala 101:21]
    node _T = eq(x_value, x_coord) @[AllToAllPE.scala 109:29]
    node _T_1 = eq(y_value, y_coord) @[AllToAllPE.scala 109:54]
    node is_this_PE = and(_T, _T_1) @[AllToAllPE.scala 109:42]
    node load_signal = and(io.cmd.valid, io.cmd.bits.load) @[AllToAllPE.scala 110:34]
    node store_signal = and(io.cmd.valid, io.cmd.bits.store) @[AllToAllPE.scala 111:35]
    node allToAll_signal = and(io.cmd.valid, io.cmd.bits.doAllToAll) @[AllToAllPE.scala 112:38]
    node _T_2 = eq(io.resp.ready, UInt<1>("h0")) @[AllToAllPE.scala 114:20]
    node stall_resp = and(_T_2, io.resp.valid) @[AllToAllPE.scala 114:35]
    node start_AllToAll = eq(state, UInt<3>("h1")) @[AllToAllPE.scala 115:30]
    wire leftBusy : UInt<1> @[AllToAllPE.scala 117:22]
    wire rightBusy : UInt<1> @[AllToAllPE.scala 118:23]
    wire upBusy : UInt<1> @[AllToAllPE.scala 119:20]
    wire bottomBusy : UInt<1> @[AllToAllPE.scala 120:24]
    leftBusy <= UInt<1>("h0") @[AllToAllPE.scala 122:12]
    rightBusy <= UInt<1>("h0") @[AllToAllPE.scala 123:13]
    rightBusy <= UInt<1>("h0") @[AllToAllPE.scala 124:13]
    upBusy <= UInt<1>("h0") @[AllToAllPE.scala 125:10]
    bottomBusy <= UInt<1>("h0") @[AllToAllPE.scala 126:14]
    node _T_3 = eq(state, UInt<3>("h0")) @[AllToAllPE.scala 128:14]
    when _T_3 : @[AllToAllPE.scala 128:23]
      io.busy <= UInt<1>("h0") @[AllToAllPE.scala 129:13]
      io.cmd.ready <= UInt<1>("h1") @[AllToAllPE.scala 130:18]
      io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 131:19]
      io.resp.bits.data <= UInt<1>("h0") @[AllToAllPE.scala 132:23]
      io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 134:31]
      w_en <= UInt<1>("h0") @[AllToAllPE.scala 135:10]
      when load_signal : @[AllToAllPE.scala 137:22]
        state <= UInt<3>("h4") @[AllToAllPE.scala 138:13]
      else :
        when store_signal : @[AllToAllPE.scala 139:29]
          state <= UInt<3>("h5") @[AllToAllPE.scala 140:13]
        else :
          when allToAll_signal : @[AllToAllPE.scala 141:32]
            state <= UInt<3>("h1") @[AllToAllPE.scala 142:13]
          else :
            state <= UInt<3>("h0") @[AllToAllPE.scala 144:13]
    else :
      node _T_4 = eq(state, UInt<3>("h4")) @[AllToAllPE.scala 147:20]
      when _T_4 : @[AllToAllPE.scala 147:32]
        io.busy <= stall_resp @[AllToAllPE.scala 148:13]
        node _T_5 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 149:21]
        io.cmd.ready <= _T_5 @[AllToAllPE.scala 149:18]
        io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 150:19]
        io.resp.bits.data <= UInt<6>("h20") @[AllToAllPE.scala 151:23]
        resp_value <= UInt<6>("h20") @[AllToAllPE.scala 152:16]
        when is_this_PE : @[AllToAllPE.scala 154:21]
          node _T_6 = bits(memIndex, 4, 0) @[AllToAllPE.scala 155:12]
          infer mport MPORT = memPE[_T_6], clock @[AllToAllPE.scala 155:12]
          MPORT <= rs1 @[AllToAllPE.scala 155:23]
          io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 156:33]
          w_en <= UInt<1>("h1") @[AllToAllPE.scala 157:12]
        else :
          io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 159:33]
          w_en <= UInt<1>("h0") @[AllToAllPE.scala 160:12]
        node _T_7 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 163:25]
        node _T_8 = and(load_signal, _T_7) @[AllToAllPE.scala 163:22]
        when _T_8 : @[AllToAllPE.scala 163:37]
          state <= UInt<3>("h4") @[AllToAllPE.scala 164:13]
        else :
          node _T_9 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 165:32]
          node _T_10 = and(store_signal, _T_9) @[AllToAllPE.scala 165:29]
          when _T_10 : @[AllToAllPE.scala 165:44]
            state <= UInt<3>("h5") @[AllToAllPE.scala 166:13]
          else :
            node _T_11 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 167:35]
            node _T_12 = and(allToAll_signal, _T_11) @[AllToAllPE.scala 167:32]
            when _T_12 : @[AllToAllPE.scala 167:47]
              state <= UInt<3>("h1") @[AllToAllPE.scala 168:13]
            else :
              when stall_resp : @[AllToAllPE.scala 169:27]
                state <= UInt<3>("h7") @[AllToAllPE.scala 170:13]
              else :
                state <= UInt<3>("h0") @[AllToAllPE.scala 172:13]
      else :
        node _T_13 = eq(state, UInt<3>("h5")) @[AllToAllPE.scala 175:20]
        when _T_13 : @[AllToAllPE.scala 175:33]
          io.busy <= UInt<1>("h1") @[AllToAllPE.scala 177:13]
          io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 178:18]
          io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 179:19]
          io.resp.bits.data <= UInt<6>("h21") @[AllToAllPE.scala 180:23]
          when is_this_PE : @[AllToAllPE.scala 182:21]
            node _T_14 = bits(memIndex, 4, 0) @[AllToAllPE.scala 183:26]
            infer mport MPORT_1 = memPE[_T_14], clock @[AllToAllPE.scala 183:26]
            resp_value <= MPORT_1 @[AllToAllPE.scala 183:18]
            w_en <= UInt<1>("h1") @[AllToAllPE.scala 184:12]
          else :
            w_en <= UInt<1>("h0") @[AllToAllPE.scala 186:12]
          io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 189:31]
          state <= UInt<3>("h6") @[AllToAllPE.scala 191:11]
        else :
          node _T_15 = eq(state, UInt<3>("h6")) @[AllToAllPE.scala 193:20]
          when _T_15 : @[AllToAllPE.scala 193:35]
            io.busy <= stall_resp @[AllToAllPE.scala 195:13]
            node _T_16 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 196:21]
            io.cmd.ready <= _T_16 @[AllToAllPE.scala 196:18]
            io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 197:19]
            io.resp.bits.data <= resp_value @[AllToAllPE.scala 198:23]
            io.resp.bits.write_enable <= w_en @[AllToAllPE.scala 199:31]
            node _T_17 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 201:25]
            node _T_18 = and(load_signal, _T_17) @[AllToAllPE.scala 201:22]
            when _T_18 : @[AllToAllPE.scala 201:37]
              state <= UInt<3>("h4") @[AllToAllPE.scala 202:13]
            else :
              node _T_19 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 203:32]
              node _T_20 = and(store_signal, _T_19) @[AllToAllPE.scala 203:29]
              when _T_20 : @[AllToAllPE.scala 203:44]
                state <= UInt<3>("h5") @[AllToAllPE.scala 204:13]
              else :
                node _T_21 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 205:35]
                node _T_22 = and(allToAll_signal, _T_21) @[AllToAllPE.scala 205:32]
                when _T_22 : @[AllToAllPE.scala 205:47]
                  state <= UInt<3>("h1") @[AllToAllPE.scala 206:13]
                else :
                  when stall_resp : @[AllToAllPE.scala 207:27]
                    state <= UInt<3>("h7") @[AllToAllPE.scala 208:13]
                  else :
                    state <= UInt<3>("h0") @[AllToAllPE.scala 210:13]
          else :
            node _T_23 = eq(state, UInt<3>("h7")) @[AllToAllPE.scala 213:20]
            when _T_23 : @[AllToAllPE.scala 213:36]
              io.busy <= UInt<1>("h1") @[AllToAllPE.scala 215:13]
              io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 216:18]
              io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 217:19]
              io.resp.bits.data <= resp_value @[AllToAllPE.scala 218:23]
              io.resp.bits.write_enable <= w_en @[AllToAllPE.scala 220:31]
              when stall_resp : @[AllToAllPE.scala 222:21]
                state <= UInt<3>("h7") @[AllToAllPE.scala 223:13]
              else :
                state <= UInt<3>("h0") @[AllToAllPE.scala 225:13]
            else :
              node _T_24 = eq(state, UInt<3>("h1")) @[AllToAllPE.scala 228:20]
              when _T_24 : @[AllToAllPE.scala 228:31]
                io.busy <= UInt<1>("h1") @[AllToAllPE.scala 229:13]
                io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 230:18]
                io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 231:19]
                io.resp.bits.data <= resp_value @[AllToAllPE.scala 232:23]
                w_en <= UInt<1>("h0") @[AllToAllPE.scala 234:10]
                io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 235:31]
                io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 238:22]
                io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 239:23]
                io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 240:20]
                io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 241:24]
                state <= UInt<3>("h3") @[AllToAllPE.scala 243:11]
              else :
                node _T_25 = eq(state, UInt<3>("h2")) @[AllToAllPE.scala 245:20]
                when _T_25 : @[AllToAllPE.scala 245:41]
                  node _T_26 = or(leftBusy, rightBusy) @[AllToAllPE.scala 247:25]
                  node _T_27 = or(_T_26, upBusy) @[AllToAllPE.scala 247:38]
                  node _T_28 = or(_T_27, bottomBusy) @[AllToAllPE.scala 247:48]
                  io.busy <= _T_28 @[AllToAllPE.scala 247:13]
                  io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 248:18]
                  io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 249:19]
                  io.resp.bits.data <= resp_value @[AllToAllPE.scala 250:23]
                  io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 251:31]
                  io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 254:22]
                  io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 255:23]
                  io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 256:20]
                  io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 257:24]
                  when io.end_AllToAll : @[AllToAllPE.scala 259:27]
                    state <= UInt<3>("h3") @[AllToAllPE.scala 260:13]
                  else :
                    state <= UInt<3>("h2") @[AllToAllPE.scala 262:13]
                else :
                  node _T_29 = eq(state, UInt<3>("h3")) @[AllToAllPE.scala 265:20]
                  when _T_29 : @[AllToAllPE.scala 265:36]
                    io.busy <= UInt<1>("h0") @[AllToAllPE.scala 266:13]
                    io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 267:18]
                    io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 268:19]
                    io.resp.bits.data <= UInt<1>("h0") @[AllToAllPE.scala 269:23]
                    io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 270:31]
                    state <= UInt<3>("h0") @[AllToAllPE.scala 272:11]
                  else :
                    io.busy <= UInt<1>("h0") @[AllToAllPE.scala 276:13]
                    io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 277:18]
                    io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 278:19]
                    io.resp.bits.data <= UInt<64>("haaaaaaaa") @[AllToAllPE.scala 279:23]
                    io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 280:31]
    reg stateAction : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AllToAllPE.scala 289:28]
    node _T_30 = eq(stateAction, UInt<3>("h0")) @[AllToAllPE.scala 293:20]
    when _T_30 : @[AllToAllPE.scala 293:29]
      io.left.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 295:22]
      io.right.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 296:23]
      io.up.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 297:20]
      io.bottom.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 298:24]
      when start_AllToAll : @[AllToAllPE.scala 300:25]
        stateAction <= UInt<3>("h1") @[AllToAllPE.scala 301:19]
      else :
        stateAction <= UInt<3>("h0") @[AllToAllPE.scala 303:19]
    else :
      node _T_31 = eq(stateAction, UInt<3>("h1")) @[AllToAllPE.scala 305:26]
      when _T_31 : @[AllToAllPE.scala 305:37]
        io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 307:22]
        io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 308:23]
        io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 309:20]
        io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 310:24]
        when io.end_AllToAll : @[AllToAllPE.scala 313:26]
          stateAction <= UInt<3>("h0") @[AllToAllPE.scala 314:19]
        else :
          stateAction <= UInt<3>("h1") @[AllToAllPE.scala 316:19]
      else :
        skip
    io.left.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 324:25]
    io.left.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 325:24]
    io.left.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 326:24]
    io.left.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 327:27]
    io.left.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 328:27]
    io.left.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 329:21]
    io.left.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 330:20]
    io.right.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 332:26]
    io.right.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 333:25]
    io.right.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 334:25]
    io.right.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 335:28]
    io.right.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 336:28]
    io.right.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 337:22]
    io.right.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 338:21]
    io.up.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 340:23]
    io.up.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 341:22]
    io.up.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 342:22]
    io.up.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 343:25]
    io.up.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 344:25]
    io.up.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 345:19]
    io.up.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 346:18]
    io.bottom.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 348:27]
    io.bottom.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 349:26]
    io.bottom.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 350:26]
    io.bottom.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 351:29]
    io.bottom.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 352:29]
    io.bottom.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 353:23]
    io.bottom.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 354:22]
    inst left_in of Queue_20 @[Decoupled.scala 296:21]
    left_in.clock <= clock
    left_in.reset <= reset
    left_in.io.enq.valid <= io.left.in.valid @[Decoupled.scala 297:22]
    left_in.io.enq.bits.y_dest <= io.left.in.bits.y_dest @[Decoupled.scala 298:21]
    left_in.io.enq.bits.x_dest <= io.left.in.bits.x_dest @[Decoupled.scala 298:21]
    left_in.io.enq.bits.y_0 <= io.left.in.bits.y_0 @[Decoupled.scala 298:21]
    left_in.io.enq.bits.x_0 <= io.left.in.bits.x_0 @[Decoupled.scala 298:21]
    left_in.io.enq.bits.data <= io.left.in.bits.data @[Decoupled.scala 298:21]
    io.left.in.ready <= left_in.io.enq.ready @[Decoupled.scala 299:17]
    inst right_in of Queue_21 @[Decoupled.scala 296:21]
    right_in.clock <= clock
    right_in.reset <= reset
    right_in.io.enq.valid <= io.right.in.valid @[Decoupled.scala 297:22]
    right_in.io.enq.bits.y_dest <= io.right.in.bits.y_dest @[Decoupled.scala 298:21]
    right_in.io.enq.bits.x_dest <= io.right.in.bits.x_dest @[Decoupled.scala 298:21]
    right_in.io.enq.bits.y_0 <= io.right.in.bits.y_0 @[Decoupled.scala 298:21]
    right_in.io.enq.bits.x_0 <= io.right.in.bits.x_0 @[Decoupled.scala 298:21]
    right_in.io.enq.bits.data <= io.right.in.bits.data @[Decoupled.scala 298:21]
    io.right.in.ready <= right_in.io.enq.ready @[Decoupled.scala 299:17]
    inst up_in of Queue_22 @[Decoupled.scala 296:21]
    up_in.clock <= clock
    up_in.reset <= reset
    up_in.io.enq.valid <= io.up.in.valid @[Decoupled.scala 297:22]
    up_in.io.enq.bits.y_dest <= io.up.in.bits.y_dest @[Decoupled.scala 298:21]
    up_in.io.enq.bits.x_dest <= io.up.in.bits.x_dest @[Decoupled.scala 298:21]
    up_in.io.enq.bits.y_0 <= io.up.in.bits.y_0 @[Decoupled.scala 298:21]
    up_in.io.enq.bits.x_0 <= io.up.in.bits.x_0 @[Decoupled.scala 298:21]
    up_in.io.enq.bits.data <= io.up.in.bits.data @[Decoupled.scala 298:21]
    io.up.in.ready <= up_in.io.enq.ready @[Decoupled.scala 299:17]
    inst bottom_in of Queue_23 @[Decoupled.scala 296:21]
    bottom_in.clock <= clock
    bottom_in.reset <= reset
    bottom_in.io.enq.valid <= io.bottom.in.valid @[Decoupled.scala 297:22]
    bottom_in.io.enq.bits.y_dest <= io.bottom.in.bits.y_dest @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.x_dest <= io.bottom.in.bits.x_dest @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.y_0 <= io.bottom.in.bits.y_0 @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.x_0 <= io.bottom.in.bits.x_0 @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.data <= io.bottom.in.bits.data @[Decoupled.scala 298:21]
    io.bottom.in.ready <= bottom_in.io.enq.ready @[Decoupled.scala 299:17]
    left_in.io.deq.ready <= io.left.in.ready @[AllToAllPE.scala 373:17]
    right_in.io.deq.ready <= io.right.in.ready @[AllToAllPE.scala 374:18]
    up_in.io.deq.ready <= io.up.in.ready @[AllToAllPE.scala 375:15]
    bottom_in.io.deq.ready <= io.bottom.in.ready @[AllToAllPE.scala 376:19]

  module Queue_24 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_25 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_26 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_27 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module AllToAllPEbottomLeftCorner :
    input clock : Clock
    input reset : Reset
    output io : { busy : UInt<1>, flip end_AllToAll : UInt<1>, flip cmd : { flip ready : UInt<1>, valid : UInt<1>, bits : { load : UInt<1>, store : UInt<1>, doAllToAll : UInt<1>, rs1 : UInt<64>, rs2 : UInt<64>}}, resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, write_enable : UInt<1>}}, left : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, right : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, up : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, bottom : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}}

    cmem memPE : UInt<64> [32] @[AllToAllPE.scala 72:18]
    reg x_coord : UInt<2>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 75:24]
    reg y_coord : UInt<2>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 76:24]
    reg rs1 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), rs1) @[AllToAllPE.scala 79:16]
    reg rs2 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), rs2) @[AllToAllPE.scala 80:16]
    rs1 <= io.cmd.bits.rs1 @[AllToAllPE.scala 86:7]
    rs2 <= io.cmd.bits.rs2 @[AllToAllPE.scala 87:7]
    reg w_en : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 91:21]
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AllToAllPE.scala 96:22]
    reg resp_value : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 97:27]
    node x_value = bits(rs2, 15, 0) @[AllToAllPE.scala 99:20]
    node y_value = bits(rs2, 31, 16) @[AllToAllPE.scala 100:20]
    node memIndex = bits(rs2, 63, 32) @[AllToAllPE.scala 101:21]
    node _T = eq(x_value, x_coord) @[AllToAllPE.scala 109:29]
    node _T_1 = eq(y_value, y_coord) @[AllToAllPE.scala 109:54]
    node is_this_PE = and(_T, _T_1) @[AllToAllPE.scala 109:42]
    node load_signal = and(io.cmd.valid, io.cmd.bits.load) @[AllToAllPE.scala 110:34]
    node store_signal = and(io.cmd.valid, io.cmd.bits.store) @[AllToAllPE.scala 111:35]
    node allToAll_signal = and(io.cmd.valid, io.cmd.bits.doAllToAll) @[AllToAllPE.scala 112:38]
    node _T_2 = eq(io.resp.ready, UInt<1>("h0")) @[AllToAllPE.scala 114:20]
    node stall_resp = and(_T_2, io.resp.valid) @[AllToAllPE.scala 114:35]
    node start_AllToAll = eq(state, UInt<3>("h1")) @[AllToAllPE.scala 115:30]
    wire leftBusy : UInt<1> @[AllToAllPE.scala 117:22]
    wire rightBusy : UInt<1> @[AllToAllPE.scala 118:23]
    wire upBusy : UInt<1> @[AllToAllPE.scala 119:20]
    wire bottomBusy : UInt<1> @[AllToAllPE.scala 120:24]
    leftBusy <= UInt<1>("h0") @[AllToAllPE.scala 122:12]
    rightBusy <= UInt<1>("h0") @[AllToAllPE.scala 123:13]
    rightBusy <= UInt<1>("h0") @[AllToAllPE.scala 124:13]
    upBusy <= UInt<1>("h0") @[AllToAllPE.scala 125:10]
    bottomBusy <= UInt<1>("h0") @[AllToAllPE.scala 126:14]
    node _T_3 = eq(state, UInt<3>("h0")) @[AllToAllPE.scala 128:14]
    when _T_3 : @[AllToAllPE.scala 128:23]
      io.busy <= UInt<1>("h0") @[AllToAllPE.scala 129:13]
      io.cmd.ready <= UInt<1>("h1") @[AllToAllPE.scala 130:18]
      io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 131:19]
      io.resp.bits.data <= UInt<1>("h0") @[AllToAllPE.scala 132:23]
      io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 134:31]
      w_en <= UInt<1>("h0") @[AllToAllPE.scala 135:10]
      when load_signal : @[AllToAllPE.scala 137:22]
        state <= UInt<3>("h4") @[AllToAllPE.scala 138:13]
      else :
        when store_signal : @[AllToAllPE.scala 139:29]
          state <= UInt<3>("h5") @[AllToAllPE.scala 140:13]
        else :
          when allToAll_signal : @[AllToAllPE.scala 141:32]
            state <= UInt<3>("h1") @[AllToAllPE.scala 142:13]
          else :
            state <= UInt<3>("h0") @[AllToAllPE.scala 144:13]
    else :
      node _T_4 = eq(state, UInt<3>("h4")) @[AllToAllPE.scala 147:20]
      when _T_4 : @[AllToAllPE.scala 147:32]
        io.busy <= stall_resp @[AllToAllPE.scala 148:13]
        node _T_5 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 149:21]
        io.cmd.ready <= _T_5 @[AllToAllPE.scala 149:18]
        io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 150:19]
        io.resp.bits.data <= UInt<6>("h20") @[AllToAllPE.scala 151:23]
        resp_value <= UInt<6>("h20") @[AllToAllPE.scala 152:16]
        when is_this_PE : @[AllToAllPE.scala 154:21]
          node _T_6 = bits(memIndex, 4, 0) @[AllToAllPE.scala 155:12]
          infer mport MPORT = memPE[_T_6], clock @[AllToAllPE.scala 155:12]
          MPORT <= rs1 @[AllToAllPE.scala 155:23]
          io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 156:33]
          w_en <= UInt<1>("h1") @[AllToAllPE.scala 157:12]
        else :
          io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 159:33]
          w_en <= UInt<1>("h0") @[AllToAllPE.scala 160:12]
        node _T_7 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 163:25]
        node _T_8 = and(load_signal, _T_7) @[AllToAllPE.scala 163:22]
        when _T_8 : @[AllToAllPE.scala 163:37]
          state <= UInt<3>("h4") @[AllToAllPE.scala 164:13]
        else :
          node _T_9 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 165:32]
          node _T_10 = and(store_signal, _T_9) @[AllToAllPE.scala 165:29]
          when _T_10 : @[AllToAllPE.scala 165:44]
            state <= UInt<3>("h5") @[AllToAllPE.scala 166:13]
          else :
            node _T_11 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 167:35]
            node _T_12 = and(allToAll_signal, _T_11) @[AllToAllPE.scala 167:32]
            when _T_12 : @[AllToAllPE.scala 167:47]
              state <= UInt<3>("h1") @[AllToAllPE.scala 168:13]
            else :
              when stall_resp : @[AllToAllPE.scala 169:27]
                state <= UInt<3>("h7") @[AllToAllPE.scala 170:13]
              else :
                state <= UInt<3>("h0") @[AllToAllPE.scala 172:13]
      else :
        node _T_13 = eq(state, UInt<3>("h5")) @[AllToAllPE.scala 175:20]
        when _T_13 : @[AllToAllPE.scala 175:33]
          io.busy <= UInt<1>("h1") @[AllToAllPE.scala 177:13]
          io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 178:18]
          io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 179:19]
          io.resp.bits.data <= UInt<6>("h21") @[AllToAllPE.scala 180:23]
          when is_this_PE : @[AllToAllPE.scala 182:21]
            node _T_14 = bits(memIndex, 4, 0) @[AllToAllPE.scala 183:26]
            infer mport MPORT_1 = memPE[_T_14], clock @[AllToAllPE.scala 183:26]
            resp_value <= MPORT_1 @[AllToAllPE.scala 183:18]
            w_en <= UInt<1>("h1") @[AllToAllPE.scala 184:12]
          else :
            w_en <= UInt<1>("h0") @[AllToAllPE.scala 186:12]
          io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 189:31]
          state <= UInt<3>("h6") @[AllToAllPE.scala 191:11]
        else :
          node _T_15 = eq(state, UInt<3>("h6")) @[AllToAllPE.scala 193:20]
          when _T_15 : @[AllToAllPE.scala 193:35]
            io.busy <= stall_resp @[AllToAllPE.scala 195:13]
            node _T_16 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 196:21]
            io.cmd.ready <= _T_16 @[AllToAllPE.scala 196:18]
            io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 197:19]
            io.resp.bits.data <= resp_value @[AllToAllPE.scala 198:23]
            io.resp.bits.write_enable <= w_en @[AllToAllPE.scala 199:31]
            node _T_17 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 201:25]
            node _T_18 = and(load_signal, _T_17) @[AllToAllPE.scala 201:22]
            when _T_18 : @[AllToAllPE.scala 201:37]
              state <= UInt<3>("h4") @[AllToAllPE.scala 202:13]
            else :
              node _T_19 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 203:32]
              node _T_20 = and(store_signal, _T_19) @[AllToAllPE.scala 203:29]
              when _T_20 : @[AllToAllPE.scala 203:44]
                state <= UInt<3>("h5") @[AllToAllPE.scala 204:13]
              else :
                node _T_21 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 205:35]
                node _T_22 = and(allToAll_signal, _T_21) @[AllToAllPE.scala 205:32]
                when _T_22 : @[AllToAllPE.scala 205:47]
                  state <= UInt<3>("h1") @[AllToAllPE.scala 206:13]
                else :
                  when stall_resp : @[AllToAllPE.scala 207:27]
                    state <= UInt<3>("h7") @[AllToAllPE.scala 208:13]
                  else :
                    state <= UInt<3>("h0") @[AllToAllPE.scala 210:13]
          else :
            node _T_23 = eq(state, UInt<3>("h7")) @[AllToAllPE.scala 213:20]
            when _T_23 : @[AllToAllPE.scala 213:36]
              io.busy <= UInt<1>("h1") @[AllToAllPE.scala 215:13]
              io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 216:18]
              io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 217:19]
              io.resp.bits.data <= resp_value @[AllToAllPE.scala 218:23]
              io.resp.bits.write_enable <= w_en @[AllToAllPE.scala 220:31]
              when stall_resp : @[AllToAllPE.scala 222:21]
                state <= UInt<3>("h7") @[AllToAllPE.scala 223:13]
              else :
                state <= UInt<3>("h0") @[AllToAllPE.scala 225:13]
            else :
              node _T_24 = eq(state, UInt<3>("h1")) @[AllToAllPE.scala 228:20]
              when _T_24 : @[AllToAllPE.scala 228:31]
                io.busy <= UInt<1>("h1") @[AllToAllPE.scala 229:13]
                io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 230:18]
                io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 231:19]
                io.resp.bits.data <= resp_value @[AllToAllPE.scala 232:23]
                w_en <= UInt<1>("h0") @[AllToAllPE.scala 234:10]
                io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 235:31]
                io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 238:22]
                io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 239:23]
                io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 240:20]
                io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 241:24]
                state <= UInt<3>("h3") @[AllToAllPE.scala 243:11]
              else :
                node _T_25 = eq(state, UInt<3>("h2")) @[AllToAllPE.scala 245:20]
                when _T_25 : @[AllToAllPE.scala 245:41]
                  node _T_26 = or(leftBusy, rightBusy) @[AllToAllPE.scala 247:25]
                  node _T_27 = or(_T_26, upBusy) @[AllToAllPE.scala 247:38]
                  node _T_28 = or(_T_27, bottomBusy) @[AllToAllPE.scala 247:48]
                  io.busy <= _T_28 @[AllToAllPE.scala 247:13]
                  io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 248:18]
                  io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 249:19]
                  io.resp.bits.data <= resp_value @[AllToAllPE.scala 250:23]
                  io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 251:31]
                  io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 254:22]
                  io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 255:23]
                  io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 256:20]
                  io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 257:24]
                  when io.end_AllToAll : @[AllToAllPE.scala 259:27]
                    state <= UInt<3>("h3") @[AllToAllPE.scala 260:13]
                  else :
                    state <= UInt<3>("h2") @[AllToAllPE.scala 262:13]
                else :
                  node _T_29 = eq(state, UInt<3>("h3")) @[AllToAllPE.scala 265:20]
                  when _T_29 : @[AllToAllPE.scala 265:36]
                    io.busy <= UInt<1>("h0") @[AllToAllPE.scala 266:13]
                    io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 267:18]
                    io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 268:19]
                    io.resp.bits.data <= UInt<1>("h0") @[AllToAllPE.scala 269:23]
                    io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 270:31]
                    state <= UInt<3>("h0") @[AllToAllPE.scala 272:11]
                  else :
                    io.busy <= UInt<1>("h0") @[AllToAllPE.scala 276:13]
                    io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 277:18]
                    io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 278:19]
                    io.resp.bits.data <= UInt<64>("haaaaaaaa") @[AllToAllPE.scala 279:23]
                    io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 280:31]
    reg stateAction : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AllToAllPE.scala 289:28]
    node _T_30 = eq(stateAction, UInt<3>("h0")) @[AllToAllPE.scala 293:20]
    when _T_30 : @[AllToAllPE.scala 293:29]
      io.left.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 295:22]
      io.right.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 296:23]
      io.up.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 297:20]
      io.bottom.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 298:24]
      when start_AllToAll : @[AllToAllPE.scala 300:25]
        stateAction <= UInt<3>("h1") @[AllToAllPE.scala 301:19]
      else :
        stateAction <= UInt<3>("h0") @[AllToAllPE.scala 303:19]
    else :
      node _T_31 = eq(stateAction, UInt<3>("h1")) @[AllToAllPE.scala 305:26]
      when _T_31 : @[AllToAllPE.scala 305:37]
        io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 307:22]
        io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 308:23]
        io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 309:20]
        io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 310:24]
        when io.end_AllToAll : @[AllToAllPE.scala 313:26]
          stateAction <= UInt<3>("h0") @[AllToAllPE.scala 314:19]
        else :
          stateAction <= UInt<3>("h1") @[AllToAllPE.scala 316:19]
      else :
        skip
    io.left.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 324:25]
    io.left.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 325:24]
    io.left.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 326:24]
    io.left.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 327:27]
    io.left.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 328:27]
    io.left.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 329:21]
    io.left.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 330:20]
    io.right.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 332:26]
    io.right.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 333:25]
    io.right.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 334:25]
    io.right.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 335:28]
    io.right.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 336:28]
    io.right.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 337:22]
    io.right.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 338:21]
    io.up.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 340:23]
    io.up.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 341:22]
    io.up.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 342:22]
    io.up.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 343:25]
    io.up.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 344:25]
    io.up.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 345:19]
    io.up.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 346:18]
    io.bottom.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 348:27]
    io.bottom.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 349:26]
    io.bottom.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 350:26]
    io.bottom.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 351:29]
    io.bottom.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 352:29]
    io.bottom.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 353:23]
    io.bottom.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 354:22]
    inst left_in of Queue_24 @[Decoupled.scala 296:21]
    left_in.clock <= clock
    left_in.reset <= reset
    left_in.io.enq.valid <= io.left.in.valid @[Decoupled.scala 297:22]
    left_in.io.enq.bits.y_dest <= io.left.in.bits.y_dest @[Decoupled.scala 298:21]
    left_in.io.enq.bits.x_dest <= io.left.in.bits.x_dest @[Decoupled.scala 298:21]
    left_in.io.enq.bits.y_0 <= io.left.in.bits.y_0 @[Decoupled.scala 298:21]
    left_in.io.enq.bits.x_0 <= io.left.in.bits.x_0 @[Decoupled.scala 298:21]
    left_in.io.enq.bits.data <= io.left.in.bits.data @[Decoupled.scala 298:21]
    io.left.in.ready <= left_in.io.enq.ready @[Decoupled.scala 299:17]
    inst right_in of Queue_25 @[Decoupled.scala 296:21]
    right_in.clock <= clock
    right_in.reset <= reset
    right_in.io.enq.valid <= io.right.in.valid @[Decoupled.scala 297:22]
    right_in.io.enq.bits.y_dest <= io.right.in.bits.y_dest @[Decoupled.scala 298:21]
    right_in.io.enq.bits.x_dest <= io.right.in.bits.x_dest @[Decoupled.scala 298:21]
    right_in.io.enq.bits.y_0 <= io.right.in.bits.y_0 @[Decoupled.scala 298:21]
    right_in.io.enq.bits.x_0 <= io.right.in.bits.x_0 @[Decoupled.scala 298:21]
    right_in.io.enq.bits.data <= io.right.in.bits.data @[Decoupled.scala 298:21]
    io.right.in.ready <= right_in.io.enq.ready @[Decoupled.scala 299:17]
    inst up_in of Queue_26 @[Decoupled.scala 296:21]
    up_in.clock <= clock
    up_in.reset <= reset
    up_in.io.enq.valid <= io.up.in.valid @[Decoupled.scala 297:22]
    up_in.io.enq.bits.y_dest <= io.up.in.bits.y_dest @[Decoupled.scala 298:21]
    up_in.io.enq.bits.x_dest <= io.up.in.bits.x_dest @[Decoupled.scala 298:21]
    up_in.io.enq.bits.y_0 <= io.up.in.bits.y_0 @[Decoupled.scala 298:21]
    up_in.io.enq.bits.x_0 <= io.up.in.bits.x_0 @[Decoupled.scala 298:21]
    up_in.io.enq.bits.data <= io.up.in.bits.data @[Decoupled.scala 298:21]
    io.up.in.ready <= up_in.io.enq.ready @[Decoupled.scala 299:17]
    inst bottom_in of Queue_27 @[Decoupled.scala 296:21]
    bottom_in.clock <= clock
    bottom_in.reset <= reset
    bottom_in.io.enq.valid <= io.bottom.in.valid @[Decoupled.scala 297:22]
    bottom_in.io.enq.bits.y_dest <= io.bottom.in.bits.y_dest @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.x_dest <= io.bottom.in.bits.x_dest @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.y_0 <= io.bottom.in.bits.y_0 @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.x_0 <= io.bottom.in.bits.x_0 @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.data <= io.bottom.in.bits.data @[Decoupled.scala 298:21]
    io.bottom.in.ready <= bottom_in.io.enq.ready @[Decoupled.scala 299:17]
    left_in.io.deq.ready <= io.left.in.ready @[AllToAllPE.scala 373:17]
    right_in.io.deq.ready <= io.right.in.ready @[AllToAllPE.scala 374:18]
    up_in.io.deq.ready <= io.up.in.ready @[AllToAllPE.scala 375:15]
    bottom_in.io.deq.ready <= io.bottom.in.ready @[AllToAllPE.scala 376:19]

  module Queue_28 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_29 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_30 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_31 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module AllToAllPEbottom :
    input clock : Clock
    input reset : Reset
    output io : { busy : UInt<1>, flip end_AllToAll : UInt<1>, flip cmd : { flip ready : UInt<1>, valid : UInt<1>, bits : { load : UInt<1>, store : UInt<1>, doAllToAll : UInt<1>, rs1 : UInt<64>, rs2 : UInt<64>}}, resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, write_enable : UInt<1>}}, left : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, right : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, up : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, bottom : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}}

    cmem memPE : UInt<64> [32] @[AllToAllPE.scala 72:18]
    reg x_coord : UInt<2>, clock with :
      reset => (reset, UInt<1>("h1")) @[AllToAllPE.scala 75:24]
    reg y_coord : UInt<2>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 76:24]
    reg rs1 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), rs1) @[AllToAllPE.scala 79:16]
    reg rs2 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), rs2) @[AllToAllPE.scala 80:16]
    rs1 <= io.cmd.bits.rs1 @[AllToAllPE.scala 86:7]
    rs2 <= io.cmd.bits.rs2 @[AllToAllPE.scala 87:7]
    reg w_en : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 91:21]
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AllToAllPE.scala 96:22]
    reg resp_value : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 97:27]
    node x_value = bits(rs2, 15, 0) @[AllToAllPE.scala 99:20]
    node y_value = bits(rs2, 31, 16) @[AllToAllPE.scala 100:20]
    node memIndex = bits(rs2, 63, 32) @[AllToAllPE.scala 101:21]
    node _T = eq(x_value, x_coord) @[AllToAllPE.scala 109:29]
    node _T_1 = eq(y_value, y_coord) @[AllToAllPE.scala 109:54]
    node is_this_PE = and(_T, _T_1) @[AllToAllPE.scala 109:42]
    node load_signal = and(io.cmd.valid, io.cmd.bits.load) @[AllToAllPE.scala 110:34]
    node store_signal = and(io.cmd.valid, io.cmd.bits.store) @[AllToAllPE.scala 111:35]
    node allToAll_signal = and(io.cmd.valid, io.cmd.bits.doAllToAll) @[AllToAllPE.scala 112:38]
    node _T_2 = eq(io.resp.ready, UInt<1>("h0")) @[AllToAllPE.scala 114:20]
    node stall_resp = and(_T_2, io.resp.valid) @[AllToAllPE.scala 114:35]
    node start_AllToAll = eq(state, UInt<3>("h1")) @[AllToAllPE.scala 115:30]
    wire leftBusy : UInt<1> @[AllToAllPE.scala 117:22]
    wire rightBusy : UInt<1> @[AllToAllPE.scala 118:23]
    wire upBusy : UInt<1> @[AllToAllPE.scala 119:20]
    wire bottomBusy : UInt<1> @[AllToAllPE.scala 120:24]
    leftBusy <= UInt<1>("h0") @[AllToAllPE.scala 122:12]
    rightBusy <= UInt<1>("h0") @[AllToAllPE.scala 123:13]
    rightBusy <= UInt<1>("h0") @[AllToAllPE.scala 124:13]
    upBusy <= UInt<1>("h0") @[AllToAllPE.scala 125:10]
    bottomBusy <= UInt<1>("h0") @[AllToAllPE.scala 126:14]
    node _T_3 = eq(state, UInt<3>("h0")) @[AllToAllPE.scala 128:14]
    when _T_3 : @[AllToAllPE.scala 128:23]
      io.busy <= UInt<1>("h0") @[AllToAllPE.scala 129:13]
      io.cmd.ready <= UInt<1>("h1") @[AllToAllPE.scala 130:18]
      io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 131:19]
      io.resp.bits.data <= UInt<1>("h0") @[AllToAllPE.scala 132:23]
      io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 134:31]
      w_en <= UInt<1>("h0") @[AllToAllPE.scala 135:10]
      when load_signal : @[AllToAllPE.scala 137:22]
        state <= UInt<3>("h4") @[AllToAllPE.scala 138:13]
      else :
        when store_signal : @[AllToAllPE.scala 139:29]
          state <= UInt<3>("h5") @[AllToAllPE.scala 140:13]
        else :
          when allToAll_signal : @[AllToAllPE.scala 141:32]
            state <= UInt<3>("h1") @[AllToAllPE.scala 142:13]
          else :
            state <= UInt<3>("h0") @[AllToAllPE.scala 144:13]
    else :
      node _T_4 = eq(state, UInt<3>("h4")) @[AllToAllPE.scala 147:20]
      when _T_4 : @[AllToAllPE.scala 147:32]
        io.busy <= stall_resp @[AllToAllPE.scala 148:13]
        node _T_5 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 149:21]
        io.cmd.ready <= _T_5 @[AllToAllPE.scala 149:18]
        io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 150:19]
        io.resp.bits.data <= UInt<6>("h20") @[AllToAllPE.scala 151:23]
        resp_value <= UInt<6>("h20") @[AllToAllPE.scala 152:16]
        when is_this_PE : @[AllToAllPE.scala 154:21]
          node _T_6 = bits(memIndex, 4, 0) @[AllToAllPE.scala 155:12]
          infer mport MPORT = memPE[_T_6], clock @[AllToAllPE.scala 155:12]
          MPORT <= rs1 @[AllToAllPE.scala 155:23]
          io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 156:33]
          w_en <= UInt<1>("h1") @[AllToAllPE.scala 157:12]
        else :
          io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 159:33]
          w_en <= UInt<1>("h0") @[AllToAllPE.scala 160:12]
        node _T_7 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 163:25]
        node _T_8 = and(load_signal, _T_7) @[AllToAllPE.scala 163:22]
        when _T_8 : @[AllToAllPE.scala 163:37]
          state <= UInt<3>("h4") @[AllToAllPE.scala 164:13]
        else :
          node _T_9 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 165:32]
          node _T_10 = and(store_signal, _T_9) @[AllToAllPE.scala 165:29]
          when _T_10 : @[AllToAllPE.scala 165:44]
            state <= UInt<3>("h5") @[AllToAllPE.scala 166:13]
          else :
            node _T_11 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 167:35]
            node _T_12 = and(allToAll_signal, _T_11) @[AllToAllPE.scala 167:32]
            when _T_12 : @[AllToAllPE.scala 167:47]
              state <= UInt<3>("h1") @[AllToAllPE.scala 168:13]
            else :
              when stall_resp : @[AllToAllPE.scala 169:27]
                state <= UInt<3>("h7") @[AllToAllPE.scala 170:13]
              else :
                state <= UInt<3>("h0") @[AllToAllPE.scala 172:13]
      else :
        node _T_13 = eq(state, UInt<3>("h5")) @[AllToAllPE.scala 175:20]
        when _T_13 : @[AllToAllPE.scala 175:33]
          io.busy <= UInt<1>("h1") @[AllToAllPE.scala 177:13]
          io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 178:18]
          io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 179:19]
          io.resp.bits.data <= UInt<6>("h21") @[AllToAllPE.scala 180:23]
          when is_this_PE : @[AllToAllPE.scala 182:21]
            node _T_14 = bits(memIndex, 4, 0) @[AllToAllPE.scala 183:26]
            infer mport MPORT_1 = memPE[_T_14], clock @[AllToAllPE.scala 183:26]
            resp_value <= MPORT_1 @[AllToAllPE.scala 183:18]
            w_en <= UInt<1>("h1") @[AllToAllPE.scala 184:12]
          else :
            w_en <= UInt<1>("h0") @[AllToAllPE.scala 186:12]
          io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 189:31]
          state <= UInt<3>("h6") @[AllToAllPE.scala 191:11]
        else :
          node _T_15 = eq(state, UInt<3>("h6")) @[AllToAllPE.scala 193:20]
          when _T_15 : @[AllToAllPE.scala 193:35]
            io.busy <= stall_resp @[AllToAllPE.scala 195:13]
            node _T_16 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 196:21]
            io.cmd.ready <= _T_16 @[AllToAllPE.scala 196:18]
            io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 197:19]
            io.resp.bits.data <= resp_value @[AllToAllPE.scala 198:23]
            io.resp.bits.write_enable <= w_en @[AllToAllPE.scala 199:31]
            node _T_17 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 201:25]
            node _T_18 = and(load_signal, _T_17) @[AllToAllPE.scala 201:22]
            when _T_18 : @[AllToAllPE.scala 201:37]
              state <= UInt<3>("h4") @[AllToAllPE.scala 202:13]
            else :
              node _T_19 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 203:32]
              node _T_20 = and(store_signal, _T_19) @[AllToAllPE.scala 203:29]
              when _T_20 : @[AllToAllPE.scala 203:44]
                state <= UInt<3>("h5") @[AllToAllPE.scala 204:13]
              else :
                node _T_21 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 205:35]
                node _T_22 = and(allToAll_signal, _T_21) @[AllToAllPE.scala 205:32]
                when _T_22 : @[AllToAllPE.scala 205:47]
                  state <= UInt<3>("h1") @[AllToAllPE.scala 206:13]
                else :
                  when stall_resp : @[AllToAllPE.scala 207:27]
                    state <= UInt<3>("h7") @[AllToAllPE.scala 208:13]
                  else :
                    state <= UInt<3>("h0") @[AllToAllPE.scala 210:13]
          else :
            node _T_23 = eq(state, UInt<3>("h7")) @[AllToAllPE.scala 213:20]
            when _T_23 : @[AllToAllPE.scala 213:36]
              io.busy <= UInt<1>("h1") @[AllToAllPE.scala 215:13]
              io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 216:18]
              io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 217:19]
              io.resp.bits.data <= resp_value @[AllToAllPE.scala 218:23]
              io.resp.bits.write_enable <= w_en @[AllToAllPE.scala 220:31]
              when stall_resp : @[AllToAllPE.scala 222:21]
                state <= UInt<3>("h7") @[AllToAllPE.scala 223:13]
              else :
                state <= UInt<3>("h0") @[AllToAllPE.scala 225:13]
            else :
              node _T_24 = eq(state, UInt<3>("h1")) @[AllToAllPE.scala 228:20]
              when _T_24 : @[AllToAllPE.scala 228:31]
                io.busy <= UInt<1>("h1") @[AllToAllPE.scala 229:13]
                io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 230:18]
                io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 231:19]
                io.resp.bits.data <= resp_value @[AllToAllPE.scala 232:23]
                w_en <= UInt<1>("h0") @[AllToAllPE.scala 234:10]
                io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 235:31]
                io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 238:22]
                io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 239:23]
                io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 240:20]
                io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 241:24]
                state <= UInt<3>("h3") @[AllToAllPE.scala 243:11]
              else :
                node _T_25 = eq(state, UInt<3>("h2")) @[AllToAllPE.scala 245:20]
                when _T_25 : @[AllToAllPE.scala 245:41]
                  node _T_26 = or(leftBusy, rightBusy) @[AllToAllPE.scala 247:25]
                  node _T_27 = or(_T_26, upBusy) @[AllToAllPE.scala 247:38]
                  node _T_28 = or(_T_27, bottomBusy) @[AllToAllPE.scala 247:48]
                  io.busy <= _T_28 @[AllToAllPE.scala 247:13]
                  io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 248:18]
                  io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 249:19]
                  io.resp.bits.data <= resp_value @[AllToAllPE.scala 250:23]
                  io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 251:31]
                  io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 254:22]
                  io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 255:23]
                  io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 256:20]
                  io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 257:24]
                  when io.end_AllToAll : @[AllToAllPE.scala 259:27]
                    state <= UInt<3>("h3") @[AllToAllPE.scala 260:13]
                  else :
                    state <= UInt<3>("h2") @[AllToAllPE.scala 262:13]
                else :
                  node _T_29 = eq(state, UInt<3>("h3")) @[AllToAllPE.scala 265:20]
                  when _T_29 : @[AllToAllPE.scala 265:36]
                    io.busy <= UInt<1>("h0") @[AllToAllPE.scala 266:13]
                    io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 267:18]
                    io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 268:19]
                    io.resp.bits.data <= UInt<1>("h0") @[AllToAllPE.scala 269:23]
                    io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 270:31]
                    state <= UInt<3>("h0") @[AllToAllPE.scala 272:11]
                  else :
                    io.busy <= UInt<1>("h0") @[AllToAllPE.scala 276:13]
                    io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 277:18]
                    io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 278:19]
                    io.resp.bits.data <= UInt<64>("haaaaaaaa") @[AllToAllPE.scala 279:23]
                    io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 280:31]
    reg stateAction : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AllToAllPE.scala 289:28]
    node _T_30 = eq(stateAction, UInt<3>("h0")) @[AllToAllPE.scala 293:20]
    when _T_30 : @[AllToAllPE.scala 293:29]
      io.left.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 295:22]
      io.right.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 296:23]
      io.up.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 297:20]
      io.bottom.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 298:24]
      when start_AllToAll : @[AllToAllPE.scala 300:25]
        stateAction <= UInt<3>("h1") @[AllToAllPE.scala 301:19]
      else :
        stateAction <= UInt<3>("h0") @[AllToAllPE.scala 303:19]
    else :
      node _T_31 = eq(stateAction, UInt<3>("h1")) @[AllToAllPE.scala 305:26]
      when _T_31 : @[AllToAllPE.scala 305:37]
        io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 307:22]
        io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 308:23]
        io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 309:20]
        io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 310:24]
        when io.end_AllToAll : @[AllToAllPE.scala 313:26]
          stateAction <= UInt<3>("h0") @[AllToAllPE.scala 314:19]
        else :
          stateAction <= UInt<3>("h1") @[AllToAllPE.scala 316:19]
      else :
        skip
    io.left.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 324:25]
    io.left.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 325:24]
    io.left.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 326:24]
    io.left.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 327:27]
    io.left.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 328:27]
    io.left.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 329:21]
    io.left.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 330:20]
    io.right.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 332:26]
    io.right.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 333:25]
    io.right.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 334:25]
    io.right.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 335:28]
    io.right.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 336:28]
    io.right.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 337:22]
    io.right.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 338:21]
    io.up.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 340:23]
    io.up.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 341:22]
    io.up.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 342:22]
    io.up.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 343:25]
    io.up.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 344:25]
    io.up.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 345:19]
    io.up.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 346:18]
    io.bottom.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 348:27]
    io.bottom.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 349:26]
    io.bottom.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 350:26]
    io.bottom.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 351:29]
    io.bottom.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 352:29]
    io.bottom.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 353:23]
    io.bottom.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 354:22]
    inst left_in of Queue_28 @[Decoupled.scala 296:21]
    left_in.clock <= clock
    left_in.reset <= reset
    left_in.io.enq.valid <= io.left.in.valid @[Decoupled.scala 297:22]
    left_in.io.enq.bits.y_dest <= io.left.in.bits.y_dest @[Decoupled.scala 298:21]
    left_in.io.enq.bits.x_dest <= io.left.in.bits.x_dest @[Decoupled.scala 298:21]
    left_in.io.enq.bits.y_0 <= io.left.in.bits.y_0 @[Decoupled.scala 298:21]
    left_in.io.enq.bits.x_0 <= io.left.in.bits.x_0 @[Decoupled.scala 298:21]
    left_in.io.enq.bits.data <= io.left.in.bits.data @[Decoupled.scala 298:21]
    io.left.in.ready <= left_in.io.enq.ready @[Decoupled.scala 299:17]
    inst right_in of Queue_29 @[Decoupled.scala 296:21]
    right_in.clock <= clock
    right_in.reset <= reset
    right_in.io.enq.valid <= io.right.in.valid @[Decoupled.scala 297:22]
    right_in.io.enq.bits.y_dest <= io.right.in.bits.y_dest @[Decoupled.scala 298:21]
    right_in.io.enq.bits.x_dest <= io.right.in.bits.x_dest @[Decoupled.scala 298:21]
    right_in.io.enq.bits.y_0 <= io.right.in.bits.y_0 @[Decoupled.scala 298:21]
    right_in.io.enq.bits.x_0 <= io.right.in.bits.x_0 @[Decoupled.scala 298:21]
    right_in.io.enq.bits.data <= io.right.in.bits.data @[Decoupled.scala 298:21]
    io.right.in.ready <= right_in.io.enq.ready @[Decoupled.scala 299:17]
    inst up_in of Queue_30 @[Decoupled.scala 296:21]
    up_in.clock <= clock
    up_in.reset <= reset
    up_in.io.enq.valid <= io.up.in.valid @[Decoupled.scala 297:22]
    up_in.io.enq.bits.y_dest <= io.up.in.bits.y_dest @[Decoupled.scala 298:21]
    up_in.io.enq.bits.x_dest <= io.up.in.bits.x_dest @[Decoupled.scala 298:21]
    up_in.io.enq.bits.y_0 <= io.up.in.bits.y_0 @[Decoupled.scala 298:21]
    up_in.io.enq.bits.x_0 <= io.up.in.bits.x_0 @[Decoupled.scala 298:21]
    up_in.io.enq.bits.data <= io.up.in.bits.data @[Decoupled.scala 298:21]
    io.up.in.ready <= up_in.io.enq.ready @[Decoupled.scala 299:17]
    inst bottom_in of Queue_31 @[Decoupled.scala 296:21]
    bottom_in.clock <= clock
    bottom_in.reset <= reset
    bottom_in.io.enq.valid <= io.bottom.in.valid @[Decoupled.scala 297:22]
    bottom_in.io.enq.bits.y_dest <= io.bottom.in.bits.y_dest @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.x_dest <= io.bottom.in.bits.x_dest @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.y_0 <= io.bottom.in.bits.y_0 @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.x_0 <= io.bottom.in.bits.x_0 @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.data <= io.bottom.in.bits.data @[Decoupled.scala 298:21]
    io.bottom.in.ready <= bottom_in.io.enq.ready @[Decoupled.scala 299:17]
    left_in.io.deq.ready <= io.left.in.ready @[AllToAllPE.scala 373:17]
    right_in.io.deq.ready <= io.right.in.ready @[AllToAllPE.scala 374:18]
    up_in.io.deq.ready <= io.up.in.ready @[AllToAllPE.scala 375:15]
    bottom_in.io.deq.ready <= io.bottom.in.ready @[AllToAllPE.scala 376:19]

  module Queue_32 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_33 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_34 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_35 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module AllToAllPEbottomRightCorner :
    input clock : Clock
    input reset : Reset
    output io : { busy : UInt<1>, flip end_AllToAll : UInt<1>, flip cmd : { flip ready : UInt<1>, valid : UInt<1>, bits : { load : UInt<1>, store : UInt<1>, doAllToAll : UInt<1>, rs1 : UInt<64>, rs2 : UInt<64>}}, resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, write_enable : UInt<1>}}, left : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, right : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, up : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, bottom : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}}

    cmem memPE : UInt<64> [32] @[AllToAllPE.scala 72:18]
    reg x_coord : UInt<2>, clock with :
      reset => (reset, UInt<2>("h2")) @[AllToAllPE.scala 75:24]
    reg y_coord : UInt<2>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 76:24]
    reg rs1 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), rs1) @[AllToAllPE.scala 79:16]
    reg rs2 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), rs2) @[AllToAllPE.scala 80:16]
    rs1 <= io.cmd.bits.rs1 @[AllToAllPE.scala 86:7]
    rs2 <= io.cmd.bits.rs2 @[AllToAllPE.scala 87:7]
    reg w_en : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 91:21]
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AllToAllPE.scala 96:22]
    reg resp_value : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 97:27]
    node x_value = bits(rs2, 15, 0) @[AllToAllPE.scala 99:20]
    node y_value = bits(rs2, 31, 16) @[AllToAllPE.scala 100:20]
    node memIndex = bits(rs2, 63, 32) @[AllToAllPE.scala 101:21]
    node _T = eq(x_value, x_coord) @[AllToAllPE.scala 109:29]
    node _T_1 = eq(y_value, y_coord) @[AllToAllPE.scala 109:54]
    node is_this_PE = and(_T, _T_1) @[AllToAllPE.scala 109:42]
    node load_signal = and(io.cmd.valid, io.cmd.bits.load) @[AllToAllPE.scala 110:34]
    node store_signal = and(io.cmd.valid, io.cmd.bits.store) @[AllToAllPE.scala 111:35]
    node allToAll_signal = and(io.cmd.valid, io.cmd.bits.doAllToAll) @[AllToAllPE.scala 112:38]
    node _T_2 = eq(io.resp.ready, UInt<1>("h0")) @[AllToAllPE.scala 114:20]
    node stall_resp = and(_T_2, io.resp.valid) @[AllToAllPE.scala 114:35]
    node start_AllToAll = eq(state, UInt<3>("h1")) @[AllToAllPE.scala 115:30]
    wire leftBusy : UInt<1> @[AllToAllPE.scala 117:22]
    wire rightBusy : UInt<1> @[AllToAllPE.scala 118:23]
    wire upBusy : UInt<1> @[AllToAllPE.scala 119:20]
    wire bottomBusy : UInt<1> @[AllToAllPE.scala 120:24]
    leftBusy <= UInt<1>("h0") @[AllToAllPE.scala 122:12]
    rightBusy <= UInt<1>("h0") @[AllToAllPE.scala 123:13]
    rightBusy <= UInt<1>("h0") @[AllToAllPE.scala 124:13]
    upBusy <= UInt<1>("h0") @[AllToAllPE.scala 125:10]
    bottomBusy <= UInt<1>("h0") @[AllToAllPE.scala 126:14]
    node _T_3 = eq(state, UInt<3>("h0")) @[AllToAllPE.scala 128:14]
    when _T_3 : @[AllToAllPE.scala 128:23]
      io.busy <= UInt<1>("h0") @[AllToAllPE.scala 129:13]
      io.cmd.ready <= UInt<1>("h1") @[AllToAllPE.scala 130:18]
      io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 131:19]
      io.resp.bits.data <= UInt<1>("h0") @[AllToAllPE.scala 132:23]
      io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 134:31]
      w_en <= UInt<1>("h0") @[AllToAllPE.scala 135:10]
      when load_signal : @[AllToAllPE.scala 137:22]
        state <= UInt<3>("h4") @[AllToAllPE.scala 138:13]
      else :
        when store_signal : @[AllToAllPE.scala 139:29]
          state <= UInt<3>("h5") @[AllToAllPE.scala 140:13]
        else :
          when allToAll_signal : @[AllToAllPE.scala 141:32]
            state <= UInt<3>("h1") @[AllToAllPE.scala 142:13]
          else :
            state <= UInt<3>("h0") @[AllToAllPE.scala 144:13]
    else :
      node _T_4 = eq(state, UInt<3>("h4")) @[AllToAllPE.scala 147:20]
      when _T_4 : @[AllToAllPE.scala 147:32]
        io.busy <= stall_resp @[AllToAllPE.scala 148:13]
        node _T_5 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 149:21]
        io.cmd.ready <= _T_5 @[AllToAllPE.scala 149:18]
        io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 150:19]
        io.resp.bits.data <= UInt<6>("h20") @[AllToAllPE.scala 151:23]
        resp_value <= UInt<6>("h20") @[AllToAllPE.scala 152:16]
        when is_this_PE : @[AllToAllPE.scala 154:21]
          node _T_6 = bits(memIndex, 4, 0) @[AllToAllPE.scala 155:12]
          infer mport MPORT = memPE[_T_6], clock @[AllToAllPE.scala 155:12]
          MPORT <= rs1 @[AllToAllPE.scala 155:23]
          io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 156:33]
          w_en <= UInt<1>("h1") @[AllToAllPE.scala 157:12]
        else :
          io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 159:33]
          w_en <= UInt<1>("h0") @[AllToAllPE.scala 160:12]
        node _T_7 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 163:25]
        node _T_8 = and(load_signal, _T_7) @[AllToAllPE.scala 163:22]
        when _T_8 : @[AllToAllPE.scala 163:37]
          state <= UInt<3>("h4") @[AllToAllPE.scala 164:13]
        else :
          node _T_9 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 165:32]
          node _T_10 = and(store_signal, _T_9) @[AllToAllPE.scala 165:29]
          when _T_10 : @[AllToAllPE.scala 165:44]
            state <= UInt<3>("h5") @[AllToAllPE.scala 166:13]
          else :
            node _T_11 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 167:35]
            node _T_12 = and(allToAll_signal, _T_11) @[AllToAllPE.scala 167:32]
            when _T_12 : @[AllToAllPE.scala 167:47]
              state <= UInt<3>("h1") @[AllToAllPE.scala 168:13]
            else :
              when stall_resp : @[AllToAllPE.scala 169:27]
                state <= UInt<3>("h7") @[AllToAllPE.scala 170:13]
              else :
                state <= UInt<3>("h0") @[AllToAllPE.scala 172:13]
      else :
        node _T_13 = eq(state, UInt<3>("h5")) @[AllToAllPE.scala 175:20]
        when _T_13 : @[AllToAllPE.scala 175:33]
          io.busy <= UInt<1>("h1") @[AllToAllPE.scala 177:13]
          io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 178:18]
          io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 179:19]
          io.resp.bits.data <= UInt<6>("h21") @[AllToAllPE.scala 180:23]
          when is_this_PE : @[AllToAllPE.scala 182:21]
            node _T_14 = bits(memIndex, 4, 0) @[AllToAllPE.scala 183:26]
            infer mport MPORT_1 = memPE[_T_14], clock @[AllToAllPE.scala 183:26]
            resp_value <= MPORT_1 @[AllToAllPE.scala 183:18]
            w_en <= UInt<1>("h1") @[AllToAllPE.scala 184:12]
          else :
            w_en <= UInt<1>("h0") @[AllToAllPE.scala 186:12]
          io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 189:31]
          state <= UInt<3>("h6") @[AllToAllPE.scala 191:11]
        else :
          node _T_15 = eq(state, UInt<3>("h6")) @[AllToAllPE.scala 193:20]
          when _T_15 : @[AllToAllPE.scala 193:35]
            io.busy <= stall_resp @[AllToAllPE.scala 195:13]
            node _T_16 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 196:21]
            io.cmd.ready <= _T_16 @[AllToAllPE.scala 196:18]
            io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 197:19]
            io.resp.bits.data <= resp_value @[AllToAllPE.scala 198:23]
            io.resp.bits.write_enable <= w_en @[AllToAllPE.scala 199:31]
            node _T_17 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 201:25]
            node _T_18 = and(load_signal, _T_17) @[AllToAllPE.scala 201:22]
            when _T_18 : @[AllToAllPE.scala 201:37]
              state <= UInt<3>("h4") @[AllToAllPE.scala 202:13]
            else :
              node _T_19 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 203:32]
              node _T_20 = and(store_signal, _T_19) @[AllToAllPE.scala 203:29]
              when _T_20 : @[AllToAllPE.scala 203:44]
                state <= UInt<3>("h5") @[AllToAllPE.scala 204:13]
              else :
                node _T_21 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 205:35]
                node _T_22 = and(allToAll_signal, _T_21) @[AllToAllPE.scala 205:32]
                when _T_22 : @[AllToAllPE.scala 205:47]
                  state <= UInt<3>("h1") @[AllToAllPE.scala 206:13]
                else :
                  when stall_resp : @[AllToAllPE.scala 207:27]
                    state <= UInt<3>("h7") @[AllToAllPE.scala 208:13]
                  else :
                    state <= UInt<3>("h0") @[AllToAllPE.scala 210:13]
          else :
            node _T_23 = eq(state, UInt<3>("h7")) @[AllToAllPE.scala 213:20]
            when _T_23 : @[AllToAllPE.scala 213:36]
              io.busy <= UInt<1>("h1") @[AllToAllPE.scala 215:13]
              io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 216:18]
              io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 217:19]
              io.resp.bits.data <= resp_value @[AllToAllPE.scala 218:23]
              io.resp.bits.write_enable <= w_en @[AllToAllPE.scala 220:31]
              when stall_resp : @[AllToAllPE.scala 222:21]
                state <= UInt<3>("h7") @[AllToAllPE.scala 223:13]
              else :
                state <= UInt<3>("h0") @[AllToAllPE.scala 225:13]
            else :
              node _T_24 = eq(state, UInt<3>("h1")) @[AllToAllPE.scala 228:20]
              when _T_24 : @[AllToAllPE.scala 228:31]
                io.busy <= UInt<1>("h1") @[AllToAllPE.scala 229:13]
                io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 230:18]
                io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 231:19]
                io.resp.bits.data <= resp_value @[AllToAllPE.scala 232:23]
                w_en <= UInt<1>("h0") @[AllToAllPE.scala 234:10]
                io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 235:31]
                io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 238:22]
                io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 239:23]
                io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 240:20]
                io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 241:24]
                state <= UInt<3>("h3") @[AllToAllPE.scala 243:11]
              else :
                node _T_25 = eq(state, UInt<3>("h2")) @[AllToAllPE.scala 245:20]
                when _T_25 : @[AllToAllPE.scala 245:41]
                  node _T_26 = or(leftBusy, rightBusy) @[AllToAllPE.scala 247:25]
                  node _T_27 = or(_T_26, upBusy) @[AllToAllPE.scala 247:38]
                  node _T_28 = or(_T_27, bottomBusy) @[AllToAllPE.scala 247:48]
                  io.busy <= _T_28 @[AllToAllPE.scala 247:13]
                  io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 248:18]
                  io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 249:19]
                  io.resp.bits.data <= resp_value @[AllToAllPE.scala 250:23]
                  io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 251:31]
                  io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 254:22]
                  io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 255:23]
                  io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 256:20]
                  io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 257:24]
                  when io.end_AllToAll : @[AllToAllPE.scala 259:27]
                    state <= UInt<3>("h3") @[AllToAllPE.scala 260:13]
                  else :
                    state <= UInt<3>("h2") @[AllToAllPE.scala 262:13]
                else :
                  node _T_29 = eq(state, UInt<3>("h3")) @[AllToAllPE.scala 265:20]
                  when _T_29 : @[AllToAllPE.scala 265:36]
                    io.busy <= UInt<1>("h0") @[AllToAllPE.scala 266:13]
                    io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 267:18]
                    io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 268:19]
                    io.resp.bits.data <= UInt<1>("h0") @[AllToAllPE.scala 269:23]
                    io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 270:31]
                    state <= UInt<3>("h0") @[AllToAllPE.scala 272:11]
                  else :
                    io.busy <= UInt<1>("h0") @[AllToAllPE.scala 276:13]
                    io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 277:18]
                    io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 278:19]
                    io.resp.bits.data <= UInt<64>("haaaaaaaa") @[AllToAllPE.scala 279:23]
                    io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 280:31]
    reg stateAction : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AllToAllPE.scala 289:28]
    node _T_30 = eq(stateAction, UInt<3>("h0")) @[AllToAllPE.scala 293:20]
    when _T_30 : @[AllToAllPE.scala 293:29]
      io.left.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 295:22]
      io.right.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 296:23]
      io.up.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 297:20]
      io.bottom.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 298:24]
      when start_AllToAll : @[AllToAllPE.scala 300:25]
        stateAction <= UInt<3>("h1") @[AllToAllPE.scala 301:19]
      else :
        stateAction <= UInt<3>("h0") @[AllToAllPE.scala 303:19]
    else :
      node _T_31 = eq(stateAction, UInt<3>("h1")) @[AllToAllPE.scala 305:26]
      when _T_31 : @[AllToAllPE.scala 305:37]
        io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 307:22]
        io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 308:23]
        io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 309:20]
        io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 310:24]
        when io.end_AllToAll : @[AllToAllPE.scala 313:26]
          stateAction <= UInt<3>("h0") @[AllToAllPE.scala 314:19]
        else :
          stateAction <= UInt<3>("h1") @[AllToAllPE.scala 316:19]
      else :
        skip
    io.left.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 324:25]
    io.left.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 325:24]
    io.left.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 326:24]
    io.left.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 327:27]
    io.left.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 328:27]
    io.left.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 329:21]
    io.left.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 330:20]
    io.right.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 332:26]
    io.right.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 333:25]
    io.right.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 334:25]
    io.right.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 335:28]
    io.right.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 336:28]
    io.right.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 337:22]
    io.right.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 338:21]
    io.up.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 340:23]
    io.up.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 341:22]
    io.up.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 342:22]
    io.up.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 343:25]
    io.up.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 344:25]
    io.up.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 345:19]
    io.up.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 346:18]
    io.bottom.out.bits.data <= UInt<64>("h0") @[AllToAllPE.scala 348:27]
    io.bottom.out.bits.x_0 <= UInt<1>("h0") @[AllToAllPE.scala 349:26]
    io.bottom.out.bits.y_0 <= UInt<1>("h0") @[AllToAllPE.scala 350:26]
    io.bottom.out.bits.x_dest <= UInt<1>("h0") @[AllToAllPE.scala 351:29]
    io.bottom.out.bits.y_dest <= UInt<1>("h0") @[AllToAllPE.scala 352:29]
    io.bottom.out.valid <= UInt<1>("h0") @[AllToAllPE.scala 353:23]
    io.bottom.in.ready <= UInt<1>("h0") @[AllToAllPE.scala 354:22]
    inst left_in of Queue_32 @[Decoupled.scala 296:21]
    left_in.clock <= clock
    left_in.reset <= reset
    left_in.io.enq.valid <= io.left.in.valid @[Decoupled.scala 297:22]
    left_in.io.enq.bits.y_dest <= io.left.in.bits.y_dest @[Decoupled.scala 298:21]
    left_in.io.enq.bits.x_dest <= io.left.in.bits.x_dest @[Decoupled.scala 298:21]
    left_in.io.enq.bits.y_0 <= io.left.in.bits.y_0 @[Decoupled.scala 298:21]
    left_in.io.enq.bits.x_0 <= io.left.in.bits.x_0 @[Decoupled.scala 298:21]
    left_in.io.enq.bits.data <= io.left.in.bits.data @[Decoupled.scala 298:21]
    io.left.in.ready <= left_in.io.enq.ready @[Decoupled.scala 299:17]
    inst right_in of Queue_33 @[Decoupled.scala 296:21]
    right_in.clock <= clock
    right_in.reset <= reset
    right_in.io.enq.valid <= io.right.in.valid @[Decoupled.scala 297:22]
    right_in.io.enq.bits.y_dest <= io.right.in.bits.y_dest @[Decoupled.scala 298:21]
    right_in.io.enq.bits.x_dest <= io.right.in.bits.x_dest @[Decoupled.scala 298:21]
    right_in.io.enq.bits.y_0 <= io.right.in.bits.y_0 @[Decoupled.scala 298:21]
    right_in.io.enq.bits.x_0 <= io.right.in.bits.x_0 @[Decoupled.scala 298:21]
    right_in.io.enq.bits.data <= io.right.in.bits.data @[Decoupled.scala 298:21]
    io.right.in.ready <= right_in.io.enq.ready @[Decoupled.scala 299:17]
    inst up_in of Queue_34 @[Decoupled.scala 296:21]
    up_in.clock <= clock
    up_in.reset <= reset
    up_in.io.enq.valid <= io.up.in.valid @[Decoupled.scala 297:22]
    up_in.io.enq.bits.y_dest <= io.up.in.bits.y_dest @[Decoupled.scala 298:21]
    up_in.io.enq.bits.x_dest <= io.up.in.bits.x_dest @[Decoupled.scala 298:21]
    up_in.io.enq.bits.y_0 <= io.up.in.bits.y_0 @[Decoupled.scala 298:21]
    up_in.io.enq.bits.x_0 <= io.up.in.bits.x_0 @[Decoupled.scala 298:21]
    up_in.io.enq.bits.data <= io.up.in.bits.data @[Decoupled.scala 298:21]
    io.up.in.ready <= up_in.io.enq.ready @[Decoupled.scala 299:17]
    inst bottom_in of Queue_35 @[Decoupled.scala 296:21]
    bottom_in.clock <= clock
    bottom_in.reset <= reset
    bottom_in.io.enq.valid <= io.bottom.in.valid @[Decoupled.scala 297:22]
    bottom_in.io.enq.bits.y_dest <= io.bottom.in.bits.y_dest @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.x_dest <= io.bottom.in.bits.x_dest @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.y_0 <= io.bottom.in.bits.y_0 @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.x_0 <= io.bottom.in.bits.x_0 @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.data <= io.bottom.in.bits.data @[Decoupled.scala 298:21]
    io.bottom.in.ready <= bottom_in.io.enq.ready @[Decoupled.scala 299:17]
    left_in.io.deq.ready <= io.left.in.ready @[AllToAllPE.scala 373:17]
    right_in.io.deq.ready <= io.right.in.ready @[AllToAllPE.scala 374:18]
    up_in.io.deq.ready <= io.up.in.ready @[AllToAllPE.scala 375:15]
    bottom_in.io.deq.ready <= io.bottom.in.ready @[AllToAllPE.scala 376:19]

  module AllToAllMesh :
    input clock : Clock
    input reset : Reset
    output io : { flip cmd : { flip ready : UInt<1>, valid : UInt<1>, bits : { load : UInt<1>, store : UInt<1>, doAllToAll : UInt<1>, rs1 : UInt<64>, rs2 : UInt<64>}}, resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>}}, busy : UInt<1>}

    inst vector_0 of AllToAllPEupLeftCorner @[AllToAllMesh.scala 95:41]
    vector_0.clock <= clock
    vector_0.reset <= reset
    inst vector_1 of AllToAllPEup @[AllToAllMesh.scala 106:41]
    vector_1.clock <= clock
    vector_1.reset <= reset
    inst vector_2 of AllToAllPEupRightCorner @[AllToAllMesh.scala 98:41]
    vector_2.clock <= clock
    vector_2.reset <= reset
    inst vector_3 of AllToAllPEleft @[AllToAllMesh.scala 112:41]
    vector_3.clock <= clock
    vector_3.reset <= reset
    inst vector_4 of AllToAllPEmiddle @[AllToAllMesh.scala 118:41]
    vector_4.clock <= clock
    vector_4.reset <= reset
    inst vector_5 of AllToAllPEright @[AllToAllMesh.scala 115:41]
    vector_5.clock <= clock
    vector_5.reset <= reset
    inst vector_6 of AllToAllPEbottomLeftCorner @[AllToAllMesh.scala 101:41]
    vector_6.clock <= clock
    vector_6.reset <= reset
    inst vector_7 of AllToAllPEbottom @[AllToAllMesh.scala 109:41]
    vector_7.clock <= clock
    vector_7.reset <= reset
    inst vector_8 of AllToAllPEbottomRightCorner @[AllToAllMesh.scala 104:41]
    vector_8.clock <= clock
    vector_8.reset <= reset
    vector_0.io.cmd.valid <= io.cmd.valid @[AllToAllMesh.scala 130:32]
    vector_0.io.cmd.bits.load <= io.cmd.bits.load @[AllToAllMesh.scala 131:36]
    vector_0.io.cmd.bits.store <= io.cmd.bits.store @[AllToAllMesh.scala 132:37]
    vector_0.io.cmd.bits.doAllToAll <= io.cmd.bits.doAllToAll @[AllToAllMesh.scala 133:42]
    vector_0.io.cmd.bits.rs1 <= io.cmd.bits.rs1 @[AllToAllMesh.scala 135:35]
    vector_0.io.cmd.bits.rs2 <= io.cmd.bits.rs2 @[AllToAllMesh.scala 136:35]
    vector_0.io.resp.ready <= io.resp.ready @[AllToAllMesh.scala 138:33]
    node _T = eq(io.busy, UInt<1>("h0")) @[AllToAllMesh.scala 141:38]
    vector_0.io.end_AllToAll <= _T @[AllToAllMesh.scala 141:35]
    vector_1.io.cmd.valid <= io.cmd.valid @[AllToAllMesh.scala 130:32]
    vector_1.io.cmd.bits.load <= io.cmd.bits.load @[AllToAllMesh.scala 131:36]
    vector_1.io.cmd.bits.store <= io.cmd.bits.store @[AllToAllMesh.scala 132:37]
    vector_1.io.cmd.bits.doAllToAll <= io.cmd.bits.doAllToAll @[AllToAllMesh.scala 133:42]
    vector_1.io.cmd.bits.rs1 <= io.cmd.bits.rs1 @[AllToAllMesh.scala 135:35]
    vector_1.io.cmd.bits.rs2 <= io.cmd.bits.rs2 @[AllToAllMesh.scala 136:35]
    vector_1.io.resp.ready <= io.resp.ready @[AllToAllMesh.scala 138:33]
    node _T_1 = eq(io.busy, UInt<1>("h0")) @[AllToAllMesh.scala 141:38]
    vector_1.io.end_AllToAll <= _T_1 @[AllToAllMesh.scala 141:35]
    vector_2.io.cmd.valid <= io.cmd.valid @[AllToAllMesh.scala 130:32]
    vector_2.io.cmd.bits.load <= io.cmd.bits.load @[AllToAllMesh.scala 131:36]
    vector_2.io.cmd.bits.store <= io.cmd.bits.store @[AllToAllMesh.scala 132:37]
    vector_2.io.cmd.bits.doAllToAll <= io.cmd.bits.doAllToAll @[AllToAllMesh.scala 133:42]
    vector_2.io.cmd.bits.rs1 <= io.cmd.bits.rs1 @[AllToAllMesh.scala 135:35]
    vector_2.io.cmd.bits.rs2 <= io.cmd.bits.rs2 @[AllToAllMesh.scala 136:35]
    vector_2.io.resp.ready <= io.resp.ready @[AllToAllMesh.scala 138:33]
    node _T_2 = eq(io.busy, UInt<1>("h0")) @[AllToAllMesh.scala 141:38]
    vector_2.io.end_AllToAll <= _T_2 @[AllToAllMesh.scala 141:35]
    vector_3.io.cmd.valid <= io.cmd.valid @[AllToAllMesh.scala 130:32]
    vector_3.io.cmd.bits.load <= io.cmd.bits.load @[AllToAllMesh.scala 131:36]
    vector_3.io.cmd.bits.store <= io.cmd.bits.store @[AllToAllMesh.scala 132:37]
    vector_3.io.cmd.bits.doAllToAll <= io.cmd.bits.doAllToAll @[AllToAllMesh.scala 133:42]
    vector_3.io.cmd.bits.rs1 <= io.cmd.bits.rs1 @[AllToAllMesh.scala 135:35]
    vector_3.io.cmd.bits.rs2 <= io.cmd.bits.rs2 @[AllToAllMesh.scala 136:35]
    vector_3.io.resp.ready <= io.resp.ready @[AllToAllMesh.scala 138:33]
    node _T_3 = eq(io.busy, UInt<1>("h0")) @[AllToAllMesh.scala 141:38]
    vector_3.io.end_AllToAll <= _T_3 @[AllToAllMesh.scala 141:35]
    vector_4.io.cmd.valid <= io.cmd.valid @[AllToAllMesh.scala 130:32]
    vector_4.io.cmd.bits.load <= io.cmd.bits.load @[AllToAllMesh.scala 131:36]
    vector_4.io.cmd.bits.store <= io.cmd.bits.store @[AllToAllMesh.scala 132:37]
    vector_4.io.cmd.bits.doAllToAll <= io.cmd.bits.doAllToAll @[AllToAllMesh.scala 133:42]
    vector_4.io.cmd.bits.rs1 <= io.cmd.bits.rs1 @[AllToAllMesh.scala 135:35]
    vector_4.io.cmd.bits.rs2 <= io.cmd.bits.rs2 @[AllToAllMesh.scala 136:35]
    vector_4.io.resp.ready <= io.resp.ready @[AllToAllMesh.scala 138:33]
    node _T_4 = eq(io.busy, UInt<1>("h0")) @[AllToAllMesh.scala 141:38]
    vector_4.io.end_AllToAll <= _T_4 @[AllToAllMesh.scala 141:35]
    vector_5.io.cmd.valid <= io.cmd.valid @[AllToAllMesh.scala 130:32]
    vector_5.io.cmd.bits.load <= io.cmd.bits.load @[AllToAllMesh.scala 131:36]
    vector_5.io.cmd.bits.store <= io.cmd.bits.store @[AllToAllMesh.scala 132:37]
    vector_5.io.cmd.bits.doAllToAll <= io.cmd.bits.doAllToAll @[AllToAllMesh.scala 133:42]
    vector_5.io.cmd.bits.rs1 <= io.cmd.bits.rs1 @[AllToAllMesh.scala 135:35]
    vector_5.io.cmd.bits.rs2 <= io.cmd.bits.rs2 @[AllToAllMesh.scala 136:35]
    vector_5.io.resp.ready <= io.resp.ready @[AllToAllMesh.scala 138:33]
    node _T_5 = eq(io.busy, UInt<1>("h0")) @[AllToAllMesh.scala 141:38]
    vector_5.io.end_AllToAll <= _T_5 @[AllToAllMesh.scala 141:35]
    vector_6.io.cmd.valid <= io.cmd.valid @[AllToAllMesh.scala 130:32]
    vector_6.io.cmd.bits.load <= io.cmd.bits.load @[AllToAllMesh.scala 131:36]
    vector_6.io.cmd.bits.store <= io.cmd.bits.store @[AllToAllMesh.scala 132:37]
    vector_6.io.cmd.bits.doAllToAll <= io.cmd.bits.doAllToAll @[AllToAllMesh.scala 133:42]
    vector_6.io.cmd.bits.rs1 <= io.cmd.bits.rs1 @[AllToAllMesh.scala 135:35]
    vector_6.io.cmd.bits.rs2 <= io.cmd.bits.rs2 @[AllToAllMesh.scala 136:35]
    vector_6.io.resp.ready <= io.resp.ready @[AllToAllMesh.scala 138:33]
    node _T_6 = eq(io.busy, UInt<1>("h0")) @[AllToAllMesh.scala 141:38]
    vector_6.io.end_AllToAll <= _T_6 @[AllToAllMesh.scala 141:35]
    vector_7.io.cmd.valid <= io.cmd.valid @[AllToAllMesh.scala 130:32]
    vector_7.io.cmd.bits.load <= io.cmd.bits.load @[AllToAllMesh.scala 131:36]
    vector_7.io.cmd.bits.store <= io.cmd.bits.store @[AllToAllMesh.scala 132:37]
    vector_7.io.cmd.bits.doAllToAll <= io.cmd.bits.doAllToAll @[AllToAllMesh.scala 133:42]
    vector_7.io.cmd.bits.rs1 <= io.cmd.bits.rs1 @[AllToAllMesh.scala 135:35]
    vector_7.io.cmd.bits.rs2 <= io.cmd.bits.rs2 @[AllToAllMesh.scala 136:35]
    vector_7.io.resp.ready <= io.resp.ready @[AllToAllMesh.scala 138:33]
    node _T_7 = eq(io.busy, UInt<1>("h0")) @[AllToAllMesh.scala 141:38]
    vector_7.io.end_AllToAll <= _T_7 @[AllToAllMesh.scala 141:35]
    vector_8.io.cmd.valid <= io.cmd.valid @[AllToAllMesh.scala 130:32]
    vector_8.io.cmd.bits.load <= io.cmd.bits.load @[AllToAllMesh.scala 131:36]
    vector_8.io.cmd.bits.store <= io.cmd.bits.store @[AllToAllMesh.scala 132:37]
    vector_8.io.cmd.bits.doAllToAll <= io.cmd.bits.doAllToAll @[AllToAllMesh.scala 133:42]
    vector_8.io.cmd.bits.rs1 <= io.cmd.bits.rs1 @[AllToAllMesh.scala 135:35]
    vector_8.io.cmd.bits.rs2 <= io.cmd.bits.rs2 @[AllToAllMesh.scala 136:35]
    vector_8.io.resp.ready <= io.resp.ready @[AllToAllMesh.scala 138:33]
    node _T_8 = eq(io.busy, UInt<1>("h0")) @[AllToAllMesh.scala 141:38]
    vector_8.io.end_AllToAll <= _T_8 @[AllToAllMesh.scala 141:35]
    node _T_9 = or(vector_0.io.busy, vector_1.io.busy) @[AllToAllMesh.scala 146:47]
    node _T_10 = or(_T_9, vector_2.io.busy) @[AllToAllMesh.scala 146:47]
    node _T_11 = or(_T_10, vector_3.io.busy) @[AllToAllMesh.scala 146:47]
    node _T_12 = or(_T_11, vector_4.io.busy) @[AllToAllMesh.scala 146:47]
    node _T_13 = or(_T_12, vector_5.io.busy) @[AllToAllMesh.scala 146:47]
    node _T_14 = or(_T_13, vector_6.io.busy) @[AllToAllMesh.scala 146:47]
    node _T_15 = or(_T_14, vector_7.io.busy) @[AllToAllMesh.scala 146:47]
    node _T_16 = or(_T_15, vector_8.io.busy) @[AllToAllMesh.scala 146:47]
    io.busy <= _T_16 @[AllToAllMesh.scala 146:13]
    node _T_17 = and(vector_0.io.cmd.ready, vector_1.io.cmd.ready) @[AllToAllMesh.scala 147:57]
    node _T_18 = and(_T_17, vector_2.io.cmd.ready) @[AllToAllMesh.scala 147:57]
    node _T_19 = and(_T_18, vector_3.io.cmd.ready) @[AllToAllMesh.scala 147:57]
    node _T_20 = and(_T_19, vector_4.io.cmd.ready) @[AllToAllMesh.scala 147:57]
    node _T_21 = and(_T_20, vector_5.io.cmd.ready) @[AllToAllMesh.scala 147:57]
    node _T_22 = and(_T_21, vector_6.io.cmd.ready) @[AllToAllMesh.scala 147:57]
    node _T_23 = and(_T_22, vector_7.io.cmd.ready) @[AllToAllMesh.scala 147:57]
    node _T_24 = and(_T_23, vector_8.io.cmd.ready) @[AllToAllMesh.scala 147:57]
    io.cmd.ready <= _T_24 @[AllToAllMesh.scala 147:18]
    node _T_25 = and(vector_0.io.resp.valid, vector_1.io.resp.valid) @[AllToAllMesh.scala 148:59]
    node _T_26 = and(_T_25, vector_2.io.resp.valid) @[AllToAllMesh.scala 148:59]
    node _T_27 = and(_T_26, vector_3.io.resp.valid) @[AllToAllMesh.scala 148:59]
    node _T_28 = and(_T_27, vector_4.io.resp.valid) @[AllToAllMesh.scala 148:59]
    node _T_29 = and(_T_28, vector_5.io.resp.valid) @[AllToAllMesh.scala 148:59]
    node _T_30 = and(_T_29, vector_6.io.resp.valid) @[AllToAllMesh.scala 148:59]
    node _T_31 = and(_T_30, vector_7.io.resp.valid) @[AllToAllMesh.scala 148:59]
    node _T_32 = and(_T_31, vector_8.io.resp.valid) @[AllToAllMesh.scala 148:59]
    io.resp.valid <= _T_32 @[AllToAllMesh.scala 148:19]
    node _T_33 = mux(vector_7.io.resp.bits.write_enable, vector_7.io.resp.bits.data, vector_8.io.resp.bits.data) @[Mux.scala 47:69]
    node _T_34 = mux(vector_6.io.resp.bits.write_enable, vector_6.io.resp.bits.data, _T_33) @[Mux.scala 47:69]
    node _T_35 = mux(vector_5.io.resp.bits.write_enable, vector_5.io.resp.bits.data, _T_34) @[Mux.scala 47:69]
    node _T_36 = mux(vector_4.io.resp.bits.write_enable, vector_4.io.resp.bits.data, _T_35) @[Mux.scala 47:69]
    node _T_37 = mux(vector_3.io.resp.bits.write_enable, vector_3.io.resp.bits.data, _T_36) @[Mux.scala 47:69]
    node _T_38 = mux(vector_2.io.resp.bits.write_enable, vector_2.io.resp.bits.data, _T_37) @[Mux.scala 47:69]
    node _T_39 = mux(vector_1.io.resp.bits.write_enable, vector_1.io.resp.bits.data, _T_38) @[Mux.scala 47:69]
    node _T_40 = mux(vector_0.io.resp.bits.write_enable, vector_0.io.resp.bits.data, _T_39) @[Mux.scala 47:69]
    io.resp.bits.data <= _T_40 @[AllToAllMesh.scala 156:23]
    vector_0.io.left.in.valid <= UInt<1>("h0") @[AllToAllMesh.scala 164:40]
    vector_0.io.left.in.bits.data <= UInt<64>("h0") @[AllToAllMesh.scala 165:44]
    vector_0.io.left.in.bits.x_0 <= UInt<1>("h0") @[AllToAllMesh.scala 166:43]
    vector_0.io.left.in.bits.y_0 <= UInt<1>("h0") @[AllToAllMesh.scala 167:43]
    vector_0.io.left.in.bits.x_dest <= UInt<1>("h0") @[AllToAllMesh.scala 168:46]
    vector_0.io.left.in.bits.y_dest <= UInt<1>("h0") @[AllToAllMesh.scala 169:46]
    vector_0.io.left.out.ready <= UInt<1>("h0") @[AllToAllMesh.scala 170:41]
    vector_0.io.right.in.valid <= vector_1.io.left.out.valid @[AllToAllMesh.scala 172:41]
    vector_0.io.right.in.bits.data <= vector_1.io.left.out.bits.data @[AllToAllMesh.scala 173:45]
    vector_0.io.right.in.bits.x_0 <= vector_1.io.left.out.bits.x_0 @[AllToAllMesh.scala 174:44]
    vector_0.io.right.in.bits.y_0 <= vector_1.io.left.out.bits.y_0 @[AllToAllMesh.scala 175:44]
    vector_0.io.right.in.bits.x_dest <= vector_1.io.left.out.bits.x_dest @[AllToAllMesh.scala 176:47]
    vector_0.io.right.in.bits.y_dest <= vector_1.io.left.out.bits.y_dest @[AllToAllMesh.scala 177:47]
    vector_0.io.right.out.ready <= vector_1.io.left.in.ready @[AllToAllMesh.scala 178:42]
    vector_0.io.up.in.valid <= UInt<1>("h0") @[AllToAllMesh.scala 180:38]
    vector_0.io.up.in.bits.data <= UInt<64>("h0") @[AllToAllMesh.scala 181:42]
    vector_0.io.up.in.bits.x_0 <= UInt<1>("h0") @[AllToAllMesh.scala 182:41]
    vector_0.io.up.in.bits.y_0 <= UInt<1>("h0") @[AllToAllMesh.scala 183:41]
    vector_0.io.up.in.bits.x_dest <= UInt<1>("h0") @[AllToAllMesh.scala 184:44]
    vector_0.io.up.in.bits.y_dest <= UInt<1>("h0") @[AllToAllMesh.scala 185:44]
    vector_0.io.up.out.ready <= UInt<1>("h0") @[AllToAllMesh.scala 186:39]
    vector_0.io.bottom.in.valid <= vector_3.io.up.out.valid @[AllToAllMesh.scala 188:42]
    vector_0.io.bottom.in.bits.data <= vector_3.io.up.out.bits.data @[AllToAllMesh.scala 189:46]
    vector_0.io.bottom.in.bits.x_0 <= vector_3.io.up.out.bits.x_0 @[AllToAllMesh.scala 190:45]
    vector_0.io.bottom.in.bits.y_0 <= vector_3.io.up.out.bits.y_0 @[AllToAllMesh.scala 191:45]
    vector_0.io.bottom.in.bits.x_dest <= vector_3.io.up.out.bits.x_dest @[AllToAllMesh.scala 192:48]
    vector_0.io.bottom.in.bits.y_dest <= vector_3.io.up.out.bits.y_dest @[AllToAllMesh.scala 193:48]
    vector_0.io.bottom.out.ready <= vector_3.io.up.in.ready @[AllToAllMesh.scala 194:43]
    vector_1.io.left.in.valid <= vector_0.io.right.out.valid @[AllToAllMesh.scala 299:40]
    vector_1.io.left.in.bits.data <= vector_0.io.right.out.bits.data @[AllToAllMesh.scala 300:44]
    vector_1.io.left.in.bits.x_0 <= vector_0.io.right.out.bits.x_0 @[AllToAllMesh.scala 301:43]
    vector_1.io.left.in.bits.y_0 <= vector_0.io.right.out.bits.y_0 @[AllToAllMesh.scala 302:43]
    vector_1.io.left.in.bits.x_dest <= vector_0.io.right.out.bits.x_dest @[AllToAllMesh.scala 303:46]
    vector_1.io.left.in.bits.y_dest <= vector_0.io.right.out.bits.y_dest @[AllToAllMesh.scala 304:46]
    vector_1.io.left.out.ready <= vector_0.io.right.in.ready @[AllToAllMesh.scala 305:41]
    vector_1.io.right.in.valid <= vector_2.io.left.out.valid @[AllToAllMesh.scala 307:41]
    vector_1.io.right.in.bits.data <= vector_2.io.left.out.bits.data @[AllToAllMesh.scala 308:45]
    vector_1.io.right.in.bits.x_0 <= vector_2.io.left.out.bits.x_0 @[AllToAllMesh.scala 309:44]
    vector_1.io.right.in.bits.y_0 <= vector_2.io.left.out.bits.y_0 @[AllToAllMesh.scala 310:44]
    vector_1.io.right.in.bits.x_dest <= vector_2.io.left.out.bits.x_dest @[AllToAllMesh.scala 311:47]
    vector_1.io.right.in.bits.y_dest <= vector_2.io.left.out.bits.y_dest @[AllToAllMesh.scala 312:47]
    vector_1.io.right.out.ready <= vector_2.io.left.in.ready @[AllToAllMesh.scala 313:42]
    vector_1.io.up.in.valid <= UInt<1>("h0") @[AllToAllMesh.scala 315:38]
    vector_1.io.up.in.bits.data <= UInt<64>("h0") @[AllToAllMesh.scala 316:42]
    vector_1.io.up.in.bits.x_0 <= UInt<1>("h0") @[AllToAllMesh.scala 317:41]
    vector_1.io.up.in.bits.y_0 <= UInt<1>("h0") @[AllToAllMesh.scala 318:41]
    vector_1.io.up.in.bits.x_dest <= UInt<1>("h0") @[AllToAllMesh.scala 319:44]
    vector_1.io.up.in.bits.y_dest <= UInt<1>("h0") @[AllToAllMesh.scala 320:44]
    vector_1.io.up.out.ready <= UInt<1>("h0") @[AllToAllMesh.scala 321:39]
    vector_1.io.bottom.in.valid <= vector_4.io.up.out.valid @[AllToAllMesh.scala 323:42]
    vector_1.io.bottom.in.bits.data <= vector_4.io.up.out.bits.data @[AllToAllMesh.scala 324:46]
    vector_1.io.bottom.in.bits.x_0 <= vector_4.io.up.out.bits.x_0 @[AllToAllMesh.scala 325:45]
    vector_1.io.bottom.in.bits.y_0 <= vector_4.io.up.out.bits.y_0 @[AllToAllMesh.scala 326:45]
    vector_1.io.bottom.in.bits.x_dest <= vector_4.io.up.out.bits.x_dest @[AllToAllMesh.scala 327:48]
    vector_1.io.bottom.in.bits.y_dest <= vector_4.io.up.out.bits.y_dest @[AllToAllMesh.scala 328:48]
    vector_1.io.bottom.out.ready <= vector_4.io.up.in.ready @[AllToAllMesh.scala 329:43]
    vector_2.io.left.in.valid <= vector_1.io.right.out.valid @[AllToAllMesh.scala 198:40]
    vector_2.io.left.in.bits.data <= vector_1.io.right.out.bits.data @[AllToAllMesh.scala 199:44]
    vector_2.io.left.in.bits.x_0 <= vector_1.io.right.out.bits.x_0 @[AllToAllMesh.scala 200:43]
    vector_2.io.left.in.bits.y_0 <= vector_1.io.right.out.bits.y_0 @[AllToAllMesh.scala 201:43]
    vector_2.io.left.in.bits.x_dest <= vector_1.io.right.out.bits.x_dest @[AllToAllMesh.scala 202:46]
    vector_2.io.left.in.bits.y_dest <= vector_1.io.right.out.bits.y_dest @[AllToAllMesh.scala 203:46]
    vector_2.io.left.out.ready <= vector_1.io.right.in.ready @[AllToAllMesh.scala 204:41]
    vector_2.io.right.in.valid <= UInt<1>("h0") @[AllToAllMesh.scala 206:41]
    vector_2.io.right.in.bits.data <= UInt<64>("h0") @[AllToAllMesh.scala 207:45]
    vector_2.io.right.in.bits.x_0 <= UInt<1>("h0") @[AllToAllMesh.scala 208:44]
    vector_2.io.right.in.bits.y_0 <= UInt<1>("h0") @[AllToAllMesh.scala 209:44]
    vector_2.io.right.in.bits.x_dest <= UInt<1>("h0") @[AllToAllMesh.scala 210:47]
    vector_2.io.right.in.bits.y_dest <= UInt<1>("h0") @[AllToAllMesh.scala 211:47]
    vector_2.io.right.out.ready <= UInt<1>("h0") @[AllToAllMesh.scala 212:42]
    vector_2.io.up.in.valid <= UInt<1>("h0") @[AllToAllMesh.scala 214:38]
    vector_2.io.up.in.bits.data <= UInt<64>("h0") @[AllToAllMesh.scala 215:42]
    vector_2.io.up.in.bits.x_0 <= UInt<1>("h0") @[AllToAllMesh.scala 216:41]
    vector_2.io.up.in.bits.y_0 <= UInt<1>("h0") @[AllToAllMesh.scala 217:41]
    vector_2.io.up.in.bits.x_dest <= UInt<1>("h0") @[AllToAllMesh.scala 218:44]
    vector_2.io.up.in.bits.y_dest <= UInt<1>("h0") @[AllToAllMesh.scala 219:44]
    vector_2.io.up.out.ready <= UInt<1>("h0") @[AllToAllMesh.scala 220:39]
    vector_2.io.bottom.in.valid <= vector_5.io.up.out.valid @[AllToAllMesh.scala 222:42]
    vector_2.io.bottom.in.bits.data <= vector_5.io.up.out.bits.data @[AllToAllMesh.scala 223:46]
    vector_2.io.bottom.in.bits.x_0 <= vector_5.io.up.out.bits.x_0 @[AllToAllMesh.scala 224:45]
    vector_2.io.bottom.in.bits.y_0 <= vector_5.io.up.out.bits.y_0 @[AllToAllMesh.scala 225:45]
    vector_2.io.bottom.in.bits.x_dest <= vector_5.io.up.out.bits.x_dest @[AllToAllMesh.scala 226:48]
    vector_2.io.bottom.in.bits.y_dest <= vector_5.io.up.out.bits.y_dest @[AllToAllMesh.scala 227:48]
    vector_2.io.bottom.out.ready <= vector_5.io.up.in.ready @[AllToAllMesh.scala 228:43]
    vector_3.io.left.in.valid <= UInt<1>("h0") @[AllToAllMesh.scala 365:40]
    vector_3.io.left.in.bits.data <= UInt<64>("h0") @[AllToAllMesh.scala 366:44]
    vector_3.io.left.in.bits.x_0 <= UInt<1>("h0") @[AllToAllMesh.scala 367:43]
    vector_3.io.left.in.bits.y_0 <= UInt<1>("h0") @[AllToAllMesh.scala 368:43]
    vector_3.io.left.in.bits.x_dest <= UInt<1>("h0") @[AllToAllMesh.scala 369:46]
    vector_3.io.left.in.bits.y_dest <= UInt<1>("h0") @[AllToAllMesh.scala 370:46]
    vector_3.io.left.out.ready <= UInt<1>("h0") @[AllToAllMesh.scala 371:41]
    vector_3.io.right.in.valid <= vector_4.io.left.out.valid @[AllToAllMesh.scala 373:41]
    vector_3.io.right.in.bits.data <= vector_4.io.left.out.bits.data @[AllToAllMesh.scala 374:45]
    vector_3.io.right.in.bits.x_0 <= vector_4.io.left.out.bits.x_0 @[AllToAllMesh.scala 375:44]
    vector_3.io.right.in.bits.y_0 <= vector_4.io.left.out.bits.y_0 @[AllToAllMesh.scala 376:44]
    vector_3.io.right.in.bits.x_dest <= vector_4.io.left.out.bits.x_dest @[AllToAllMesh.scala 377:47]
    vector_3.io.right.in.bits.y_dest <= vector_4.io.left.out.bits.y_dest @[AllToAllMesh.scala 378:47]
    vector_3.io.right.out.ready <= vector_4.io.left.in.ready @[AllToAllMesh.scala 379:42]
    vector_3.io.up.in.valid <= vector_0.io.bottom.out.valid @[AllToAllMesh.scala 381:38]
    vector_3.io.up.in.bits.data <= vector_0.io.bottom.out.bits.data @[AllToAllMesh.scala 382:42]
    vector_3.io.up.in.bits.x_0 <= vector_0.io.bottom.out.bits.x_0 @[AllToAllMesh.scala 383:41]
    vector_3.io.up.in.bits.y_0 <= vector_0.io.bottom.out.bits.y_0 @[AllToAllMesh.scala 384:41]
    vector_3.io.up.in.bits.x_dest <= vector_0.io.bottom.out.bits.x_dest @[AllToAllMesh.scala 385:44]
    vector_3.io.up.in.bits.y_dest <= vector_0.io.bottom.out.bits.y_dest @[AllToAllMesh.scala 386:44]
    vector_3.io.up.out.ready <= vector_0.io.bottom.in.ready @[AllToAllMesh.scala 387:39]
    vector_3.io.bottom.in.valid <= vector_6.io.up.out.valid @[AllToAllMesh.scala 389:42]
    vector_3.io.bottom.in.bits.data <= vector_6.io.up.out.bits.data @[AllToAllMesh.scala 390:46]
    vector_3.io.bottom.in.bits.x_0 <= vector_6.io.up.out.bits.x_0 @[AllToAllMesh.scala 391:45]
    vector_3.io.bottom.in.bits.y_0 <= vector_6.io.up.out.bits.y_0 @[AllToAllMesh.scala 392:45]
    vector_3.io.bottom.in.bits.x_dest <= vector_6.io.up.out.bits.x_dest @[AllToAllMesh.scala 393:48]
    vector_3.io.bottom.in.bits.y_dest <= vector_6.io.up.out.bits.y_dest @[AllToAllMesh.scala 394:48]
    vector_3.io.bottom.out.ready <= vector_6.io.up.in.ready @[AllToAllMesh.scala 395:43]
    vector_4.io.left.in.valid <= vector_3.io.right.out.valid @[AllToAllMesh.scala 432:40]
    vector_4.io.left.in.bits.data <= vector_3.io.right.out.bits.data @[AllToAllMesh.scala 433:44]
    vector_4.io.left.in.bits.x_0 <= vector_3.io.right.out.bits.x_0 @[AllToAllMesh.scala 434:43]
    vector_4.io.left.in.bits.y_0 <= vector_3.io.right.out.bits.y_0 @[AllToAllMesh.scala 435:43]
    vector_4.io.left.in.bits.x_dest <= vector_3.io.right.out.bits.x_dest @[AllToAllMesh.scala 436:46]
    vector_4.io.left.in.bits.y_dest <= vector_3.io.right.out.bits.y_dest @[AllToAllMesh.scala 437:46]
    vector_4.io.left.out.ready <= vector_3.io.right.in.ready @[AllToAllMesh.scala 438:41]
    vector_4.io.right.in.valid <= vector_5.io.left.out.valid @[AllToAllMesh.scala 440:41]
    vector_4.io.right.in.bits.data <= vector_5.io.left.out.bits.data @[AllToAllMesh.scala 441:45]
    vector_4.io.right.in.bits.x_0 <= vector_5.io.left.out.bits.x_0 @[AllToAllMesh.scala 442:44]
    vector_4.io.right.in.bits.y_0 <= vector_5.io.left.out.bits.y_0 @[AllToAllMesh.scala 443:44]
    vector_4.io.right.in.bits.x_dest <= vector_5.io.left.out.bits.x_dest @[AllToAllMesh.scala 444:47]
    vector_4.io.right.in.bits.y_dest <= vector_5.io.left.out.bits.y_dest @[AllToAllMesh.scala 445:47]
    vector_4.io.right.out.ready <= vector_5.io.left.in.ready @[AllToAllMesh.scala 446:42]
    vector_4.io.up.in.valid <= vector_1.io.bottom.out.valid @[AllToAllMesh.scala 448:38]
    vector_4.io.up.in.bits.data <= vector_1.io.bottom.out.bits.data @[AllToAllMesh.scala 449:42]
    vector_4.io.up.in.bits.x_0 <= vector_1.io.bottom.out.bits.x_0 @[AllToAllMesh.scala 450:41]
    vector_4.io.up.in.bits.y_0 <= vector_1.io.bottom.out.bits.y_0 @[AllToAllMesh.scala 451:41]
    vector_4.io.up.in.bits.x_dest <= vector_1.io.bottom.out.bits.x_dest @[AllToAllMesh.scala 452:44]
    vector_4.io.up.in.bits.y_dest <= vector_1.io.bottom.out.bits.y_dest @[AllToAllMesh.scala 453:44]
    vector_4.io.up.out.ready <= vector_1.io.bottom.in.ready @[AllToAllMesh.scala 454:39]
    vector_4.io.bottom.in.valid <= vector_7.io.up.out.valid @[AllToAllMesh.scala 456:42]
    vector_4.io.bottom.in.bits.data <= vector_7.io.up.out.bits.data @[AllToAllMesh.scala 457:46]
    vector_4.io.bottom.in.bits.x_0 <= vector_7.io.up.out.bits.x_0 @[AllToAllMesh.scala 458:45]
    vector_4.io.bottom.in.bits.y_0 <= vector_7.io.up.out.bits.y_0 @[AllToAllMesh.scala 459:45]
    vector_4.io.bottom.in.bits.x_dest <= vector_7.io.up.out.bits.x_dest @[AllToAllMesh.scala 460:48]
    vector_4.io.bottom.in.bits.y_dest <= vector_7.io.up.out.bits.y_dest @[AllToAllMesh.scala 461:48]
    vector_4.io.bottom.out.ready <= vector_7.io.up.in.ready @[AllToAllMesh.scala 462:43]
    vector_5.io.left.in.valid <= vector_4.io.right.out.valid @[AllToAllMesh.scala 398:40]
    vector_5.io.left.in.bits.data <= vector_4.io.right.out.bits.data @[AllToAllMesh.scala 399:44]
    vector_5.io.left.in.bits.x_0 <= vector_4.io.right.out.bits.x_0 @[AllToAllMesh.scala 400:43]
    vector_5.io.left.in.bits.y_0 <= vector_4.io.right.out.bits.y_0 @[AllToAllMesh.scala 401:43]
    vector_5.io.left.in.bits.x_dest <= vector_4.io.right.out.bits.x_dest @[AllToAllMesh.scala 402:46]
    vector_5.io.left.in.bits.y_dest <= vector_4.io.right.out.bits.y_dest @[AllToAllMesh.scala 403:46]
    vector_5.io.left.out.ready <= vector_4.io.right.in.ready @[AllToAllMesh.scala 404:41]
    vector_5.io.right.in.valid <= UInt<1>("h0") @[AllToAllMesh.scala 406:41]
    vector_5.io.right.in.bits.data <= UInt<64>("h0") @[AllToAllMesh.scala 407:45]
    vector_5.io.right.in.bits.x_0 <= UInt<1>("h0") @[AllToAllMesh.scala 408:44]
    vector_5.io.right.in.bits.y_0 <= UInt<1>("h0") @[AllToAllMesh.scala 409:44]
    vector_5.io.right.in.bits.x_dest <= UInt<1>("h0") @[AllToAllMesh.scala 410:47]
    vector_5.io.right.in.bits.y_dest <= UInt<1>("h0") @[AllToAllMesh.scala 411:47]
    vector_5.io.right.out.ready <= UInt<1>("h0") @[AllToAllMesh.scala 412:42]
    vector_5.io.up.in.valid <= vector_2.io.bottom.out.valid @[AllToAllMesh.scala 414:38]
    vector_5.io.up.in.bits.data <= vector_2.io.bottom.out.bits.data @[AllToAllMesh.scala 415:42]
    vector_5.io.up.in.bits.x_0 <= vector_2.io.bottom.out.bits.x_0 @[AllToAllMesh.scala 416:41]
    vector_5.io.up.in.bits.y_0 <= vector_2.io.bottom.out.bits.y_0 @[AllToAllMesh.scala 417:41]
    vector_5.io.up.in.bits.x_dest <= vector_2.io.bottom.out.bits.x_dest @[AllToAllMesh.scala 418:44]
    vector_5.io.up.in.bits.y_dest <= vector_2.io.bottom.out.bits.y_dest @[AllToAllMesh.scala 419:44]
    vector_5.io.up.out.ready <= vector_2.io.bottom.in.ready @[AllToAllMesh.scala 420:39]
    vector_5.io.bottom.in.valid <= vector_8.io.up.out.valid @[AllToAllMesh.scala 422:42]
    vector_5.io.bottom.in.bits.data <= vector_8.io.up.out.bits.data @[AllToAllMesh.scala 423:46]
    vector_5.io.bottom.in.bits.x_0 <= vector_8.io.up.out.bits.x_0 @[AllToAllMesh.scala 424:45]
    vector_5.io.bottom.in.bits.y_0 <= vector_8.io.up.out.bits.y_0 @[AllToAllMesh.scala 425:45]
    vector_5.io.bottom.in.bits.x_dest <= vector_8.io.up.out.bits.x_dest @[AllToAllMesh.scala 426:48]
    vector_5.io.bottom.in.bits.y_dest <= vector_8.io.up.out.bits.y_dest @[AllToAllMesh.scala 427:48]
    vector_5.io.bottom.out.ready <= vector_8.io.up.in.ready @[AllToAllMesh.scala 428:43]
    vector_6.io.left.in.valid <= UInt<1>("h0") @[AllToAllMesh.scala 232:40]
    vector_6.io.left.in.bits.data <= UInt<64>("h0") @[AllToAllMesh.scala 233:44]
    vector_6.io.left.in.bits.x_0 <= UInt<1>("h0") @[AllToAllMesh.scala 234:43]
    vector_6.io.left.in.bits.y_0 <= UInt<1>("h0") @[AllToAllMesh.scala 235:43]
    vector_6.io.left.in.bits.x_dest <= UInt<1>("h0") @[AllToAllMesh.scala 236:46]
    vector_6.io.left.in.bits.y_dest <= UInt<1>("h0") @[AllToAllMesh.scala 237:46]
    vector_6.io.left.out.ready <= UInt<1>("h0") @[AllToAllMesh.scala 238:41]
    vector_6.io.right.in.valid <= vector_7.io.left.out.valid @[AllToAllMesh.scala 240:41]
    vector_6.io.right.in.bits.data <= vector_7.io.left.out.bits.data @[AllToAllMesh.scala 241:45]
    vector_6.io.right.in.bits.x_0 <= vector_7.io.left.out.bits.x_0 @[AllToAllMesh.scala 242:44]
    vector_6.io.right.in.bits.y_0 <= vector_7.io.left.out.bits.y_0 @[AllToAllMesh.scala 243:44]
    vector_6.io.right.in.bits.x_dest <= vector_7.io.left.out.bits.x_dest @[AllToAllMesh.scala 244:47]
    vector_6.io.right.in.bits.y_dest <= vector_7.io.left.out.bits.y_dest @[AllToAllMesh.scala 245:47]
    vector_6.io.right.out.ready <= vector_7.io.left.in.ready @[AllToAllMesh.scala 246:42]
    vector_6.io.up.in.valid <= vector_3.io.bottom.out.valid @[AllToAllMesh.scala 248:38]
    vector_6.io.up.in.bits.data <= vector_3.io.bottom.out.bits.data @[AllToAllMesh.scala 249:42]
    vector_6.io.up.in.bits.x_0 <= vector_3.io.bottom.out.bits.x_0 @[AllToAllMesh.scala 250:41]
    vector_6.io.up.in.bits.y_0 <= vector_3.io.bottom.out.bits.y_0 @[AllToAllMesh.scala 251:41]
    vector_6.io.up.in.bits.x_dest <= vector_3.io.bottom.out.bits.x_dest @[AllToAllMesh.scala 252:44]
    vector_6.io.up.in.bits.y_dest <= vector_3.io.bottom.out.bits.y_dest @[AllToAllMesh.scala 253:44]
    vector_6.io.up.out.ready <= vector_3.io.bottom.in.ready @[AllToAllMesh.scala 254:39]
    vector_6.io.bottom.in.valid <= UInt<1>("h0") @[AllToAllMesh.scala 256:42]
    vector_6.io.bottom.in.bits.data <= UInt<64>("h0") @[AllToAllMesh.scala 257:46]
    vector_6.io.bottom.in.bits.x_0 <= UInt<1>("h0") @[AllToAllMesh.scala 258:45]
    vector_6.io.bottom.in.bits.y_0 <= UInt<1>("h0") @[AllToAllMesh.scala 259:45]
    vector_6.io.bottom.in.bits.x_dest <= UInt<1>("h0") @[AllToAllMesh.scala 260:48]
    vector_6.io.bottom.in.bits.y_dest <= UInt<1>("h0") @[AllToAllMesh.scala 261:48]
    vector_6.io.bottom.out.ready <= UInt<1>("h0") @[AllToAllMesh.scala 262:43]
    vector_7.io.left.in.valid <= vector_6.io.right.out.valid @[AllToAllMesh.scala 332:40]
    vector_7.io.left.in.bits.data <= vector_6.io.right.out.bits.data @[AllToAllMesh.scala 333:44]
    vector_7.io.left.in.bits.x_0 <= vector_6.io.right.out.bits.x_0 @[AllToAllMesh.scala 334:43]
    vector_7.io.left.in.bits.y_0 <= vector_6.io.right.out.bits.y_0 @[AllToAllMesh.scala 335:43]
    vector_7.io.left.in.bits.x_dest <= vector_6.io.right.out.bits.x_dest @[AllToAllMesh.scala 336:46]
    vector_7.io.left.in.bits.y_dest <= vector_6.io.right.out.bits.y_dest @[AllToAllMesh.scala 337:46]
    vector_7.io.left.out.ready <= vector_6.io.right.in.ready @[AllToAllMesh.scala 338:41]
    vector_7.io.right.in.valid <= vector_8.io.left.out.valid @[AllToAllMesh.scala 340:41]
    vector_7.io.right.in.bits.data <= vector_8.io.left.out.bits.data @[AllToAllMesh.scala 341:45]
    vector_7.io.right.in.bits.x_0 <= vector_8.io.left.out.bits.x_0 @[AllToAllMesh.scala 342:44]
    vector_7.io.right.in.bits.y_0 <= vector_8.io.left.out.bits.y_0 @[AllToAllMesh.scala 343:44]
    vector_7.io.right.in.bits.x_dest <= vector_8.io.left.out.bits.x_dest @[AllToAllMesh.scala 344:47]
    vector_7.io.right.in.bits.y_dest <= vector_8.io.left.out.bits.y_dest @[AllToAllMesh.scala 345:47]
    vector_7.io.right.out.ready <= vector_8.io.left.in.ready @[AllToAllMesh.scala 346:42]
    vector_7.io.up.in.valid <= vector_4.io.bottom.out.valid @[AllToAllMesh.scala 348:38]
    vector_7.io.up.in.bits.data <= vector_4.io.bottom.out.bits.data @[AllToAllMesh.scala 349:42]
    vector_7.io.up.in.bits.x_0 <= vector_4.io.bottom.out.bits.x_0 @[AllToAllMesh.scala 350:41]
    vector_7.io.up.in.bits.y_0 <= vector_4.io.bottom.out.bits.y_0 @[AllToAllMesh.scala 351:41]
    vector_7.io.up.in.bits.x_dest <= vector_4.io.bottom.out.bits.x_dest @[AllToAllMesh.scala 352:44]
    vector_7.io.up.in.bits.y_dest <= vector_4.io.bottom.out.bits.y_dest @[AllToAllMesh.scala 353:44]
    vector_7.io.up.out.ready <= vector_4.io.bottom.in.ready @[AllToAllMesh.scala 354:39]
    vector_7.io.bottom.in.valid <= UInt<1>("h0") @[AllToAllMesh.scala 356:42]
    vector_7.io.bottom.in.bits.data <= UInt<64>("h0") @[AllToAllMesh.scala 357:46]
    vector_7.io.bottom.in.bits.x_0 <= UInt<1>("h0") @[AllToAllMesh.scala 358:45]
    vector_7.io.bottom.in.bits.y_0 <= UInt<1>("h0") @[AllToAllMesh.scala 359:45]
    vector_7.io.bottom.in.bits.x_dest <= UInt<1>("h0") @[AllToAllMesh.scala 360:48]
    vector_7.io.bottom.in.bits.y_dest <= UInt<1>("h0") @[AllToAllMesh.scala 361:48]
    vector_7.io.bottom.out.ready <= UInt<1>("h0") @[AllToAllMesh.scala 362:43]
    vector_8.io.left.in.valid <= vector_7.io.right.out.valid @[AllToAllMesh.scala 265:40]
    vector_8.io.left.in.bits.data <= vector_7.io.right.out.bits.data @[AllToAllMesh.scala 266:44]
    vector_8.io.left.in.bits.x_0 <= vector_7.io.right.out.bits.x_0 @[AllToAllMesh.scala 267:43]
    vector_8.io.left.in.bits.y_0 <= vector_7.io.right.out.bits.y_0 @[AllToAllMesh.scala 268:43]
    vector_8.io.left.in.bits.x_dest <= vector_7.io.right.out.bits.x_dest @[AllToAllMesh.scala 269:46]
    vector_8.io.left.in.bits.y_dest <= vector_7.io.right.out.bits.y_dest @[AllToAllMesh.scala 270:46]
    vector_8.io.left.out.ready <= vector_7.io.right.in.ready @[AllToAllMesh.scala 271:41]
    vector_8.io.right.in.valid <= UInt<1>("h0") @[AllToAllMesh.scala 273:41]
    vector_8.io.right.in.bits.data <= UInt<64>("h0") @[AllToAllMesh.scala 274:45]
    vector_8.io.right.in.bits.x_0 <= UInt<1>("h0") @[AllToAllMesh.scala 275:44]
    vector_8.io.right.in.bits.y_0 <= UInt<1>("h0") @[AllToAllMesh.scala 276:44]
    vector_8.io.right.in.bits.x_dest <= UInt<1>("h0") @[AllToAllMesh.scala 277:47]
    vector_8.io.right.in.bits.y_dest <= UInt<1>("h0") @[AllToAllMesh.scala 278:47]
    vector_8.io.right.out.ready <= UInt<1>("h0") @[AllToAllMesh.scala 279:42]
    vector_8.io.up.in.valid <= vector_5.io.bottom.out.valid @[AllToAllMesh.scala 281:38]
    vector_8.io.up.in.bits.data <= vector_5.io.bottom.out.bits.data @[AllToAllMesh.scala 282:42]
    vector_8.io.up.in.bits.x_0 <= vector_5.io.bottom.out.bits.x_0 @[AllToAllMesh.scala 283:41]
    vector_8.io.up.in.bits.y_0 <= vector_5.io.bottom.out.bits.y_0 @[AllToAllMesh.scala 284:41]
    vector_8.io.up.in.bits.x_dest <= vector_5.io.bottom.out.bits.x_dest @[AllToAllMesh.scala 285:44]
    vector_8.io.up.in.bits.y_dest <= vector_5.io.bottom.out.bits.y_dest @[AllToAllMesh.scala 286:44]
    vector_8.io.up.out.ready <= vector_5.io.bottom.in.ready @[AllToAllMesh.scala 287:39]
    vector_8.io.bottom.in.valid <= UInt<1>("h0") @[AllToAllMesh.scala 289:42]
    vector_8.io.bottom.in.bits.data <= UInt<64>("h0") @[AllToAllMesh.scala 290:46]
    vector_8.io.bottom.in.bits.x_0 <= UInt<1>("h0") @[AllToAllMesh.scala 291:45]
    vector_8.io.bottom.in.bits.y_0 <= UInt<1>("h0") @[AllToAllMesh.scala 292:45]
    vector_8.io.bottom.in.bits.x_dest <= UInt<1>("h0") @[AllToAllMesh.scala 293:48]
    vector_8.io.bottom.in.bits.y_dest <= UInt<1>("h0") @[AllToAllMesh.scala 294:48]
    vector_8.io.bottom.out.ready <= UInt<1>("h0") @[AllToAllMesh.scala 295:43]

  module AllToAllModule :
    input clock : Clock
    input reset : Reset
    output io : { flip cmd : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>}}, resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { rd : UInt<5>, data : UInt<64>}}, busy : UInt<1>, interrupt : UInt<1>, flip exception : UInt<1>}

    inst controller of AllToAllController @[AllToAllAccelerator.scala 71:26]
    controller.clock <= clock
    controller.reset <= reset
    inst mesh of AllToAllMesh @[AllToAllAccelerator.scala 72:20]
    mesh.clock <= clock
    mesh.reset <= reset
    controller.io.processor.exception <= io.exception @[AllToAllAccelerator.scala 78:6]
    io.interrupt <= controller.io.processor.interrupt @[AllToAllAccelerator.scala 78:6]
    io.busy <= controller.io.processor.busy @[AllToAllAccelerator.scala 78:6]
    io.resp.bits.data <= controller.io.processor.resp.bits.data @[AllToAllAccelerator.scala 78:6]
    io.resp.bits.rd <= controller.io.processor.resp.bits.rd @[AllToAllAccelerator.scala 78:6]
    io.resp.valid <= controller.io.processor.resp.valid @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.resp.ready <= io.resp.ready @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.cmd.bits.rs2 <= io.cmd.bits.rs2 @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.cmd.bits.rs1 <= io.cmd.bits.rs1 @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.cmd.bits.inst.opcode <= io.cmd.bits.inst.opcode @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.cmd.bits.inst.rd <= io.cmd.bits.inst.rd @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.cmd.bits.inst.xs2 <= io.cmd.bits.inst.xs2 @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.cmd.bits.inst.xs1 <= io.cmd.bits.inst.xs1 @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.cmd.bits.inst.xd <= io.cmd.bits.inst.xd @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.cmd.bits.inst.rs1 <= io.cmd.bits.inst.rs1 @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.cmd.bits.inst.rs2 <= io.cmd.bits.inst.rs2 @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.cmd.bits.inst.funct <= io.cmd.bits.inst.funct @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.cmd.valid <= io.cmd.valid @[AllToAllAccelerator.scala 78:6]
    io.cmd.ready <= controller.io.processor.cmd.ready @[AllToAllAccelerator.scala 78:6]
    mesh.io.cmd.valid <= controller.io.mesh.cmd.valid @[AllToAllAccelerator.scala 83:21]
    mesh.io.cmd.bits.load <= controller.io.mesh.cmd.bits.load @[AllToAllAccelerator.scala 84:25]
    mesh.io.cmd.bits.store <= controller.io.mesh.cmd.bits.store @[AllToAllAccelerator.scala 85:26]
    mesh.io.cmd.bits.doAllToAll <= controller.io.mesh.cmd.bits.doAllToAll @[AllToAllAccelerator.scala 86:31]
    mesh.io.cmd.bits.rs1 <= controller.io.mesh.cmd.bits.rs1 @[AllToAllAccelerator.scala 87:24]
    mesh.io.cmd.bits.rs2 <= controller.io.mesh.cmd.bits.rs2 @[AllToAllAccelerator.scala 88:24]
    mesh.io.resp.ready <= controller.io.mesh.resp.ready @[AllToAllAccelerator.scala 89:22]
    controller.io.mesh.cmd.ready <= mesh.io.cmd.ready @[AllToAllAccelerator.scala 92:32]
    controller.io.mesh.resp.valid <= mesh.io.resp.valid @[AllToAllAccelerator.scala 93:33]
    controller.io.mesh.resp.bits.data <= mesh.io.resp.bits.data @[AllToAllAccelerator.scala 94:37]
    controller.io.mesh.busy <= mesh.io.busy @[AllToAllAccelerator.scala 95:27]

  module AllToAll :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip cmd : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>}}, resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { rd : UInt<5>, data : UInt<64>}}, busy : UInt<1>, interrupt : UInt<1>, flip exception : UInt<1>}

    inst aTaModule of AllToAllModule @[AllToAllTest.scala 13:25]
    aTaModule.clock <= clock
    aTaModule.reset <= reset
    aTaModule.io.cmd.valid <= io.cmd.valid @[AllToAllTest.scala 16:26]
    aTaModule.io.cmd.bits.inst.funct <= io.cmd.bits.inst.funct @[AllToAllTest.scala 17:36]
    aTaModule.io.cmd.bits.inst.rs2 <= io.cmd.bits.inst.rs2 @[AllToAllTest.scala 18:34]
    aTaModule.io.cmd.bits.inst.rs1 <= io.cmd.bits.inst.rs1 @[AllToAllTest.scala 19:34]
    aTaModule.io.cmd.bits.inst.xd <= io.cmd.bits.inst.xd @[AllToAllTest.scala 20:33]
    aTaModule.io.cmd.bits.inst.xs1 <= io.cmd.bits.inst.xs1 @[AllToAllTest.scala 21:34]
    aTaModule.io.cmd.bits.inst.xs2 <= io.cmd.bits.inst.xs2 @[AllToAllTest.scala 22:34]
    aTaModule.io.cmd.bits.inst.rd <= io.cmd.bits.inst.rd @[AllToAllTest.scala 23:33]
    aTaModule.io.cmd.bits.inst.opcode <= io.cmd.bits.inst.opcode @[AllToAllTest.scala 24:37]
    aTaModule.io.cmd.bits.rs1 <= io.cmd.bits.rs1 @[AllToAllTest.scala 25:29]
    aTaModule.io.cmd.bits.rs2 <= io.cmd.bits.rs2 @[AllToAllTest.scala 26:29]
    aTaModule.io.resp.ready <= io.resp.ready @[AllToAllTest.scala 27:27]
    io.cmd.ready <= aTaModule.io.cmd.ready @[AllToAllTest.scala 31:16]
    io.resp.valid <= aTaModule.io.resp.valid @[AllToAllTest.scala 32:17]
    io.resp.bits.rd <= aTaModule.io.resp.bits.rd @[AllToAllTest.scala 33:19]
    io.resp.bits.data <= aTaModule.io.resp.bits.data @[AllToAllTest.scala 34:21]
    io.interrupt <= aTaModule.io.interrupt @[AllToAllTest.scala 37:16]
    io.busy <= aTaModule.io.busy @[AllToAllTest.scala 38:11]
    aTaModule.io.exception <= io.exception @[AllToAllTest.scala 41:26]

