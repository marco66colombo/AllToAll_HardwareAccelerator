circuit AllToAll :
  module AllToAllController :
    input clock : Clock
    input reset : Reset
    output io : { processor : { flip cmd : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>}}, resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { rd : UInt<5>, data : UInt<64>}}, busy : UInt<1>, interrupt : UInt<1>, flip exception : UInt<1>}, flip mesh : { cmd : { flip load : UInt<1>, flip store : UInt<1>, flip doAllToAll : UInt<1>, flip rs1 : UInt<64>, flip rs2 : UInt<64>}, resp : { data : UInt<64>}}}

    cmem mem1 : UInt<64> [1] @[AllToAllController.scala 33:17]
    infer mport MPORT = mem1[UInt<1>("h0")], clock @[AllToAllController.scala 34:7]
    MPORT <= UInt<1>("h0") @[AllToAllController.scala 34:13]
    node loadSignal = eq(io.processor.cmd.bits.inst.opcode, UInt<4>("hb")) @[AllToAllController.scala 43:55]
    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[AllToAllController.scala 46:22]
    reg rd_address : UInt<5>, clock with :
      reset => (UInt<1>("h0"), rd_address) @[AllToAllController.scala 47:23]
    node _T = eq(state, UInt<2>("h0")) @[AllToAllController.scala 54:43]
    node _T_1 = mux(_T, io.processor.cmd.bits.inst.rd, rd_address) @[AllToAllController.scala 54:35]
    io.processor.resp.bits.rd <= _T_1 @[AllToAllController.scala 54:29]
    node _T_2 = eq(state, UInt<2>("h0")) @[AllToAllController.scala 56:14]
    when _T_2 : @[AllToAllController.scala 56:23]
      rd_address <= io.processor.cmd.bits.inst.rd @[AllToAllController.scala 57:16]
    node _T_3 = eq(state, UInt<2>("h0")) @[AllToAllController.scala 60:36]
    io.processor.cmd.ready <= _T_3 @[AllToAllController.scala 60:26]
    io.processor.interrupt <= UInt<1>("h0") @[AllToAllController.scala 62:26]
    io.processor.resp.bits.data <= UInt<64>("h0") @[AllToAllController.scala 63:31]
    node _T_4 = eq(state, UInt<2>("h0")) @[AllToAllController.scala 73:14]
    when _T_4 : @[AllToAllController.scala 73:23]
      io.processor.busy <= UInt<1>("h0") @[AllToAllController.scala 75:23]
      io.processor.cmd.ready <= UInt<1>("h1") @[AllToAllController.scala 77:16]
      io.processor.resp.valid <= UInt<1>("h0") @[AllToAllController.scala 79:17]
      io.mesh.cmd.load <= UInt<1>("h0") @[AllToAllController.scala 81:22]
      io.mesh.cmd.store <= UInt<1>("h0") @[AllToAllController.scala 82:23]
      io.mesh.cmd.doAllToAll <= UInt<1>("h0") @[AllToAllController.scala 83:28]
      io.mesh.cmd.rs1 <= UInt<64>("h0") @[AllToAllController.scala 84:21]
      io.mesh.cmd.rs2 <= UInt<64>("h0") @[AllToAllController.scala 85:21]
      when io.processor.cmd.valid : @[AllToAllController.scala 87:23]
        state <= UInt<2>("h1") @[AllToAllController.scala 88:13]
      else :
        when loadSignal : @[AllToAllController.scala 89:27]
          state <= UInt<2>("h2") @[AllToAllController.scala 90:13]
        else :
          state <= UInt<2>("h0") @[AllToAllController.scala 92:13]
    else :
      node _T_5 = eq(state, UInt<2>("h1")) @[AllToAllController.scala 94:20]
      when _T_5 : @[AllToAllController.scala 94:33]
        io.processor.busy <= UInt<1>("h1") @[AllToAllController.scala 96:23]
        io.processor.cmd.ready <= UInt<1>("h0") @[AllToAllController.scala 98:16]
        io.processor.resp.valid <= UInt<1>("h0") @[AllToAllController.scala 100:17]
        io.mesh.cmd.load <= UInt<1>("h0") @[AllToAllController.scala 102:22]
        io.mesh.cmd.store <= UInt<1>("h0") @[AllToAllController.scala 103:23]
        io.mesh.cmd.doAllToAll <= UInt<1>("h0") @[AllToAllController.scala 105:28]
        io.mesh.cmd.rs1 <= UInt<64>("h0") @[AllToAllController.scala 106:21]
        io.mesh.cmd.rs2 <= UInt<64>("h0") @[AllToAllController.scala 107:21]
        when UInt<1>("h1") : @[AllToAllController.scala 109:29]
          state <= UInt<2>("h3") @[AllToAllController.scala 110:15]
        else :
          state <= UInt<2>("h1") @[AllToAllController.scala 112:15]
      else :
        node _T_6 = eq(state, UInt<2>("h3")) @[AllToAllController.scala 114:20]
        when _T_6 : @[AllToAllController.scala 114:38]
          io.processor.busy <= UInt<1>("h1") @[AllToAllController.scala 116:23]
          io.processor.cmd.ready <= UInt<1>("h0") @[AllToAllController.scala 118:16]
          io.processor.resp.valid <= UInt<1>("h1") @[AllToAllController.scala 120:17]
          io.mesh.cmd.load <= UInt<1>("h0") @[AllToAllController.scala 122:22]
          io.mesh.cmd.store <= UInt<1>("h0") @[AllToAllController.scala 123:23]
          io.mesh.cmd.doAllToAll <= UInt<1>("h0") @[AllToAllController.scala 124:28]
          io.mesh.cmd.rs1 <= UInt<64>("h0") @[AllToAllController.scala 125:21]
          io.mesh.cmd.rs2 <= UInt<64>("h0") @[AllToAllController.scala 126:21]
          state <= UInt<2>("h0") @[AllToAllController.scala 129:11]
        else :
          node _T_7 = eq(state, UInt<2>("h2")) @[AllToAllController.scala 130:20]
          when _T_7 : @[AllToAllController.scala 130:29]
            io.processor.busy <= UInt<1>("h1") @[AllToAllController.scala 132:23]
            io.processor.cmd.ready <= UInt<1>("h0") @[AllToAllController.scala 134:16]
            io.processor.resp.valid <= UInt<1>("h0") @[AllToAllController.scala 136:17]
            io.mesh.cmd.load <= UInt<1>("h1") @[AllToAllController.scala 138:22]
            io.mesh.cmd.store <= UInt<1>("h0") @[AllToAllController.scala 139:23]
            io.mesh.cmd.doAllToAll <= UInt<1>("h0") @[AllToAllController.scala 140:28]
            io.mesh.cmd.rs1 <= UInt<64>("h0") @[AllToAllController.scala 141:21]
            io.mesh.cmd.rs2 <= UInt<64>("h0") @[AllToAllController.scala 142:21]
            state <= UInt<2>("h0") @[AllToAllController.scala 144:11]
          else :
            io.processor.busy <= UInt<1>("h0") @[AllToAllController.scala 150:23]
            io.processor.cmd.ready <= UInt<1>("h1") @[AllToAllController.scala 151:16]
            io.processor.resp.valid <= UInt<1>("h0") @[AllToAllController.scala 152:17]
            state <= UInt<2>("h0") @[AllToAllController.scala 153:11]
            io.mesh.cmd.load <= UInt<1>("h0") @[AllToAllController.scala 154:22]
            io.mesh.cmd.store <= UInt<1>("h0") @[AllToAllController.scala 155:23]
            io.mesh.cmd.doAllToAll <= UInt<1>("h0") @[AllToAllController.scala 156:28]
            io.mesh.cmd.rs1 <= UInt<64>("h0") @[AllToAllController.scala 157:21]
            io.mesh.cmd.rs2 <= UInt<64>("h0") @[AllToAllController.scala 158:21]

  module AllToAllPEupLeftCorner :
    input clock : Clock
    input reset : Reset
    output io : { flip load : UInt<1>, flip store : UInt<1>, flip rs1 : UInt<64>, flip rs2 : UInt<64>, data : UInt<64>, left : { out : UInt<64>, flip in : UInt<64>}, right : { out : UInt<64>, flip in : UInt<64>}, up : { out : UInt<64>, flip in : UInt<64>}, bottom : { out : UInt<64>, flip in : UInt<64>}}

    cmem memPE : UInt<64> [9] @[AllToAllPE.scala 103:18]
    reg number_PE : UInt<32>, clock with :
      reset => (UInt<1>("h0"), number_PE) @[AllToAllPE.scala 106:22]
    number_PE <= UInt<32>("h0") @[AllToAllPE.scala 107:13]
    when io.load : @[AllToAllPE.scala 109:16]
      infer mport MPORT = memPE[UInt<1>("h0")], clock @[AllToAllPE.scala 111:12]
      node _T = cat(UInt<32>("h0"), number_PE) @[Cat.scala 30:58]
      MPORT <= _T @[AllToAllPE.scala 111:18]
      infer mport MPORT_1 = memPE[UInt<1>("h1")], clock @[AllToAllPE.scala 111:12]
      node _T_1 = cat(UInt<32>("h1"), number_PE) @[Cat.scala 30:58]
      MPORT_1 <= _T_1 @[AllToAllPE.scala 111:18]
      infer mport MPORT_2 = memPE[UInt<2>("h2")], clock @[AllToAllPE.scala 111:12]
      node _T_2 = cat(UInt<32>("h2"), number_PE) @[Cat.scala 30:58]
      MPORT_2 <= _T_2 @[AllToAllPE.scala 111:18]
      infer mport MPORT_3 = memPE[UInt<2>("h3")], clock @[AllToAllPE.scala 111:12]
      node _T_3 = cat(UInt<32>("h3"), number_PE) @[Cat.scala 30:58]
      MPORT_3 <= _T_3 @[AllToAllPE.scala 111:18]
      infer mport MPORT_4 = memPE[UInt<3>("h4")], clock @[AllToAllPE.scala 111:12]
      node _T_4 = cat(UInt<32>("h4"), number_PE) @[Cat.scala 30:58]
      MPORT_4 <= _T_4 @[AllToAllPE.scala 111:18]
      infer mport MPORT_5 = memPE[UInt<3>("h5")], clock @[AllToAllPE.scala 111:12]
      node _T_5 = cat(UInt<32>("h5"), number_PE) @[Cat.scala 30:58]
      MPORT_5 <= _T_5 @[AllToAllPE.scala 111:18]
      infer mport MPORT_6 = memPE[UInt<3>("h6")], clock @[AllToAllPE.scala 111:12]
      node _T_6 = cat(UInt<32>("h6"), number_PE) @[Cat.scala 30:58]
      MPORT_6 <= _T_6 @[AllToAllPE.scala 111:18]
      infer mport MPORT_7 = memPE[UInt<3>("h7")], clock @[AllToAllPE.scala 111:12]
      node _T_7 = cat(UInt<32>("h7"), number_PE) @[Cat.scala 30:58]
      MPORT_7 <= _T_7 @[AllToAllPE.scala 111:18]
      infer mport MPORT_8 = memPE[UInt<4>("h8")], clock @[AllToAllPE.scala 111:12]
      node _T_8 = cat(UInt<32>("h8"), number_PE) @[Cat.scala 30:58]
      MPORT_8 <= _T_8 @[AllToAllPE.scala 111:18]
    io.left.out <= UInt<64>("h0") @[AllToAllPE.scala 156:15]
    io.up.out <= UInt<64>("h0") @[AllToAllPE.scala 158:13]
    io.right.out <= UInt<64>("h0") @[AllToAllPE.scala 160:16]
    io.bottom.out <= UInt<64>("h0") @[AllToAllPE.scala 161:17]
    io.data <= UInt<64>("h0") @[AllToAllPE.scala 163:11]

  module AllToAllPEup :
    input clock : Clock
    input reset : Reset
    output io : { flip load : UInt<1>, flip store : UInt<1>, flip rs1 : UInt<64>, flip rs2 : UInt<64>, data : UInt<64>, left : { out : UInt<64>, flip in : UInt<64>}, right : { out : UInt<64>, flip in : UInt<64>}, up : { out : UInt<64>, flip in : UInt<64>}, bottom : { out : UInt<64>, flip in : UInt<64>}}

    cmem memPE : UInt<64> [9] @[AllToAllPE.scala 103:18]
    reg number_PE : UInt<32>, clock with :
      reset => (UInt<1>("h0"), number_PE) @[AllToAllPE.scala 106:22]
    number_PE <= UInt<32>("h1") @[AllToAllPE.scala 107:13]
    when io.load : @[AllToAllPE.scala 109:16]
      infer mport MPORT = memPE[UInt<1>("h0")], clock @[AllToAllPE.scala 111:12]
      node _T = cat(UInt<32>("h0"), number_PE) @[Cat.scala 30:58]
      MPORT <= _T @[AllToAllPE.scala 111:18]
      infer mport MPORT_1 = memPE[UInt<1>("h1")], clock @[AllToAllPE.scala 111:12]
      node _T_1 = cat(UInt<32>("h1"), number_PE) @[Cat.scala 30:58]
      MPORT_1 <= _T_1 @[AllToAllPE.scala 111:18]
      infer mport MPORT_2 = memPE[UInt<2>("h2")], clock @[AllToAllPE.scala 111:12]
      node _T_2 = cat(UInt<32>("h2"), number_PE) @[Cat.scala 30:58]
      MPORT_2 <= _T_2 @[AllToAllPE.scala 111:18]
      infer mport MPORT_3 = memPE[UInt<2>("h3")], clock @[AllToAllPE.scala 111:12]
      node _T_3 = cat(UInt<32>("h3"), number_PE) @[Cat.scala 30:58]
      MPORT_3 <= _T_3 @[AllToAllPE.scala 111:18]
      infer mport MPORT_4 = memPE[UInt<3>("h4")], clock @[AllToAllPE.scala 111:12]
      node _T_4 = cat(UInt<32>("h4"), number_PE) @[Cat.scala 30:58]
      MPORT_4 <= _T_4 @[AllToAllPE.scala 111:18]
      infer mport MPORT_5 = memPE[UInt<3>("h5")], clock @[AllToAllPE.scala 111:12]
      node _T_5 = cat(UInt<32>("h5"), number_PE) @[Cat.scala 30:58]
      MPORT_5 <= _T_5 @[AllToAllPE.scala 111:18]
      infer mport MPORT_6 = memPE[UInt<3>("h6")], clock @[AllToAllPE.scala 111:12]
      node _T_6 = cat(UInt<32>("h6"), number_PE) @[Cat.scala 30:58]
      MPORT_6 <= _T_6 @[AllToAllPE.scala 111:18]
      infer mport MPORT_7 = memPE[UInt<3>("h7")], clock @[AllToAllPE.scala 111:12]
      node _T_7 = cat(UInt<32>("h7"), number_PE) @[Cat.scala 30:58]
      MPORT_7 <= _T_7 @[AllToAllPE.scala 111:18]
      infer mport MPORT_8 = memPE[UInt<4>("h8")], clock @[AllToAllPE.scala 111:12]
      node _T_8 = cat(UInt<32>("h8"), number_PE) @[Cat.scala 30:58]
      MPORT_8 <= _T_8 @[AllToAllPE.scala 111:18]
    io.up.out <= UInt<64>("h0") @[AllToAllPE.scala 212:13]
    io.left.out <= UInt<64>("h0") @[AllToAllPE.scala 214:15]
    io.right.out <= UInt<64>("h0") @[AllToAllPE.scala 215:16]
    io.bottom.out <= UInt<64>("h0") @[AllToAllPE.scala 216:17]
    io.data <= UInt<64>("h0") @[AllToAllPE.scala 218:11]

  module AllToAllPEupRightCorner :
    input clock : Clock
    input reset : Reset
    output io : { flip load : UInt<1>, flip store : UInt<1>, flip rs1 : UInt<64>, flip rs2 : UInt<64>, data : UInt<64>, left : { out : UInt<64>, flip in : UInt<64>}, right : { out : UInt<64>, flip in : UInt<64>}, up : { out : UInt<64>, flip in : UInt<64>}, bottom : { out : UInt<64>, flip in : UInt<64>}}

    cmem memPE : UInt<64> [9] @[AllToAllPE.scala 103:18]
    reg number_PE : UInt<32>, clock with :
      reset => (UInt<1>("h0"), number_PE) @[AllToAllPE.scala 106:22]
    number_PE <= UInt<32>("h2") @[AllToAllPE.scala 107:13]
    when io.load : @[AllToAllPE.scala 109:16]
      infer mport MPORT = memPE[UInt<1>("h0")], clock @[AllToAllPE.scala 111:12]
      node _T = cat(UInt<32>("h0"), number_PE) @[Cat.scala 30:58]
      MPORT <= _T @[AllToAllPE.scala 111:18]
      infer mport MPORT_1 = memPE[UInt<1>("h1")], clock @[AllToAllPE.scala 111:12]
      node _T_1 = cat(UInt<32>("h1"), number_PE) @[Cat.scala 30:58]
      MPORT_1 <= _T_1 @[AllToAllPE.scala 111:18]
      infer mport MPORT_2 = memPE[UInt<2>("h2")], clock @[AllToAllPE.scala 111:12]
      node _T_2 = cat(UInt<32>("h2"), number_PE) @[Cat.scala 30:58]
      MPORT_2 <= _T_2 @[AllToAllPE.scala 111:18]
      infer mport MPORT_3 = memPE[UInt<2>("h3")], clock @[AllToAllPE.scala 111:12]
      node _T_3 = cat(UInt<32>("h3"), number_PE) @[Cat.scala 30:58]
      MPORT_3 <= _T_3 @[AllToAllPE.scala 111:18]
      infer mport MPORT_4 = memPE[UInt<3>("h4")], clock @[AllToAllPE.scala 111:12]
      node _T_4 = cat(UInt<32>("h4"), number_PE) @[Cat.scala 30:58]
      MPORT_4 <= _T_4 @[AllToAllPE.scala 111:18]
      infer mport MPORT_5 = memPE[UInt<3>("h5")], clock @[AllToAllPE.scala 111:12]
      node _T_5 = cat(UInt<32>("h5"), number_PE) @[Cat.scala 30:58]
      MPORT_5 <= _T_5 @[AllToAllPE.scala 111:18]
      infer mport MPORT_6 = memPE[UInt<3>("h6")], clock @[AllToAllPE.scala 111:12]
      node _T_6 = cat(UInt<32>("h6"), number_PE) @[Cat.scala 30:58]
      MPORT_6 <= _T_6 @[AllToAllPE.scala 111:18]
      infer mport MPORT_7 = memPE[UInt<3>("h7")], clock @[AllToAllPE.scala 111:12]
      node _T_7 = cat(UInt<32>("h7"), number_PE) @[Cat.scala 30:58]
      MPORT_7 <= _T_7 @[AllToAllPE.scala 111:18]
      infer mport MPORT_8 = memPE[UInt<4>("h8")], clock @[AllToAllPE.scala 111:12]
      node _T_8 = cat(UInt<32>("h8"), number_PE) @[Cat.scala 30:58]
      MPORT_8 <= _T_8 @[AllToAllPE.scala 111:18]
    io.right.out <= UInt<64>("h0") @[AllToAllPE.scala 170:16]
    io.up.out <= UInt<64>("h0") @[AllToAllPE.scala 172:13]
    io.left.out <= UInt<64>("h0") @[AllToAllPE.scala 174:15]
    io.bottom.out <= UInt<64>("h0") @[AllToAllPE.scala 175:17]
    io.data <= UInt<64>("h0") @[AllToAllPE.scala 177:11]

  module AllToAllPEleft :
    input clock : Clock
    input reset : Reset
    output io : { flip load : UInt<1>, flip store : UInt<1>, flip rs1 : UInt<64>, flip rs2 : UInt<64>, data : UInt<64>, left : { out : UInt<64>, flip in : UInt<64>}, right : { out : UInt<64>, flip in : UInt<64>}, up : { out : UInt<64>, flip in : UInt<64>}, bottom : { out : UInt<64>, flip in : UInt<64>}}

    cmem memPE : UInt<64> [9] @[AllToAllPE.scala 103:18]
    reg number_PE : UInt<32>, clock with :
      reset => (UInt<1>("h0"), number_PE) @[AllToAllPE.scala 106:22]
    number_PE <= UInt<32>("h3") @[AllToAllPE.scala 107:13]
    when io.load : @[AllToAllPE.scala 109:16]
      infer mport MPORT = memPE[UInt<1>("h0")], clock @[AllToAllPE.scala 111:12]
      node _T = cat(UInt<32>("h0"), number_PE) @[Cat.scala 30:58]
      MPORT <= _T @[AllToAllPE.scala 111:18]
      infer mport MPORT_1 = memPE[UInt<1>("h1")], clock @[AllToAllPE.scala 111:12]
      node _T_1 = cat(UInt<32>("h1"), number_PE) @[Cat.scala 30:58]
      MPORT_1 <= _T_1 @[AllToAllPE.scala 111:18]
      infer mport MPORT_2 = memPE[UInt<2>("h2")], clock @[AllToAllPE.scala 111:12]
      node _T_2 = cat(UInt<32>("h2"), number_PE) @[Cat.scala 30:58]
      MPORT_2 <= _T_2 @[AllToAllPE.scala 111:18]
      infer mport MPORT_3 = memPE[UInt<2>("h3")], clock @[AllToAllPE.scala 111:12]
      node _T_3 = cat(UInt<32>("h3"), number_PE) @[Cat.scala 30:58]
      MPORT_3 <= _T_3 @[AllToAllPE.scala 111:18]
      infer mport MPORT_4 = memPE[UInt<3>("h4")], clock @[AllToAllPE.scala 111:12]
      node _T_4 = cat(UInt<32>("h4"), number_PE) @[Cat.scala 30:58]
      MPORT_4 <= _T_4 @[AllToAllPE.scala 111:18]
      infer mport MPORT_5 = memPE[UInt<3>("h5")], clock @[AllToAllPE.scala 111:12]
      node _T_5 = cat(UInt<32>("h5"), number_PE) @[Cat.scala 30:58]
      MPORT_5 <= _T_5 @[AllToAllPE.scala 111:18]
      infer mport MPORT_6 = memPE[UInt<3>("h6")], clock @[AllToAllPE.scala 111:12]
      node _T_6 = cat(UInt<32>("h6"), number_PE) @[Cat.scala 30:58]
      MPORT_6 <= _T_6 @[AllToAllPE.scala 111:18]
      infer mport MPORT_7 = memPE[UInt<3>("h7")], clock @[AllToAllPE.scala 111:12]
      node _T_7 = cat(UInt<32>("h7"), number_PE) @[Cat.scala 30:58]
      MPORT_7 <= _T_7 @[AllToAllPE.scala 111:18]
      infer mport MPORT_8 = memPE[UInt<4>("h8")], clock @[AllToAllPE.scala 111:12]
      node _T_8 = cat(UInt<32>("h8"), number_PE) @[Cat.scala 30:58]
      MPORT_8 <= _T_8 @[AllToAllPE.scala 111:18]
    io.left.out <= UInt<64>("h0") @[AllToAllPE.scala 237:15]
    io.right.out <= UInt<64>("h0") @[AllToAllPE.scala 239:16]
    io.up.out <= UInt<64>("h0") @[AllToAllPE.scala 240:13]
    io.bottom.out <= UInt<64>("h0") @[AllToAllPE.scala 241:17]
    io.data <= UInt<64>("h0") @[AllToAllPE.scala 243:11]

  module AllToAllPEmiddle :
    input clock : Clock
    input reset : Reset
    output io : { flip load : UInt<1>, flip store : UInt<1>, flip rs1 : UInt<64>, flip rs2 : UInt<64>, data : UInt<64>, left : { out : UInt<64>, flip in : UInt<64>}, right : { out : UInt<64>, flip in : UInt<64>}, up : { out : UInt<64>, flip in : UInt<64>}, bottom : { out : UInt<64>, flip in : UInt<64>}}

    cmem memPE : UInt<64> [9] @[AllToAllPE.scala 103:18]
    reg number_PE : UInt<32>, clock with :
      reset => (UInt<1>("h0"), number_PE) @[AllToAllPE.scala 106:22]
    number_PE <= UInt<32>("h4") @[AllToAllPE.scala 107:13]
    when io.load : @[AllToAllPE.scala 109:16]
      infer mport MPORT = memPE[UInt<1>("h0")], clock @[AllToAllPE.scala 111:12]
      node _T = cat(UInt<32>("h0"), number_PE) @[Cat.scala 30:58]
      MPORT <= _T @[AllToAllPE.scala 111:18]
      infer mport MPORT_1 = memPE[UInt<1>("h1")], clock @[AllToAllPE.scala 111:12]
      node _T_1 = cat(UInt<32>("h1"), number_PE) @[Cat.scala 30:58]
      MPORT_1 <= _T_1 @[AllToAllPE.scala 111:18]
      infer mport MPORT_2 = memPE[UInt<2>("h2")], clock @[AllToAllPE.scala 111:12]
      node _T_2 = cat(UInt<32>("h2"), number_PE) @[Cat.scala 30:58]
      MPORT_2 <= _T_2 @[AllToAllPE.scala 111:18]
      infer mport MPORT_3 = memPE[UInt<2>("h3")], clock @[AllToAllPE.scala 111:12]
      node _T_3 = cat(UInt<32>("h3"), number_PE) @[Cat.scala 30:58]
      MPORT_3 <= _T_3 @[AllToAllPE.scala 111:18]
      infer mport MPORT_4 = memPE[UInt<3>("h4")], clock @[AllToAllPE.scala 111:12]
      node _T_4 = cat(UInt<32>("h4"), number_PE) @[Cat.scala 30:58]
      MPORT_4 <= _T_4 @[AllToAllPE.scala 111:18]
      infer mport MPORT_5 = memPE[UInt<3>("h5")], clock @[AllToAllPE.scala 111:12]
      node _T_5 = cat(UInt<32>("h5"), number_PE) @[Cat.scala 30:58]
      MPORT_5 <= _T_5 @[AllToAllPE.scala 111:18]
      infer mport MPORT_6 = memPE[UInt<3>("h6")], clock @[AllToAllPE.scala 111:12]
      node _T_6 = cat(UInt<32>("h6"), number_PE) @[Cat.scala 30:58]
      MPORT_6 <= _T_6 @[AllToAllPE.scala 111:18]
      infer mport MPORT_7 = memPE[UInt<3>("h7")], clock @[AllToAllPE.scala 111:12]
      node _T_7 = cat(UInt<32>("h7"), number_PE) @[Cat.scala 30:58]
      MPORT_7 <= _T_7 @[AllToAllPE.scala 111:18]
      infer mport MPORT_8 = memPE[UInt<4>("h8")], clock @[AllToAllPE.scala 111:12]
      node _T_8 = cat(UInt<32>("h8"), number_PE) @[Cat.scala 30:58]
      MPORT_8 <= _T_8 @[AllToAllPE.scala 111:18]
    io.left.out <= UInt<64>("h0") @[AllToAllPE.scala 260:15]
    io.right.out <= UInt<64>("h0") @[AllToAllPE.scala 261:16]
    io.up.out <= UInt<64>("h0") @[AllToAllPE.scala 262:13]
    io.bottom.out <= UInt<64>("h0") @[AllToAllPE.scala 263:17]
    io.data <= UInt<64>("h0") @[AllToAllPE.scala 265:11]

  module AllToAllPEright :
    input clock : Clock
    input reset : Reset
    output io : { flip load : UInt<1>, flip store : UInt<1>, flip rs1 : UInt<64>, flip rs2 : UInt<64>, data : UInt<64>, left : { out : UInt<64>, flip in : UInt<64>}, right : { out : UInt<64>, flip in : UInt<64>}, up : { out : UInt<64>, flip in : UInt<64>}, bottom : { out : UInt<64>, flip in : UInt<64>}}

    cmem memPE : UInt<64> [9] @[AllToAllPE.scala 103:18]
    reg number_PE : UInt<32>, clock with :
      reset => (UInt<1>("h0"), number_PE) @[AllToAllPE.scala 106:22]
    number_PE <= UInt<32>("h5") @[AllToAllPE.scala 107:13]
    when io.load : @[AllToAllPE.scala 109:16]
      infer mport MPORT = memPE[UInt<1>("h0")], clock @[AllToAllPE.scala 111:12]
      node _T = cat(UInt<32>("h0"), number_PE) @[Cat.scala 30:58]
      MPORT <= _T @[AllToAllPE.scala 111:18]
      infer mport MPORT_1 = memPE[UInt<1>("h1")], clock @[AllToAllPE.scala 111:12]
      node _T_1 = cat(UInt<32>("h1"), number_PE) @[Cat.scala 30:58]
      MPORT_1 <= _T_1 @[AllToAllPE.scala 111:18]
      infer mport MPORT_2 = memPE[UInt<2>("h2")], clock @[AllToAllPE.scala 111:12]
      node _T_2 = cat(UInt<32>("h2"), number_PE) @[Cat.scala 30:58]
      MPORT_2 <= _T_2 @[AllToAllPE.scala 111:18]
      infer mport MPORT_3 = memPE[UInt<2>("h3")], clock @[AllToAllPE.scala 111:12]
      node _T_3 = cat(UInt<32>("h3"), number_PE) @[Cat.scala 30:58]
      MPORT_3 <= _T_3 @[AllToAllPE.scala 111:18]
      infer mport MPORT_4 = memPE[UInt<3>("h4")], clock @[AllToAllPE.scala 111:12]
      node _T_4 = cat(UInt<32>("h4"), number_PE) @[Cat.scala 30:58]
      MPORT_4 <= _T_4 @[AllToAllPE.scala 111:18]
      infer mport MPORT_5 = memPE[UInt<3>("h5")], clock @[AllToAllPE.scala 111:12]
      node _T_5 = cat(UInt<32>("h5"), number_PE) @[Cat.scala 30:58]
      MPORT_5 <= _T_5 @[AllToAllPE.scala 111:18]
      infer mport MPORT_6 = memPE[UInt<3>("h6")], clock @[AllToAllPE.scala 111:12]
      node _T_6 = cat(UInt<32>("h6"), number_PE) @[Cat.scala 30:58]
      MPORT_6 <= _T_6 @[AllToAllPE.scala 111:18]
      infer mport MPORT_7 = memPE[UInt<3>("h7")], clock @[AllToAllPE.scala 111:12]
      node _T_7 = cat(UInt<32>("h7"), number_PE) @[Cat.scala 30:58]
      MPORT_7 <= _T_7 @[AllToAllPE.scala 111:18]
      infer mport MPORT_8 = memPE[UInt<4>("h8")], clock @[AllToAllPE.scala 111:12]
      node _T_8 = cat(UInt<32>("h8"), number_PE) @[Cat.scala 30:58]
      MPORT_8 <= _T_8 @[AllToAllPE.scala 111:18]
    io.right.out <= UInt<64>("h0") @[AllToAllPE.scala 249:16]
    io.left.out <= UInt<64>("h0") @[AllToAllPE.scala 251:15]
    io.up.out <= UInt<64>("h0") @[AllToAllPE.scala 252:13]
    io.bottom.out <= UInt<64>("h0") @[AllToAllPE.scala 253:17]
    io.data <= UInt<64>("h0") @[AllToAllPE.scala 255:11]

  module AllToAllPEbottomLeftCorner :
    input clock : Clock
    input reset : Reset
    output io : { flip load : UInt<1>, flip store : UInt<1>, flip rs1 : UInt<64>, flip rs2 : UInt<64>, data : UInt<64>, left : { out : UInt<64>, flip in : UInt<64>}, right : { out : UInt<64>, flip in : UInt<64>}, up : { out : UInt<64>, flip in : UInt<64>}, bottom : { out : UInt<64>, flip in : UInt<64>}}

    cmem memPE : UInt<64> [9] @[AllToAllPE.scala 103:18]
    reg number_PE : UInt<32>, clock with :
      reset => (UInt<1>("h0"), number_PE) @[AllToAllPE.scala 106:22]
    number_PE <= UInt<32>("h6") @[AllToAllPE.scala 107:13]
    when io.load : @[AllToAllPE.scala 109:16]
      infer mport MPORT = memPE[UInt<1>("h0")], clock @[AllToAllPE.scala 111:12]
      node _T = cat(UInt<32>("h0"), number_PE) @[Cat.scala 30:58]
      MPORT <= _T @[AllToAllPE.scala 111:18]
      infer mport MPORT_1 = memPE[UInt<1>("h1")], clock @[AllToAllPE.scala 111:12]
      node _T_1 = cat(UInt<32>("h1"), number_PE) @[Cat.scala 30:58]
      MPORT_1 <= _T_1 @[AllToAllPE.scala 111:18]
      infer mport MPORT_2 = memPE[UInt<2>("h2")], clock @[AllToAllPE.scala 111:12]
      node _T_2 = cat(UInt<32>("h2"), number_PE) @[Cat.scala 30:58]
      MPORT_2 <= _T_2 @[AllToAllPE.scala 111:18]
      infer mport MPORT_3 = memPE[UInt<2>("h3")], clock @[AllToAllPE.scala 111:12]
      node _T_3 = cat(UInt<32>("h3"), number_PE) @[Cat.scala 30:58]
      MPORT_3 <= _T_3 @[AllToAllPE.scala 111:18]
      infer mport MPORT_4 = memPE[UInt<3>("h4")], clock @[AllToAllPE.scala 111:12]
      node _T_4 = cat(UInt<32>("h4"), number_PE) @[Cat.scala 30:58]
      MPORT_4 <= _T_4 @[AllToAllPE.scala 111:18]
      infer mport MPORT_5 = memPE[UInt<3>("h5")], clock @[AllToAllPE.scala 111:12]
      node _T_5 = cat(UInt<32>("h5"), number_PE) @[Cat.scala 30:58]
      MPORT_5 <= _T_5 @[AllToAllPE.scala 111:18]
      infer mport MPORT_6 = memPE[UInt<3>("h6")], clock @[AllToAllPE.scala 111:12]
      node _T_6 = cat(UInt<32>("h6"), number_PE) @[Cat.scala 30:58]
      MPORT_6 <= _T_6 @[AllToAllPE.scala 111:18]
      infer mport MPORT_7 = memPE[UInt<3>("h7")], clock @[AllToAllPE.scala 111:12]
      node _T_7 = cat(UInt<32>("h7"), number_PE) @[Cat.scala 30:58]
      MPORT_7 <= _T_7 @[AllToAllPE.scala 111:18]
      infer mport MPORT_8 = memPE[UInt<4>("h8")], clock @[AllToAllPE.scala 111:12]
      node _T_8 = cat(UInt<32>("h8"), number_PE) @[Cat.scala 30:58]
      MPORT_8 <= _T_8 @[AllToAllPE.scala 111:18]
    io.left.out <= UInt<64>("h0") @[AllToAllPE.scala 184:15]
    io.bottom.out <= UInt<64>("h0") @[AllToAllPE.scala 186:17]
    io.right.out <= UInt<64>("h0") @[AllToAllPE.scala 189:16]
    io.up.out <= UInt<64>("h0") @[AllToAllPE.scala 190:13]
    io.data <= UInt<64>("h0") @[AllToAllPE.scala 192:11]

  module AllToAllPEbottom :
    input clock : Clock
    input reset : Reset
    output io : { flip load : UInt<1>, flip store : UInt<1>, flip rs1 : UInt<64>, flip rs2 : UInt<64>, data : UInt<64>, left : { out : UInt<64>, flip in : UInt<64>}, right : { out : UInt<64>, flip in : UInt<64>}, up : { out : UInt<64>, flip in : UInt<64>}, bottom : { out : UInt<64>, flip in : UInt<64>}}

    cmem memPE : UInt<64> [9] @[AllToAllPE.scala 103:18]
    reg number_PE : UInt<32>, clock with :
      reset => (UInt<1>("h0"), number_PE) @[AllToAllPE.scala 106:22]
    number_PE <= UInt<32>("h7") @[AllToAllPE.scala 107:13]
    when io.load : @[AllToAllPE.scala 109:16]
      infer mport MPORT = memPE[UInt<1>("h0")], clock @[AllToAllPE.scala 111:12]
      node _T = cat(UInt<32>("h0"), number_PE) @[Cat.scala 30:58]
      MPORT <= _T @[AllToAllPE.scala 111:18]
      infer mport MPORT_1 = memPE[UInt<1>("h1")], clock @[AllToAllPE.scala 111:12]
      node _T_1 = cat(UInt<32>("h1"), number_PE) @[Cat.scala 30:58]
      MPORT_1 <= _T_1 @[AllToAllPE.scala 111:18]
      infer mport MPORT_2 = memPE[UInt<2>("h2")], clock @[AllToAllPE.scala 111:12]
      node _T_2 = cat(UInt<32>("h2"), number_PE) @[Cat.scala 30:58]
      MPORT_2 <= _T_2 @[AllToAllPE.scala 111:18]
      infer mport MPORT_3 = memPE[UInt<2>("h3")], clock @[AllToAllPE.scala 111:12]
      node _T_3 = cat(UInt<32>("h3"), number_PE) @[Cat.scala 30:58]
      MPORT_3 <= _T_3 @[AllToAllPE.scala 111:18]
      infer mport MPORT_4 = memPE[UInt<3>("h4")], clock @[AllToAllPE.scala 111:12]
      node _T_4 = cat(UInt<32>("h4"), number_PE) @[Cat.scala 30:58]
      MPORT_4 <= _T_4 @[AllToAllPE.scala 111:18]
      infer mport MPORT_5 = memPE[UInt<3>("h5")], clock @[AllToAllPE.scala 111:12]
      node _T_5 = cat(UInt<32>("h5"), number_PE) @[Cat.scala 30:58]
      MPORT_5 <= _T_5 @[AllToAllPE.scala 111:18]
      infer mport MPORT_6 = memPE[UInt<3>("h6")], clock @[AllToAllPE.scala 111:12]
      node _T_6 = cat(UInt<32>("h6"), number_PE) @[Cat.scala 30:58]
      MPORT_6 <= _T_6 @[AllToAllPE.scala 111:18]
      infer mport MPORT_7 = memPE[UInt<3>("h7")], clock @[AllToAllPE.scala 111:12]
      node _T_7 = cat(UInt<32>("h7"), number_PE) @[Cat.scala 30:58]
      MPORT_7 <= _T_7 @[AllToAllPE.scala 111:18]
      infer mport MPORT_8 = memPE[UInt<4>("h8")], clock @[AllToAllPE.scala 111:12]
      node _T_8 = cat(UInt<32>("h8"), number_PE) @[Cat.scala 30:58]
      MPORT_8 <= _T_8 @[AllToAllPE.scala 111:18]
    io.bottom.out <= UInt<64>("h0") @[AllToAllPE.scala 224:17]
    io.left.out <= UInt<64>("h0") @[AllToAllPE.scala 226:15]
    io.right.out <= UInt<64>("h0") @[AllToAllPE.scala 227:16]
    io.up.out <= UInt<64>("h0") @[AllToAllPE.scala 228:13]
    io.data <= UInt<64>("h0") @[AllToAllPE.scala 230:11]

  module AllToAllPEbottomRightCorner :
    input clock : Clock
    input reset : Reset
    output io : { flip load : UInt<1>, flip store : UInt<1>, flip rs1 : UInt<64>, flip rs2 : UInt<64>, data : UInt<64>, left : { out : UInt<64>, flip in : UInt<64>}, right : { out : UInt<64>, flip in : UInt<64>}, up : { out : UInt<64>, flip in : UInt<64>}, bottom : { out : UInt<64>, flip in : UInt<64>}}

    cmem memPE : UInt<64> [9] @[AllToAllPE.scala 103:18]
    reg number_PE : UInt<32>, clock with :
      reset => (UInt<1>("h0"), number_PE) @[AllToAllPE.scala 106:22]
    number_PE <= UInt<32>("h8") @[AllToAllPE.scala 107:13]
    when io.load : @[AllToAllPE.scala 109:16]
      infer mport MPORT = memPE[UInt<1>("h0")], clock @[AllToAllPE.scala 111:12]
      node _T = cat(UInt<32>("h0"), number_PE) @[Cat.scala 30:58]
      MPORT <= _T @[AllToAllPE.scala 111:18]
      infer mport MPORT_1 = memPE[UInt<1>("h1")], clock @[AllToAllPE.scala 111:12]
      node _T_1 = cat(UInt<32>("h1"), number_PE) @[Cat.scala 30:58]
      MPORT_1 <= _T_1 @[AllToAllPE.scala 111:18]
      infer mport MPORT_2 = memPE[UInt<2>("h2")], clock @[AllToAllPE.scala 111:12]
      node _T_2 = cat(UInt<32>("h2"), number_PE) @[Cat.scala 30:58]
      MPORT_2 <= _T_2 @[AllToAllPE.scala 111:18]
      infer mport MPORT_3 = memPE[UInt<2>("h3")], clock @[AllToAllPE.scala 111:12]
      node _T_3 = cat(UInt<32>("h3"), number_PE) @[Cat.scala 30:58]
      MPORT_3 <= _T_3 @[AllToAllPE.scala 111:18]
      infer mport MPORT_4 = memPE[UInt<3>("h4")], clock @[AllToAllPE.scala 111:12]
      node _T_4 = cat(UInt<32>("h4"), number_PE) @[Cat.scala 30:58]
      MPORT_4 <= _T_4 @[AllToAllPE.scala 111:18]
      infer mport MPORT_5 = memPE[UInt<3>("h5")], clock @[AllToAllPE.scala 111:12]
      node _T_5 = cat(UInt<32>("h5"), number_PE) @[Cat.scala 30:58]
      MPORT_5 <= _T_5 @[AllToAllPE.scala 111:18]
      infer mport MPORT_6 = memPE[UInt<3>("h6")], clock @[AllToAllPE.scala 111:12]
      node _T_6 = cat(UInt<32>("h6"), number_PE) @[Cat.scala 30:58]
      MPORT_6 <= _T_6 @[AllToAllPE.scala 111:18]
      infer mport MPORT_7 = memPE[UInt<3>("h7")], clock @[AllToAllPE.scala 111:12]
      node _T_7 = cat(UInt<32>("h7"), number_PE) @[Cat.scala 30:58]
      MPORT_7 <= _T_7 @[AllToAllPE.scala 111:18]
      infer mport MPORT_8 = memPE[UInt<4>("h8")], clock @[AllToAllPE.scala 111:12]
      node _T_8 = cat(UInt<32>("h8"), number_PE) @[Cat.scala 30:58]
      MPORT_8 <= _T_8 @[AllToAllPE.scala 111:18]
    io.right.out <= UInt<64>("h0") @[AllToAllPE.scala 198:16]
    io.bottom.out <= UInt<64>("h0") @[AllToAllPE.scala 200:17]
    io.left.out <= UInt<64>("h0") @[AllToAllPE.scala 202:15]
    io.right.out <= UInt<64>("h0") @[AllToAllPE.scala 203:16]
    io.up.out <= UInt<64>("h0") @[AllToAllPE.scala 204:13]
    io.data <= UInt<64>("h0") @[AllToAllPE.scala 206:11]

  module AllToAllMesh :
    input clock : Clock
    input reset : Reset
    output io : { cmd : { flip load : UInt<1>, flip store : UInt<1>, flip doAllToAll : UInt<1>, flip rs1 : UInt<64>, flip rs2 : UInt<64>}, resp : { data : UInt<64>}}

    inst vector_0 of AllToAllPEupLeftCorner @[AllToAllMesh.scala 83:41]
    vector_0.clock <= clock
    vector_0.reset <= reset
    inst vector_1 of AllToAllPEup @[AllToAllMesh.scala 94:41]
    vector_1.clock <= clock
    vector_1.reset <= reset
    inst vector_2 of AllToAllPEupRightCorner @[AllToAllMesh.scala 86:41]
    vector_2.clock <= clock
    vector_2.reset <= reset
    inst vector_3 of AllToAllPEleft @[AllToAllMesh.scala 100:41]
    vector_3.clock <= clock
    vector_3.reset <= reset
    inst vector_4 of AllToAllPEmiddle @[AllToAllMesh.scala 106:41]
    vector_4.clock <= clock
    vector_4.reset <= reset
    inst vector_5 of AllToAllPEright @[AllToAllMesh.scala 103:41]
    vector_5.clock <= clock
    vector_5.reset <= reset
    inst vector_6 of AllToAllPEbottomLeftCorner @[AllToAllMesh.scala 89:41]
    vector_6.clock <= clock
    vector_6.reset <= reset
    inst vector_7 of AllToAllPEbottom @[AllToAllMesh.scala 97:41]
    vector_7.clock <= clock
    vector_7.reset <= reset
    inst vector_8 of AllToAllPEbottomRightCorner @[AllToAllMesh.scala 92:41]
    vector_8.clock <= clock
    vector_8.reset <= reset
    vector_0.io.load <= io.cmd.load @[AllToAllMesh.scala 120:27]
    vector_0.io.store <= io.cmd.store @[AllToAllMesh.scala 121:28]
    vector_0.io.rs1 <= io.cmd.rs1 @[AllToAllMesh.scala 123:26]
    vector_0.io.rs2 <= io.cmd.rs2 @[AllToAllMesh.scala 124:26]
    io.resp.data <= vector_0.io.data @[AllToAllMesh.scala 127:22]
    vector_1.io.load <= io.cmd.load @[AllToAllMesh.scala 120:27]
    vector_1.io.store <= io.cmd.store @[AllToAllMesh.scala 121:28]
    vector_1.io.rs1 <= io.cmd.rs1 @[AllToAllMesh.scala 123:26]
    vector_1.io.rs2 <= io.cmd.rs2 @[AllToAllMesh.scala 124:26]
    io.resp.data <= vector_1.io.data @[AllToAllMesh.scala 127:22]
    vector_2.io.load <= io.cmd.load @[AllToAllMesh.scala 120:27]
    vector_2.io.store <= io.cmd.store @[AllToAllMesh.scala 121:28]
    vector_2.io.rs1 <= io.cmd.rs1 @[AllToAllMesh.scala 123:26]
    vector_2.io.rs2 <= io.cmd.rs2 @[AllToAllMesh.scala 124:26]
    io.resp.data <= vector_2.io.data @[AllToAllMesh.scala 127:22]
    vector_3.io.load <= io.cmd.load @[AllToAllMesh.scala 120:27]
    vector_3.io.store <= io.cmd.store @[AllToAllMesh.scala 121:28]
    vector_3.io.rs1 <= io.cmd.rs1 @[AllToAllMesh.scala 123:26]
    vector_3.io.rs2 <= io.cmd.rs2 @[AllToAllMesh.scala 124:26]
    io.resp.data <= vector_3.io.data @[AllToAllMesh.scala 127:22]
    vector_4.io.load <= io.cmd.load @[AllToAllMesh.scala 120:27]
    vector_4.io.store <= io.cmd.store @[AllToAllMesh.scala 121:28]
    vector_4.io.rs1 <= io.cmd.rs1 @[AllToAllMesh.scala 123:26]
    vector_4.io.rs2 <= io.cmd.rs2 @[AllToAllMesh.scala 124:26]
    io.resp.data <= vector_4.io.data @[AllToAllMesh.scala 127:22]
    vector_5.io.load <= io.cmd.load @[AllToAllMesh.scala 120:27]
    vector_5.io.store <= io.cmd.store @[AllToAllMesh.scala 121:28]
    vector_5.io.rs1 <= io.cmd.rs1 @[AllToAllMesh.scala 123:26]
    vector_5.io.rs2 <= io.cmd.rs2 @[AllToAllMesh.scala 124:26]
    io.resp.data <= vector_5.io.data @[AllToAllMesh.scala 127:22]
    vector_6.io.load <= io.cmd.load @[AllToAllMesh.scala 120:27]
    vector_6.io.store <= io.cmd.store @[AllToAllMesh.scala 121:28]
    vector_6.io.rs1 <= io.cmd.rs1 @[AllToAllMesh.scala 123:26]
    vector_6.io.rs2 <= io.cmd.rs2 @[AllToAllMesh.scala 124:26]
    io.resp.data <= vector_6.io.data @[AllToAllMesh.scala 127:22]
    vector_7.io.load <= io.cmd.load @[AllToAllMesh.scala 120:27]
    vector_7.io.store <= io.cmd.store @[AllToAllMesh.scala 121:28]
    vector_7.io.rs1 <= io.cmd.rs1 @[AllToAllMesh.scala 123:26]
    vector_7.io.rs2 <= io.cmd.rs2 @[AllToAllMesh.scala 124:26]
    io.resp.data <= vector_7.io.data @[AllToAllMesh.scala 127:22]
    vector_8.io.load <= io.cmd.load @[AllToAllMesh.scala 120:27]
    vector_8.io.store <= io.cmd.store @[AllToAllMesh.scala 121:28]
    vector_8.io.rs1 <= io.cmd.rs1 @[AllToAllMesh.scala 123:26]
    vector_8.io.rs2 <= io.cmd.rs2 @[AllToAllMesh.scala 124:26]
    io.resp.data <= vector_8.io.data @[AllToAllMesh.scala 127:22]
    vector_0.io.left.in <= UInt<64>("h0") @[AllToAllMesh.scala 135:34]
    vector_0.io.up.in <= UInt<64>("h0") @[AllToAllMesh.scala 137:32]
    vector_0.io.right.in <= vector_1.io.left.out @[AllToAllMesh.scala 141:35]
    vector_0.io.bottom.in <= vector_3.io.up.out @[AllToAllMesh.scala 143:36]
    vector_1.io.up.in <= UInt<64>("h0") @[AllToAllMesh.scala 187:32]
    vector_1.io.left.in <= vector_0.io.right.out @[AllToAllMesh.scala 190:34]
    vector_1.io.right.in <= vector_2.io.left.out @[AllToAllMesh.scala 192:35]
    vector_1.io.bottom.in <= vector_4.io.up.out @[AllToAllMesh.scala 194:36]
    vector_2.io.right.in <= UInt<64>("h0") @[AllToAllMesh.scala 149:35]
    vector_2.io.up.in <= UInt<64>("h0") @[AllToAllMesh.scala 151:32]
    vector_2.io.left.in <= vector_1.io.right.out @[AllToAllMesh.scala 155:34]
    vector_2.io.bottom.in <= vector_5.io.up.out @[AllToAllMesh.scala 157:36]
    vector_3.io.left.in <= UInt<64>("h0") @[AllToAllMesh.scala 209:34]
    vector_3.io.right.in <= vector_4.io.left.out @[AllToAllMesh.scala 212:35]
    vector_3.io.up.in <= vector_0.io.bottom.out @[AllToAllMesh.scala 214:32]
    vector_3.io.bottom.in <= vector_6.io.up.out @[AllToAllMesh.scala 216:36]
    vector_4.io.left.in <= vector_3.io.right.out @[AllToAllMesh.scala 232:34]
    vector_4.io.right.in <= vector_5.io.left.out @[AllToAllMesh.scala 234:35]
    vector_4.io.up.in <= vector_1.io.bottom.out @[AllToAllMesh.scala 236:32]
    vector_4.io.bottom.in <= vector_7.io.up.out @[AllToAllMesh.scala 238:36]
    vector_5.io.right.in <= UInt<64>("h0") @[AllToAllMesh.scala 220:35]
    vector_5.io.left.in <= vector_4.io.right.out @[AllToAllMesh.scala 223:34]
    vector_5.io.up.in <= vector_2.io.bottom.out @[AllToAllMesh.scala 225:32]
    vector_5.io.bottom.in <= vector_8.io.up.out @[AllToAllMesh.scala 227:36]
    vector_6.io.left.in <= UInt<64>("h0") @[AllToAllMesh.scala 162:34]
    vector_6.io.bottom.in <= UInt<64>("h0") @[AllToAllMesh.scala 164:36]
    vector_6.io.right.in <= vector_7.io.left.out @[AllToAllMesh.scala 168:35]
    vector_6.io.up.in <= vector_3.io.bottom.out @[AllToAllMesh.scala 170:32]
    vector_7.io.bottom.in <= UInt<64>("h0") @[AllToAllMesh.scala 198:36]
    vector_7.io.left.in <= vector_6.io.right.out @[AllToAllMesh.scala 201:34]
    vector_7.io.right.in <= vector_8.io.left.out @[AllToAllMesh.scala 203:35]
    vector_7.io.up.in <= vector_4.io.bottom.out @[AllToAllMesh.scala 205:32]
    vector_8.io.right.in <= UInt<64>("h0") @[AllToAllMesh.scala 175:35]
    vector_8.io.bottom.in <= UInt<64>("h0") @[AllToAllMesh.scala 177:36]
    vector_8.io.left.in <= vector_7.io.right.out @[AllToAllMesh.scala 181:34]
    vector_8.io.up.in <= vector_5.io.bottom.out @[AllToAllMesh.scala 183:32]

  module AllToAllModule :
    input clock : Clock
    input reset : Reset
    output io : { flip cmd : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>}}, resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { rd : UInt<5>, data : UInt<64>}}, busy : UInt<1>, interrupt : UInt<1>, flip exception : UInt<1>}

    inst controller of AllToAllController @[AllToAllAccelerator.scala 71:26]
    controller.clock <= clock
    controller.reset <= reset
    inst mesh of AllToAllMesh @[AllToAllAccelerator.scala 72:20]
    mesh.clock <= clock
    mesh.reset <= reset
    controller.io.processor.exception <= io.exception @[AllToAllAccelerator.scala 78:6]
    io.interrupt <= controller.io.processor.interrupt @[AllToAllAccelerator.scala 78:6]
    io.busy <= controller.io.processor.busy @[AllToAllAccelerator.scala 78:6]
    io.resp.bits.data <= controller.io.processor.resp.bits.data @[AllToAllAccelerator.scala 78:6]
    io.resp.bits.rd <= controller.io.processor.resp.bits.rd @[AllToAllAccelerator.scala 78:6]
    io.resp.valid <= controller.io.processor.resp.valid @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.resp.ready <= io.resp.ready @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.cmd.bits.rs2 <= io.cmd.bits.rs2 @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.cmd.bits.rs1 <= io.cmd.bits.rs1 @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.cmd.bits.inst.opcode <= io.cmd.bits.inst.opcode @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.cmd.bits.inst.rd <= io.cmd.bits.inst.rd @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.cmd.bits.inst.xs2 <= io.cmd.bits.inst.xs2 @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.cmd.bits.inst.xs1 <= io.cmd.bits.inst.xs1 @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.cmd.bits.inst.xd <= io.cmd.bits.inst.xd @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.cmd.bits.inst.rs1 <= io.cmd.bits.inst.rs1 @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.cmd.bits.inst.rs2 <= io.cmd.bits.inst.rs2 @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.cmd.bits.inst.funct <= io.cmd.bits.inst.funct @[AllToAllAccelerator.scala 78:6]
    controller.io.processor.cmd.valid <= io.cmd.valid @[AllToAllAccelerator.scala 78:6]
    io.cmd.ready <= controller.io.processor.cmd.ready @[AllToAllAccelerator.scala 78:6]
    mesh.io.cmd.load <= controller.io.mesh.cmd.load @[AllToAllAccelerator.scala 82:20]
    mesh.io.cmd.store <= controller.io.mesh.cmd.store @[AllToAllAccelerator.scala 83:21]
    mesh.io.cmd.doAllToAll <= controller.io.mesh.cmd.doAllToAll @[AllToAllAccelerator.scala 84:26]
    mesh.io.cmd.rs1 <= controller.io.mesh.cmd.rs1 @[AllToAllAccelerator.scala 85:19]
    mesh.io.cmd.rs2 <= controller.io.mesh.cmd.rs2 @[AllToAllAccelerator.scala 86:19]
    controller.io.mesh.resp.data <= mesh.io.resp.data @[AllToAllAccelerator.scala 87:32]

  module AllToAll :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip cmd : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>}}, resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { rd : UInt<5>, data : UInt<64>}}, busy : UInt<1>, interrupt : UInt<1>, flip exception : UInt<1>}

    inst aTaModule of AllToAllModule @[AllToAllTest.scala 13:25]
    aTaModule.clock <= clock
    aTaModule.reset <= reset
    aTaModule.io.cmd.valid <= io.cmd.valid @[AllToAllTest.scala 16:26]
    aTaModule.io.cmd.bits.inst.funct <= io.cmd.bits.inst.funct @[AllToAllTest.scala 17:36]
    aTaModule.io.cmd.bits.inst.rs2 <= io.cmd.bits.inst.rs2 @[AllToAllTest.scala 18:34]
    aTaModule.io.cmd.bits.inst.rs1 <= io.cmd.bits.inst.rs1 @[AllToAllTest.scala 19:34]
    aTaModule.io.cmd.bits.inst.xd <= io.cmd.bits.inst.xd @[AllToAllTest.scala 20:33]
    aTaModule.io.cmd.bits.inst.xs1 <= io.cmd.bits.inst.xs1 @[AllToAllTest.scala 21:34]
    aTaModule.io.cmd.bits.inst.xs2 <= io.cmd.bits.inst.xs2 @[AllToAllTest.scala 22:34]
    aTaModule.io.cmd.bits.inst.rd <= io.cmd.bits.inst.rd @[AllToAllTest.scala 23:33]
    aTaModule.io.cmd.bits.inst.opcode <= io.cmd.bits.inst.opcode @[AllToAllTest.scala 24:37]
    aTaModule.io.cmd.bits.rs1 <= io.cmd.bits.rs1 @[AllToAllTest.scala 25:29]
    aTaModule.io.cmd.bits.rs2 <= io.cmd.bits.rs2 @[AllToAllTest.scala 26:29]
    aTaModule.io.resp.ready <= io.resp.ready @[AllToAllTest.scala 27:27]
    io.cmd.ready <= aTaModule.io.cmd.ready @[AllToAllTest.scala 31:16]
    io.resp.valid <= aTaModule.io.resp.valid @[AllToAllTest.scala 32:17]
    io.resp.bits.rd <= aTaModule.io.resp.bits.rd @[AllToAllTest.scala 33:19]
    io.resp.bits.data <= aTaModule.io.resp.bits.data @[AllToAllTest.scala 34:21]
    io.interrupt <= aTaModule.io.interrupt @[AllToAllTest.scala 37:16]
    io.busy <= aTaModule.io.busy @[AllToAllTest.scala 38:11]
    aTaModule.io.exception <= io.exception @[AllToAllTest.scala 41:26]

