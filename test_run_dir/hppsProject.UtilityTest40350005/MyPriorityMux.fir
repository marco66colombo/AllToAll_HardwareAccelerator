circuit MyPriorityMux :
  module MyPriorityMux :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip valid : UInt<1>[4], flip in_bits : { data : UInt<64>, x_0 : UInt<3>, y_0 : UInt<3>, x_dest : UInt<3>, y_dest : UInt<3>}[4], out_valid : UInt<1>, out_val : { bits : { data : UInt<64>, x_0 : UInt<3>, y_0 : UInt<3>, x_dest : UInt<3>, y_dest : UInt<3>}, selected : UInt<4>}}

    wire first : { bits : { data : UInt<64>, x_0 : UInt<3>, y_0 : UInt<3>, x_dest : UInt<3>, y_dest : UInt<3>}, selected : UInt<4>} @[Utility.scala 43:19]
    wire myseq2_1 : { bits : { data : UInt<64>, x_0 : UInt<3>, y_0 : UInt<3>, x_dest : UInt<3>, y_dest : UInt<3>}, selected : UInt<4>} @[Utility.scala 44:20]
    wire myseq2_2 : { bits : { data : UInt<64>, x_0 : UInt<3>, y_0 : UInt<3>, x_dest : UInt<3>, y_dest : UInt<3>}, selected : UInt<4>} @[Utility.scala 45:19]
    wire fourth : { bits : { data : UInt<64>, x_0 : UInt<3>, y_0 : UInt<3>, x_dest : UInt<3>, y_dest : UInt<3>}, selected : UInt<4>} @[Utility.scala 46:20]
    wire myseq2_4 : { bits : { data : UInt<64>, x_0 : UInt<3>, y_0 : UInt<3>, x_dest : UInt<3>, y_dest : UInt<3>}, selected : UInt<4>} @[Utility.scala 47:28]
    first.bits.y_dest <= io.in_bits[0].y_dest @[Utility.scala 49:14]
    first.bits.x_dest <= io.in_bits[0].x_dest @[Utility.scala 49:14]
    first.bits.y_0 <= io.in_bits[0].y_0 @[Utility.scala 49:14]
    first.bits.x_0 <= io.in_bits[0].x_0 @[Utility.scala 49:14]
    first.bits.data <= io.in_bits[0].data @[Utility.scala 49:14]
    myseq2_1.bits.y_dest <= io.in_bits[1].y_dest @[Utility.scala 50:15]
    myseq2_1.bits.x_dest <= io.in_bits[1].x_dest @[Utility.scala 50:15]
    myseq2_1.bits.y_0 <= io.in_bits[1].y_0 @[Utility.scala 50:15]
    myseq2_1.bits.x_0 <= io.in_bits[1].x_0 @[Utility.scala 50:15]
    myseq2_1.bits.data <= io.in_bits[1].data @[Utility.scala 50:15]
    myseq2_2.bits.y_dest <= io.in_bits[2].y_dest @[Utility.scala 51:14]
    myseq2_2.bits.x_dest <= io.in_bits[2].x_dest @[Utility.scala 51:14]
    myseq2_2.bits.y_0 <= io.in_bits[2].y_0 @[Utility.scala 51:14]
    myseq2_2.bits.x_0 <= io.in_bits[2].x_0 @[Utility.scala 51:14]
    myseq2_2.bits.data <= io.in_bits[2].data @[Utility.scala 51:14]
    fourth.bits.y_dest <= io.in_bits[3].y_dest @[Utility.scala 52:15]
    fourth.bits.x_dest <= io.in_bits[3].x_dest @[Utility.scala 52:15]
    fourth.bits.y_0 <= io.in_bits[3].y_0 @[Utility.scala 52:15]
    fourth.bits.x_0 <= io.in_bits[3].x_0 @[Utility.scala 52:15]
    fourth.bits.data <= io.in_bits[3].data @[Utility.scala 52:15]
    myseq2_4.bits.data <= UInt<1>("h0") @[Utility.scala 54:28]
    myseq2_4.bits.x_0 <= UInt<1>("h0") @[Utility.scala 55:27]
    myseq2_4.bits.y_0 <= UInt<1>("h0") @[Utility.scala 56:27]
    myseq2_4.bits.x_dest <= UInt<1>("h0") @[Utility.scala 57:30]
    myseq2_4.bits.y_dest <= UInt<1>("h0") @[Utility.scala 58:30]
    first.selected <= UInt<1>("h1") @[Utility.scala 61:18]
    myseq2_1.selected <= UInt<2>("h2") @[Utility.scala 62:19]
    myseq2_2.selected <= UInt<3>("h4") @[Utility.scala 63:18]
    fourth.selected <= UInt<4>("h8") @[Utility.scala 64:19]
    myseq2_4.selected <= UInt<1>("h0") @[Utility.scala 65:27]
    node _T = mux(io.valid[3], fourth, myseq2_4) @[Mux.scala 47:69]
    node _T_1 = mux(io.valid[2], myseq2_2, _T) @[Mux.scala 47:69]
    node _T_2 = mux(io.valid[1], myseq2_1, _T_1) @[Mux.scala 47:69]
    node mux1 = mux(io.valid[0], first, _T_2) @[Mux.scala 47:69]
    io.out_val.selected <= mux1.selected @[Utility.scala 75:14]
    io.out_val.bits.y_dest <= mux1.bits.y_dest @[Utility.scala 75:14]
    io.out_val.bits.x_dest <= mux1.bits.x_dest @[Utility.scala 75:14]
    io.out_val.bits.y_0 <= mux1.bits.y_0 @[Utility.scala 75:14]
    io.out_val.bits.x_0 <= mux1.bits.x_0 @[Utility.scala 75:14]
    io.out_val.bits.data <= mux1.bits.data @[Utility.scala 75:14]
    node _T_3 = eq(io.valid[0], UInt<1>("h0")) @[Utility.scala 77:18]
    node _T_4 = eq(io.valid[1], UInt<1>("h0")) @[Utility.scala 77:34]
    node _T_5 = and(_T_3, _T_4) @[Utility.scala 77:31]
    node _T_6 = eq(io.valid[2], UInt<1>("h0")) @[Utility.scala 77:50]
    node _T_7 = and(_T_5, _T_6) @[Utility.scala 77:47]
    node _T_8 = eq(io.valid[3], UInt<1>("h0")) @[Utility.scala 77:66]
    node no_valid = and(_T_7, _T_8) @[Utility.scala 77:63]
    node _T_9 = mux(no_valid, UInt<1>("h0"), UInt<1>("h1")) @[Utility.scala 78:22]
    io.out_valid <= _T_9 @[Utility.scala 78:16]

