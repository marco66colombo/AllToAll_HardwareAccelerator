circuit AllToAllPE :
  module IndexCalculatorV1 :
    input clock : Clock
    input reset : Reset
    output io : { flip reset : UInt<1>, flip enable : UInt<1>, flip dim_N : UInt<16>, index0 : UInt<32>, index1 : UInt<32>, index2 : UInt<32>, index3 : UInt<32>, valid0 : UInt<1>, valid1 : UInt<1>, valid2 : UInt<1>, valid3 : UInt<1>, x_dest_0 : UInt<2>, x_dest_1 : UInt<2>, x_dest_2 : UInt<2>, x_dest_3 : UInt<2>, y_dest_0 : UInt<2>, y_dest_1 : UInt<2>, y_dest_2 : UInt<2>, y_dest_3 : UInt<2>, pos_0 : UInt<16>, pos_1 : UInt<16>, pos_2 : UInt<16>, pos_3 : UInt<16>, last_iteration : UInt<1>}

    reg dim_N : UInt<16>, clock with :
      reset => (UInt<1>("h0"), dim_N) @[IndexCalculator.scala 84:20]
    reg counter_PE : UInt<32>, clock with :
      reset => (UInt<1>("h0"), counter_PE) @[IndexCalculator.scala 87:25]
    reg counter_offset : UInt<16>, clock with :
      reset => (UInt<1>("h0"), counter_offset) @[IndexCalculator.scala 88:29]
    node _T = and(io.enable, io.reset) @[IndexCalculator.scala 91:20]
    when _T : @[IndexCalculator.scala 91:32]
      dim_N <= io.dim_N @[IndexCalculator.scala 93:15]
      counter_PE <= UInt<1>("h0") @[IndexCalculator.scala 94:20]
      counter_offset <= UInt<1>("h0") @[IndexCalculator.scala 95:24]
    node _T_1 = eq(io.reset, UInt<1>("h0")) @[IndexCalculator.scala 99:23]
    node _T_2 = and(io.enable, _T_1) @[IndexCalculator.scala 99:20]
    when _T_2 : @[IndexCalculator.scala 99:33]
      node _T_3 = add(counter_PE, UInt<2>("h3")) @[IndexCalculator.scala 101:24]
      node _T_4 = tail(_T_3, 1) @[IndexCalculator.scala 101:24]
      node _T_5 = geq(_T_4, UInt<4>("h8")) @[IndexCalculator.scala 101:29]
      when _T_5 : @[IndexCalculator.scala 101:43]
        counter_PE <= UInt<1>("h0") @[IndexCalculator.scala 103:24]
        node _T_6 = add(counter_offset, UInt<1>("h1")) @[IndexCalculator.scala 104:46]
        node _T_7 = tail(_T_6, 1) @[IndexCalculator.scala 104:46]
        counter_offset <= _T_7 @[IndexCalculator.scala 104:28]
      else :
        node _T_8 = add(counter_PE, UInt<3>("h4")) @[IndexCalculator.scala 108:38]
        node _T_9 = tail(_T_8, 1) @[IndexCalculator.scala 108:38]
        counter_PE <= _T_9 @[IndexCalculator.scala 108:24]
    node _T_10 = mul(counter_PE, dim_N) @[IndexCalculator.scala 114:29]
    node _T_11 = add(_T_10, counter_offset) @[IndexCalculator.scala 114:37]
    node _T_12 = tail(_T_11, 1) @[IndexCalculator.scala 114:37]
    io.index0 <= _T_12 @[IndexCalculator.scala 114:15]
    node _T_13 = add(counter_PE, UInt<1>("h1")) @[IndexCalculator.scala 115:29]
    node _T_14 = tail(_T_13, 1) @[IndexCalculator.scala 115:29]
    node _T_15 = mul(_T_14, dim_N) @[IndexCalculator.scala 115:35]
    node _T_16 = add(_T_15, counter_offset) @[IndexCalculator.scala 115:43]
    node _T_17 = tail(_T_16, 1) @[IndexCalculator.scala 115:43]
    io.index1 <= _T_17 @[IndexCalculator.scala 115:15]
    node _T_18 = add(counter_PE, UInt<2>("h2")) @[IndexCalculator.scala 116:29]
    node _T_19 = tail(_T_18, 1) @[IndexCalculator.scala 116:29]
    node _T_20 = mul(_T_19, dim_N) @[IndexCalculator.scala 116:35]
    node _T_21 = add(_T_20, counter_offset) @[IndexCalculator.scala 116:43]
    node _T_22 = tail(_T_21, 1) @[IndexCalculator.scala 116:43]
    io.index2 <= _T_22 @[IndexCalculator.scala 116:15]
    node _T_23 = add(counter_PE, UInt<2>("h3")) @[IndexCalculator.scala 117:29]
    node _T_24 = tail(_T_23, 1) @[IndexCalculator.scala 117:29]
    node _T_25 = mul(_T_24, dim_N) @[IndexCalculator.scala 117:35]
    node _T_26 = add(_T_25, counter_offset) @[IndexCalculator.scala 117:43]
    node _T_27 = tail(_T_26, 1) @[IndexCalculator.scala 117:43]
    io.index3 <= _T_27 @[IndexCalculator.scala 117:15]
    node _T_28 = leq(counter_PE, UInt<4>("h8")) @[IndexCalculator.scala 120:29]
    node _T_29 = eq(io.last_iteration, UInt<1>("h0")) @[IndexCalculator.scala 120:46]
    node _T_30 = and(_T_28, _T_29) @[IndexCalculator.scala 120:43]
    io.valid0 <= _T_30 @[IndexCalculator.scala 120:15]
    node _T_31 = add(counter_PE, UInt<1>("h1")) @[IndexCalculator.scala 121:29]
    node _T_32 = tail(_T_31, 1) @[IndexCalculator.scala 121:29]
    node _T_33 = leq(_T_32, UInt<4>("h8")) @[IndexCalculator.scala 121:35]
    node _T_34 = eq(io.last_iteration, UInt<1>("h0")) @[IndexCalculator.scala 121:52]
    node _T_35 = and(_T_33, _T_34) @[IndexCalculator.scala 121:49]
    io.valid1 <= _T_35 @[IndexCalculator.scala 121:15]
    node _T_36 = add(counter_PE, UInt<2>("h2")) @[IndexCalculator.scala 122:29]
    node _T_37 = tail(_T_36, 1) @[IndexCalculator.scala 122:29]
    node _T_38 = leq(_T_37, UInt<4>("h8")) @[IndexCalculator.scala 122:35]
    node _T_39 = eq(io.last_iteration, UInt<1>("h0")) @[IndexCalculator.scala 122:52]
    node _T_40 = and(_T_38, _T_39) @[IndexCalculator.scala 122:49]
    io.valid2 <= _T_40 @[IndexCalculator.scala 122:15]
    node _T_41 = add(counter_PE, UInt<2>("h3")) @[IndexCalculator.scala 123:29]
    node _T_42 = tail(_T_41, 1) @[IndexCalculator.scala 123:29]
    node _T_43 = leq(_T_42, UInt<4>("h8")) @[IndexCalculator.scala 123:35]
    node _T_44 = eq(io.last_iteration, UInt<1>("h0")) @[IndexCalculator.scala 123:52]
    node _T_45 = and(_T_43, _T_44) @[IndexCalculator.scala 123:49]
    io.valid3 <= _T_45 @[IndexCalculator.scala 123:15]
    node _T_46 = rem(counter_PE, UInt<2>("h3")) @[IndexCalculator.scala 125:45]
    io.x_dest_0 <= _T_46 @[IndexCalculator.scala 129:17]
    node _T_47 = add(counter_PE, UInt<1>("h1")) @[IndexCalculator.scala 130:46]
    node _T_48 = tail(_T_47, 1) @[IndexCalculator.scala 130:46]
    node _T_49 = rem(_T_48, UInt<2>("h3")) @[IndexCalculator.scala 125:45]
    io.x_dest_1 <= _T_49 @[IndexCalculator.scala 130:17]
    node _T_50 = add(counter_PE, UInt<2>("h2")) @[IndexCalculator.scala 131:46]
    node _T_51 = tail(_T_50, 1) @[IndexCalculator.scala 131:46]
    node _T_52 = rem(_T_51, UInt<2>("h3")) @[IndexCalculator.scala 125:45]
    io.x_dest_2 <= _T_52 @[IndexCalculator.scala 131:17]
    node _T_53 = add(counter_PE, UInt<2>("h3")) @[IndexCalculator.scala 132:46]
    node _T_54 = tail(_T_53, 1) @[IndexCalculator.scala 132:46]
    node _T_55 = rem(_T_54, UInt<2>("h3")) @[IndexCalculator.scala 125:45]
    io.x_dest_3 <= _T_55 @[IndexCalculator.scala 132:17]
    node _T_56 = div(counter_PE, UInt<2>("h3")) @[IndexCalculator.scala 126:45]
    io.y_dest_0 <= _T_56 @[IndexCalculator.scala 134:17]
    node _T_57 = add(counter_PE, UInt<1>("h1")) @[IndexCalculator.scala 135:46]
    node _T_58 = tail(_T_57, 1) @[IndexCalculator.scala 135:46]
    node _T_59 = div(_T_58, UInt<2>("h3")) @[IndexCalculator.scala 126:45]
    io.y_dest_1 <= _T_59 @[IndexCalculator.scala 135:17]
    node _T_60 = add(counter_PE, UInt<2>("h2")) @[IndexCalculator.scala 136:46]
    node _T_61 = tail(_T_60, 1) @[IndexCalculator.scala 136:46]
    node _T_62 = div(_T_61, UInt<2>("h3")) @[IndexCalculator.scala 126:45]
    io.y_dest_2 <= _T_62 @[IndexCalculator.scala 136:17]
    node _T_63 = add(counter_PE, UInt<2>("h3")) @[IndexCalculator.scala 137:46]
    node _T_64 = tail(_T_63, 1) @[IndexCalculator.scala 137:46]
    node _T_65 = div(_T_64, UInt<2>("h3")) @[IndexCalculator.scala 126:45]
    io.y_dest_3 <= _T_65 @[IndexCalculator.scala 137:17]
    io.pos_0 <= counter_offset @[IndexCalculator.scala 140:14]
    io.pos_1 <= counter_offset @[IndexCalculator.scala 141:14]
    io.pos_2 <= counter_offset @[IndexCalculator.scala 142:14]
    io.pos_3 <= counter_offset @[IndexCalculator.scala 143:14]
    node _T_66 = eq(counter_offset, dim_N) @[IndexCalculator.scala 145:41]
    io.last_iteration <= _T_66 @[IndexCalculator.scala 145:23]

  module Queue :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.pos <= io.enq.bits.pos @[Decoupled.scala 230:24]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.pos <= io_deq_bits_MPORT.pos @[Decoupled.scala 242:15]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.pos <= io.enq.bits.pos @[Decoupled.scala 230:24]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.pos <= io_deq_bits_MPORT.pos @[Decoupled.scala 242:15]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.pos <= io.enq.bits.pos @[Decoupled.scala 230:24]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.pos <= io_deq_bits_MPORT.pos @[Decoupled.scala 242:15]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.pos <= io.enq.bits.pos @[Decoupled.scala 230:24]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.pos <= io_deq_bits_MPORT.pos @[Decoupled.scala 242:15]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Dispatcher :
    input clock : Clock
    input reset : Reset
    output io : { flip x_PE : UInt<3>, flip y_PE : UInt<3>, flip x_0 : UInt<3>, flip y_0 : UInt<3>, flip x_dest : UInt<3>, flip y_dest : UInt<3>, left : UInt<1>, right : UInt<1>, up : UInt<1>, bottom : UInt<1>, this_PE : UInt<1>}

    wire out_selector : UInt<4> @[Dispatcher.scala 34:28]
    node _T = eq(out_selector, UInt<1>("h1")) @[Dispatcher.scala 36:29]
    node _T_1 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 36:46]
    node _T_2 = and(_T, _T_1) @[Dispatcher.scala 36:43]
    io.left <= _T_2 @[Dispatcher.scala 36:13]
    node _T_3 = eq(out_selector, UInt<2>("h2")) @[Dispatcher.scala 37:30]
    node _T_4 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 37:47]
    node _T_5 = and(_T_3, _T_4) @[Dispatcher.scala 37:44]
    io.right <= _T_5 @[Dispatcher.scala 37:14]
    node _T_6 = eq(out_selector, UInt<3>("h4")) @[Dispatcher.scala 38:27]
    node _T_7 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 38:44]
    node _T_8 = and(_T_6, _T_7) @[Dispatcher.scala 38:41]
    io.up <= _T_8 @[Dispatcher.scala 38:11]
    node _T_9 = eq(out_selector, UInt<4>("h8")) @[Dispatcher.scala 39:31]
    node _T_10 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 39:48]
    node _T_11 = and(_T_9, _T_10) @[Dispatcher.scala 39:45]
    io.bottom <= _T_11 @[Dispatcher.scala 39:15]
    node _T_12 = eq(io.x_dest, io.x_PE) @[Dispatcher.scala 44:20]
    node _T_13 = eq(io.y_dest, io.y_PE) @[Dispatcher.scala 44:45]
    node _T_14 = and(_T_12, _T_13) @[Dispatcher.scala 44:32]
    when _T_14 : @[Dispatcher.scala 44:57]
      io.this_PE <= UInt<1>("h1") @[Dispatcher.scala 45:20]
      out_selector <= UInt<1>("h0") @[Dispatcher.scala 46:22]
    else :
      io.this_PE <= UInt<1>("h0") @[Dispatcher.scala 48:20]
      out_selector <= UInt<1>("h0") @[Dispatcher.scala 49:22]
    node _T_15 = cvt(io.x_PE) @[Dispatcher.scala 52:31]
    node _T_16 = cvt(io.x_0) @[Dispatcher.scala 52:45]
    node _T_17 = sub(_T_15, _T_16) @[Dispatcher.scala 52:36]
    node _T_18 = tail(_T_17, 1) @[Dispatcher.scala 52:36]
    node x_PE_transl = asSInt(_T_18) @[Dispatcher.scala 52:36]
    node _T_19 = cvt(io.y_PE) @[Dispatcher.scala 53:31]
    node _T_20 = cvt(io.y_0) @[Dispatcher.scala 53:45]
    node _T_21 = sub(_T_19, _T_20) @[Dispatcher.scala 53:36]
    node _T_22 = tail(_T_21, 1) @[Dispatcher.scala 53:36]
    node y_PE_transl = asSInt(_T_22) @[Dispatcher.scala 53:36]
    node _T_23 = bits(x_PE_transl, 0, 0) @[Dispatcher.scala 54:38]
    node x_PE_transl_odd = eq(_T_23, UInt<1>("h1")) @[Dispatcher.scala 54:42]
    node _T_24 = bits(y_PE_transl, 0, 0) @[Dispatcher.scala 55:38]
    node y_PE_transl_odd = eq(_T_24, UInt<1>("h1")) @[Dispatcher.scala 55:42]
    node _T_25 = cvt(io.x_dest) @[Dispatcher.scala 56:35]
    node _T_26 = cvt(io.x_0) @[Dispatcher.scala 56:49]
    node _T_27 = sub(_T_25, _T_26) @[Dispatcher.scala 56:40]
    node _T_28 = tail(_T_27, 1) @[Dispatcher.scala 56:40]
    node x_dest_transl = asSInt(_T_28) @[Dispatcher.scala 56:40]
    node _T_29 = cvt(io.y_dest) @[Dispatcher.scala 57:35]
    node _T_30 = cvt(io.y_0) @[Dispatcher.scala 57:49]
    node _T_31 = sub(_T_29, _T_30) @[Dispatcher.scala 57:40]
    node _T_32 = tail(_T_31, 1) @[Dispatcher.scala 57:40]
    node y_dest_transl = asSInt(_T_32) @[Dispatcher.scala 57:40]
    node _T_33 = gt(io.x_PE, io.x_0) @[Dispatcher.scala 60:18]
    node _T_34 = eq(io.y_PE, io.y_0) @[Dispatcher.scala 60:38]
    node _T_35 = and(_T_33, _T_34) @[Dispatcher.scala 60:27]
    when _T_35 : @[Dispatcher.scala 60:49]
      when x_PE_transl_odd : @[Dispatcher.scala 62:30]
        node _T_36 = add(y_dest_transl, x_PE_transl) @[Dispatcher.scala 63:49]
        node _T_37 = tail(_T_36, 1) @[Dispatcher.scala 63:49]
        node _T_38 = asSInt(_T_37) @[Dispatcher.scala 63:49]
        node _T_39 = leq(x_dest_transl, _T_38) @[Dispatcher.scala 63:32]
        when _T_39 : @[Dispatcher.scala 63:63]
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 65:30]
        else :
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 68:30]
      else :
        node _T_40 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 71:35]
        node _T_41 = tail(_T_40, 1) @[Dispatcher.scala 71:35]
        node _T_42 = asSInt(_T_41) @[Dispatcher.scala 71:35]
        node _T_43 = add(_T_42, x_PE_transl) @[Dispatcher.scala 71:50]
        node _T_44 = tail(_T_43, 1) @[Dispatcher.scala 71:50]
        node _T_45 = asSInt(_T_44) @[Dispatcher.scala 71:50]
        node _T_46 = leq(x_dest_transl, _T_45) @[Dispatcher.scala 71:32]
        when _T_46 : @[Dispatcher.scala 71:64]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 73:30]
        else :
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 76:30]
    node _T_47 = eq(io.x_PE, io.x_0) @[Dispatcher.scala 82:18]
    node _T_48 = gt(io.y_PE, io.y_0) @[Dispatcher.scala 82:40]
    node _T_49 = and(_T_47, _T_48) @[Dispatcher.scala 82:29]
    when _T_49 : @[Dispatcher.scala 82:49]
      when y_PE_transl_odd : @[Dispatcher.scala 84:30]
        node _T_50 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 85:35]
        node _T_51 = tail(_T_50, 1) @[Dispatcher.scala 85:35]
        node _T_52 = asSInt(_T_51) @[Dispatcher.scala 85:35]
        node _T_53 = add(_T_52, y_PE_transl) @[Dispatcher.scala 85:50]
        node _T_54 = tail(_T_53, 1) @[Dispatcher.scala 85:50]
        node _T_55 = asSInt(_T_54) @[Dispatcher.scala 85:50]
        node _T_56 = leq(x_dest_transl, _T_55) @[Dispatcher.scala 85:32]
        when _T_56 : @[Dispatcher.scala 85:64]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 87:30]
        else :
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 90:30]
      else :
        node _T_57 = sub(y_dest_transl, y_PE_transl) @[Dispatcher.scala 93:49]
        node _T_58 = tail(_T_57, 1) @[Dispatcher.scala 93:49]
        node _T_59 = asSInt(_T_58) @[Dispatcher.scala 93:49]
        node _T_60 = geq(x_dest_transl, _T_59) @[Dispatcher.scala 93:32]
        when _T_60 : @[Dispatcher.scala 93:63]
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 95:30]
        else :
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 98:30]
    node _T_61 = lt(io.x_PE, io.x_0) @[Dispatcher.scala 104:18]
    node _T_62 = eq(io.y_PE, io.y_0) @[Dispatcher.scala 104:38]
    node _T_63 = and(_T_61, _T_62) @[Dispatcher.scala 104:27]
    when _T_63 : @[Dispatcher.scala 104:49]
      when x_PE_transl_odd : @[Dispatcher.scala 106:30]
        node _T_64 = add(y_dest_transl, x_PE_transl) @[Dispatcher.scala 107:49]
        node _T_65 = tail(_T_64, 1) @[Dispatcher.scala 107:49]
        node _T_66 = asSInt(_T_65) @[Dispatcher.scala 107:49]
        node _T_67 = geq(x_dest_transl, _T_66) @[Dispatcher.scala 107:32]
        when _T_67 : @[Dispatcher.scala 107:63]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 109:30]
        else :
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 112:30]
      else :
        node _T_68 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 115:35]
        node _T_69 = tail(_T_68, 1) @[Dispatcher.scala 115:35]
        node _T_70 = asSInt(_T_69) @[Dispatcher.scala 115:35]
        node _T_71 = add(_T_70, x_PE_transl) @[Dispatcher.scala 115:50]
        node _T_72 = tail(_T_71, 1) @[Dispatcher.scala 115:50]
        node _T_73 = asSInt(_T_72) @[Dispatcher.scala 115:50]
        node _T_74 = geq(x_dest_transl, _T_73) @[Dispatcher.scala 115:32]
        when _T_74 : @[Dispatcher.scala 115:64]
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 117:30]
        else :
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 120:30]
    node _T_75 = eq(io.x_PE, io.x_0) @[Dispatcher.scala 126:18]
    node _T_76 = lt(io.y_PE, io.y_0) @[Dispatcher.scala 126:40]
    node _T_77 = and(_T_75, _T_76) @[Dispatcher.scala 126:29]
    when _T_77 : @[Dispatcher.scala 126:49]
      when y_PE_transl_odd : @[Dispatcher.scala 128:30]
        node _T_78 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 129:35]
        node _T_79 = tail(_T_78, 1) @[Dispatcher.scala 129:35]
        node _T_80 = asSInt(_T_79) @[Dispatcher.scala 129:35]
        node _T_81 = add(_T_80, y_PE_transl) @[Dispatcher.scala 129:50]
        node _T_82 = tail(_T_81, 1) @[Dispatcher.scala 129:50]
        node _T_83 = asSInt(_T_82) @[Dispatcher.scala 129:50]
        node _T_84 = geq(x_dest_transl, _T_83) @[Dispatcher.scala 129:32]
        when _T_84 : @[Dispatcher.scala 129:64]
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 131:30]
        else :
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 134:30]
      else :
        node _T_85 = sub(y_dest_transl, y_PE_transl) @[Dispatcher.scala 137:49]
        node _T_86 = tail(_T_85, 1) @[Dispatcher.scala 137:49]
        node _T_87 = asSInt(_T_86) @[Dispatcher.scala 137:49]
        node _T_88 = leq(x_dest_transl, _T_87) @[Dispatcher.scala 137:32]
        when _T_88 : @[Dispatcher.scala 137:63]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 139:30]
        else :
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 142:30]
    node _T_89 = head(x_PE_transl, 1) @[Dispatcher.scala 148:40]
    node sign_delta_x = bits(_T_89, 0, 0) @[Dispatcher.scala 148:44]
    node _T_90 = head(y_PE_transl, 1) @[Dispatcher.scala 149:40]
    node sign_delta_y = bits(_T_90, 0, 0) @[Dispatcher.scala 149:44]
    node _T_91 = xor(sign_delta_x, sign_delta_y) @[Dispatcher.scala 151:36]
    node uFactor_x = eq(_T_91, UInt<1>("h0")) @[Dispatcher.scala 151:21]
    node _T_92 = xor(x_PE_transl_odd, y_PE_transl_odd) @[Dispatcher.scala 152:39]
    node oddResult_x = xor(_T_92, uFactor_x) @[Dispatcher.scala 152:57]
    node uFactor_y = xor(sign_delta_x, sign_delta_y) @[Dispatcher.scala 154:34]
    node _T_93 = xor(x_PE_transl_odd, y_PE_transl_odd) @[Dispatcher.scala 155:39]
    node oddResult_y = xor(_T_93, uFactor_y) @[Dispatcher.scala 155:57]
    node _T_94 = neq(io.x_PE, io.x_0) @[Dispatcher.scala 158:18]
    node _T_95 = neq(io.y_PE, io.y_0) @[Dispatcher.scala 158:40]
    node _T_96 = and(_T_94, _T_95) @[Dispatcher.scala 158:29]
    when _T_96 : @[Dispatcher.scala 158:51]
      node _T_97 = eq(sign_delta_x, UInt<1>("h0")) @[Dispatcher.scala 160:29]
      node _T_98 = and(oddResult_x, _T_97) @[Dispatcher.scala 160:26]
      when _T_98 : @[Dispatcher.scala 160:43]
        out_selector <= UInt<2>("h2") @[Dispatcher.scala 162:26]
      else :
        node _T_99 = and(oddResult_x, sign_delta_x) @[Dispatcher.scala 164:32]
        when _T_99 : @[Dispatcher.scala 164:48]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 166:26]
      node _T_100 = eq(sign_delta_y, UInt<1>("h0")) @[Dispatcher.scala 169:29]
      node _T_101 = and(oddResult_y, _T_100) @[Dispatcher.scala 169:26]
      when _T_101 : @[Dispatcher.scala 169:43]
        out_selector <= UInt<3>("h4") @[Dispatcher.scala 171:26]
      else :
        node _T_102 = and(oddResult_y, sign_delta_y) @[Dispatcher.scala 173:32]
        when _T_102 : @[Dispatcher.scala 173:48]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 175:26]

  module Dispatcher_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip x_PE : UInt<3>, flip y_PE : UInt<3>, flip x_0 : UInt<3>, flip y_0 : UInt<3>, flip x_dest : UInt<3>, flip y_dest : UInt<3>, left : UInt<1>, right : UInt<1>, up : UInt<1>, bottom : UInt<1>, this_PE : UInt<1>}

    wire out_selector : UInt<4> @[Dispatcher.scala 34:28]
    node _T = eq(out_selector, UInt<1>("h1")) @[Dispatcher.scala 36:29]
    node _T_1 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 36:46]
    node _T_2 = and(_T, _T_1) @[Dispatcher.scala 36:43]
    io.left <= _T_2 @[Dispatcher.scala 36:13]
    node _T_3 = eq(out_selector, UInt<2>("h2")) @[Dispatcher.scala 37:30]
    node _T_4 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 37:47]
    node _T_5 = and(_T_3, _T_4) @[Dispatcher.scala 37:44]
    io.right <= _T_5 @[Dispatcher.scala 37:14]
    node _T_6 = eq(out_selector, UInt<3>("h4")) @[Dispatcher.scala 38:27]
    node _T_7 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 38:44]
    node _T_8 = and(_T_6, _T_7) @[Dispatcher.scala 38:41]
    io.up <= _T_8 @[Dispatcher.scala 38:11]
    node _T_9 = eq(out_selector, UInt<4>("h8")) @[Dispatcher.scala 39:31]
    node _T_10 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 39:48]
    node _T_11 = and(_T_9, _T_10) @[Dispatcher.scala 39:45]
    io.bottom <= _T_11 @[Dispatcher.scala 39:15]
    node _T_12 = eq(io.x_dest, io.x_PE) @[Dispatcher.scala 44:20]
    node _T_13 = eq(io.y_dest, io.y_PE) @[Dispatcher.scala 44:45]
    node _T_14 = and(_T_12, _T_13) @[Dispatcher.scala 44:32]
    when _T_14 : @[Dispatcher.scala 44:57]
      io.this_PE <= UInt<1>("h1") @[Dispatcher.scala 45:20]
      out_selector <= UInt<1>("h0") @[Dispatcher.scala 46:22]
    else :
      io.this_PE <= UInt<1>("h0") @[Dispatcher.scala 48:20]
      out_selector <= UInt<1>("h0") @[Dispatcher.scala 49:22]
    node _T_15 = cvt(io.x_PE) @[Dispatcher.scala 52:31]
    node _T_16 = cvt(io.x_0) @[Dispatcher.scala 52:45]
    node _T_17 = sub(_T_15, _T_16) @[Dispatcher.scala 52:36]
    node _T_18 = tail(_T_17, 1) @[Dispatcher.scala 52:36]
    node x_PE_transl = asSInt(_T_18) @[Dispatcher.scala 52:36]
    node _T_19 = cvt(io.y_PE) @[Dispatcher.scala 53:31]
    node _T_20 = cvt(io.y_0) @[Dispatcher.scala 53:45]
    node _T_21 = sub(_T_19, _T_20) @[Dispatcher.scala 53:36]
    node _T_22 = tail(_T_21, 1) @[Dispatcher.scala 53:36]
    node y_PE_transl = asSInt(_T_22) @[Dispatcher.scala 53:36]
    node _T_23 = bits(x_PE_transl, 0, 0) @[Dispatcher.scala 54:38]
    node x_PE_transl_odd = eq(_T_23, UInt<1>("h1")) @[Dispatcher.scala 54:42]
    node _T_24 = bits(y_PE_transl, 0, 0) @[Dispatcher.scala 55:38]
    node y_PE_transl_odd = eq(_T_24, UInt<1>("h1")) @[Dispatcher.scala 55:42]
    node _T_25 = cvt(io.x_dest) @[Dispatcher.scala 56:35]
    node _T_26 = cvt(io.x_0) @[Dispatcher.scala 56:49]
    node _T_27 = sub(_T_25, _T_26) @[Dispatcher.scala 56:40]
    node _T_28 = tail(_T_27, 1) @[Dispatcher.scala 56:40]
    node x_dest_transl = asSInt(_T_28) @[Dispatcher.scala 56:40]
    node _T_29 = cvt(io.y_dest) @[Dispatcher.scala 57:35]
    node _T_30 = cvt(io.y_0) @[Dispatcher.scala 57:49]
    node _T_31 = sub(_T_29, _T_30) @[Dispatcher.scala 57:40]
    node _T_32 = tail(_T_31, 1) @[Dispatcher.scala 57:40]
    node y_dest_transl = asSInt(_T_32) @[Dispatcher.scala 57:40]
    node _T_33 = gt(io.x_PE, io.x_0) @[Dispatcher.scala 60:18]
    node _T_34 = eq(io.y_PE, io.y_0) @[Dispatcher.scala 60:38]
    node _T_35 = and(_T_33, _T_34) @[Dispatcher.scala 60:27]
    when _T_35 : @[Dispatcher.scala 60:49]
      when x_PE_transl_odd : @[Dispatcher.scala 62:30]
        node _T_36 = add(y_dest_transl, x_PE_transl) @[Dispatcher.scala 63:49]
        node _T_37 = tail(_T_36, 1) @[Dispatcher.scala 63:49]
        node _T_38 = asSInt(_T_37) @[Dispatcher.scala 63:49]
        node _T_39 = leq(x_dest_transl, _T_38) @[Dispatcher.scala 63:32]
        when _T_39 : @[Dispatcher.scala 63:63]
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 65:30]
        else :
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 68:30]
      else :
        node _T_40 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 71:35]
        node _T_41 = tail(_T_40, 1) @[Dispatcher.scala 71:35]
        node _T_42 = asSInt(_T_41) @[Dispatcher.scala 71:35]
        node _T_43 = add(_T_42, x_PE_transl) @[Dispatcher.scala 71:50]
        node _T_44 = tail(_T_43, 1) @[Dispatcher.scala 71:50]
        node _T_45 = asSInt(_T_44) @[Dispatcher.scala 71:50]
        node _T_46 = leq(x_dest_transl, _T_45) @[Dispatcher.scala 71:32]
        when _T_46 : @[Dispatcher.scala 71:64]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 73:30]
        else :
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 76:30]
    node _T_47 = eq(io.x_PE, io.x_0) @[Dispatcher.scala 82:18]
    node _T_48 = gt(io.y_PE, io.y_0) @[Dispatcher.scala 82:40]
    node _T_49 = and(_T_47, _T_48) @[Dispatcher.scala 82:29]
    when _T_49 : @[Dispatcher.scala 82:49]
      when y_PE_transl_odd : @[Dispatcher.scala 84:30]
        node _T_50 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 85:35]
        node _T_51 = tail(_T_50, 1) @[Dispatcher.scala 85:35]
        node _T_52 = asSInt(_T_51) @[Dispatcher.scala 85:35]
        node _T_53 = add(_T_52, y_PE_transl) @[Dispatcher.scala 85:50]
        node _T_54 = tail(_T_53, 1) @[Dispatcher.scala 85:50]
        node _T_55 = asSInt(_T_54) @[Dispatcher.scala 85:50]
        node _T_56 = leq(x_dest_transl, _T_55) @[Dispatcher.scala 85:32]
        when _T_56 : @[Dispatcher.scala 85:64]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 87:30]
        else :
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 90:30]
      else :
        node _T_57 = sub(y_dest_transl, y_PE_transl) @[Dispatcher.scala 93:49]
        node _T_58 = tail(_T_57, 1) @[Dispatcher.scala 93:49]
        node _T_59 = asSInt(_T_58) @[Dispatcher.scala 93:49]
        node _T_60 = geq(x_dest_transl, _T_59) @[Dispatcher.scala 93:32]
        when _T_60 : @[Dispatcher.scala 93:63]
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 95:30]
        else :
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 98:30]
    node _T_61 = lt(io.x_PE, io.x_0) @[Dispatcher.scala 104:18]
    node _T_62 = eq(io.y_PE, io.y_0) @[Dispatcher.scala 104:38]
    node _T_63 = and(_T_61, _T_62) @[Dispatcher.scala 104:27]
    when _T_63 : @[Dispatcher.scala 104:49]
      when x_PE_transl_odd : @[Dispatcher.scala 106:30]
        node _T_64 = add(y_dest_transl, x_PE_transl) @[Dispatcher.scala 107:49]
        node _T_65 = tail(_T_64, 1) @[Dispatcher.scala 107:49]
        node _T_66 = asSInt(_T_65) @[Dispatcher.scala 107:49]
        node _T_67 = geq(x_dest_transl, _T_66) @[Dispatcher.scala 107:32]
        when _T_67 : @[Dispatcher.scala 107:63]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 109:30]
        else :
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 112:30]
      else :
        node _T_68 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 115:35]
        node _T_69 = tail(_T_68, 1) @[Dispatcher.scala 115:35]
        node _T_70 = asSInt(_T_69) @[Dispatcher.scala 115:35]
        node _T_71 = add(_T_70, x_PE_transl) @[Dispatcher.scala 115:50]
        node _T_72 = tail(_T_71, 1) @[Dispatcher.scala 115:50]
        node _T_73 = asSInt(_T_72) @[Dispatcher.scala 115:50]
        node _T_74 = geq(x_dest_transl, _T_73) @[Dispatcher.scala 115:32]
        when _T_74 : @[Dispatcher.scala 115:64]
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 117:30]
        else :
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 120:30]
    node _T_75 = eq(io.x_PE, io.x_0) @[Dispatcher.scala 126:18]
    node _T_76 = lt(io.y_PE, io.y_0) @[Dispatcher.scala 126:40]
    node _T_77 = and(_T_75, _T_76) @[Dispatcher.scala 126:29]
    when _T_77 : @[Dispatcher.scala 126:49]
      when y_PE_transl_odd : @[Dispatcher.scala 128:30]
        node _T_78 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 129:35]
        node _T_79 = tail(_T_78, 1) @[Dispatcher.scala 129:35]
        node _T_80 = asSInt(_T_79) @[Dispatcher.scala 129:35]
        node _T_81 = add(_T_80, y_PE_transl) @[Dispatcher.scala 129:50]
        node _T_82 = tail(_T_81, 1) @[Dispatcher.scala 129:50]
        node _T_83 = asSInt(_T_82) @[Dispatcher.scala 129:50]
        node _T_84 = geq(x_dest_transl, _T_83) @[Dispatcher.scala 129:32]
        when _T_84 : @[Dispatcher.scala 129:64]
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 131:30]
        else :
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 134:30]
      else :
        node _T_85 = sub(y_dest_transl, y_PE_transl) @[Dispatcher.scala 137:49]
        node _T_86 = tail(_T_85, 1) @[Dispatcher.scala 137:49]
        node _T_87 = asSInt(_T_86) @[Dispatcher.scala 137:49]
        node _T_88 = leq(x_dest_transl, _T_87) @[Dispatcher.scala 137:32]
        when _T_88 : @[Dispatcher.scala 137:63]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 139:30]
        else :
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 142:30]
    node _T_89 = head(x_PE_transl, 1) @[Dispatcher.scala 148:40]
    node sign_delta_x = bits(_T_89, 0, 0) @[Dispatcher.scala 148:44]
    node _T_90 = head(y_PE_transl, 1) @[Dispatcher.scala 149:40]
    node sign_delta_y = bits(_T_90, 0, 0) @[Dispatcher.scala 149:44]
    node _T_91 = xor(sign_delta_x, sign_delta_y) @[Dispatcher.scala 151:36]
    node uFactor_x = eq(_T_91, UInt<1>("h0")) @[Dispatcher.scala 151:21]
    node _T_92 = xor(x_PE_transl_odd, y_PE_transl_odd) @[Dispatcher.scala 152:39]
    node oddResult_x = xor(_T_92, uFactor_x) @[Dispatcher.scala 152:57]
    node uFactor_y = xor(sign_delta_x, sign_delta_y) @[Dispatcher.scala 154:34]
    node _T_93 = xor(x_PE_transl_odd, y_PE_transl_odd) @[Dispatcher.scala 155:39]
    node oddResult_y = xor(_T_93, uFactor_y) @[Dispatcher.scala 155:57]
    node _T_94 = neq(io.x_PE, io.x_0) @[Dispatcher.scala 158:18]
    node _T_95 = neq(io.y_PE, io.y_0) @[Dispatcher.scala 158:40]
    node _T_96 = and(_T_94, _T_95) @[Dispatcher.scala 158:29]
    when _T_96 : @[Dispatcher.scala 158:51]
      node _T_97 = eq(sign_delta_x, UInt<1>("h0")) @[Dispatcher.scala 160:29]
      node _T_98 = and(oddResult_x, _T_97) @[Dispatcher.scala 160:26]
      when _T_98 : @[Dispatcher.scala 160:43]
        out_selector <= UInt<2>("h2") @[Dispatcher.scala 162:26]
      else :
        node _T_99 = and(oddResult_x, sign_delta_x) @[Dispatcher.scala 164:32]
        when _T_99 : @[Dispatcher.scala 164:48]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 166:26]
      node _T_100 = eq(sign_delta_y, UInt<1>("h0")) @[Dispatcher.scala 169:29]
      node _T_101 = and(oddResult_y, _T_100) @[Dispatcher.scala 169:26]
      when _T_101 : @[Dispatcher.scala 169:43]
        out_selector <= UInt<3>("h4") @[Dispatcher.scala 171:26]
      else :
        node _T_102 = and(oddResult_y, sign_delta_y) @[Dispatcher.scala 173:32]
        when _T_102 : @[Dispatcher.scala 173:48]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 175:26]

  module Dispatcher_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip x_PE : UInt<3>, flip y_PE : UInt<3>, flip x_0 : UInt<3>, flip y_0 : UInt<3>, flip x_dest : UInt<3>, flip y_dest : UInt<3>, left : UInt<1>, right : UInt<1>, up : UInt<1>, bottom : UInt<1>, this_PE : UInt<1>}

    wire out_selector : UInt<4> @[Dispatcher.scala 34:28]
    node _T = eq(out_selector, UInt<1>("h1")) @[Dispatcher.scala 36:29]
    node _T_1 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 36:46]
    node _T_2 = and(_T, _T_1) @[Dispatcher.scala 36:43]
    io.left <= _T_2 @[Dispatcher.scala 36:13]
    node _T_3 = eq(out_selector, UInt<2>("h2")) @[Dispatcher.scala 37:30]
    node _T_4 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 37:47]
    node _T_5 = and(_T_3, _T_4) @[Dispatcher.scala 37:44]
    io.right <= _T_5 @[Dispatcher.scala 37:14]
    node _T_6 = eq(out_selector, UInt<3>("h4")) @[Dispatcher.scala 38:27]
    node _T_7 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 38:44]
    node _T_8 = and(_T_6, _T_7) @[Dispatcher.scala 38:41]
    io.up <= _T_8 @[Dispatcher.scala 38:11]
    node _T_9 = eq(out_selector, UInt<4>("h8")) @[Dispatcher.scala 39:31]
    node _T_10 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 39:48]
    node _T_11 = and(_T_9, _T_10) @[Dispatcher.scala 39:45]
    io.bottom <= _T_11 @[Dispatcher.scala 39:15]
    node _T_12 = eq(io.x_dest, io.x_PE) @[Dispatcher.scala 44:20]
    node _T_13 = eq(io.y_dest, io.y_PE) @[Dispatcher.scala 44:45]
    node _T_14 = and(_T_12, _T_13) @[Dispatcher.scala 44:32]
    when _T_14 : @[Dispatcher.scala 44:57]
      io.this_PE <= UInt<1>("h1") @[Dispatcher.scala 45:20]
      out_selector <= UInt<1>("h0") @[Dispatcher.scala 46:22]
    else :
      io.this_PE <= UInt<1>("h0") @[Dispatcher.scala 48:20]
      out_selector <= UInt<1>("h0") @[Dispatcher.scala 49:22]
    node _T_15 = cvt(io.x_PE) @[Dispatcher.scala 52:31]
    node _T_16 = cvt(io.x_0) @[Dispatcher.scala 52:45]
    node _T_17 = sub(_T_15, _T_16) @[Dispatcher.scala 52:36]
    node _T_18 = tail(_T_17, 1) @[Dispatcher.scala 52:36]
    node x_PE_transl = asSInt(_T_18) @[Dispatcher.scala 52:36]
    node _T_19 = cvt(io.y_PE) @[Dispatcher.scala 53:31]
    node _T_20 = cvt(io.y_0) @[Dispatcher.scala 53:45]
    node _T_21 = sub(_T_19, _T_20) @[Dispatcher.scala 53:36]
    node _T_22 = tail(_T_21, 1) @[Dispatcher.scala 53:36]
    node y_PE_transl = asSInt(_T_22) @[Dispatcher.scala 53:36]
    node _T_23 = bits(x_PE_transl, 0, 0) @[Dispatcher.scala 54:38]
    node x_PE_transl_odd = eq(_T_23, UInt<1>("h1")) @[Dispatcher.scala 54:42]
    node _T_24 = bits(y_PE_transl, 0, 0) @[Dispatcher.scala 55:38]
    node y_PE_transl_odd = eq(_T_24, UInt<1>("h1")) @[Dispatcher.scala 55:42]
    node _T_25 = cvt(io.x_dest) @[Dispatcher.scala 56:35]
    node _T_26 = cvt(io.x_0) @[Dispatcher.scala 56:49]
    node _T_27 = sub(_T_25, _T_26) @[Dispatcher.scala 56:40]
    node _T_28 = tail(_T_27, 1) @[Dispatcher.scala 56:40]
    node x_dest_transl = asSInt(_T_28) @[Dispatcher.scala 56:40]
    node _T_29 = cvt(io.y_dest) @[Dispatcher.scala 57:35]
    node _T_30 = cvt(io.y_0) @[Dispatcher.scala 57:49]
    node _T_31 = sub(_T_29, _T_30) @[Dispatcher.scala 57:40]
    node _T_32 = tail(_T_31, 1) @[Dispatcher.scala 57:40]
    node y_dest_transl = asSInt(_T_32) @[Dispatcher.scala 57:40]
    node _T_33 = gt(io.x_PE, io.x_0) @[Dispatcher.scala 60:18]
    node _T_34 = eq(io.y_PE, io.y_0) @[Dispatcher.scala 60:38]
    node _T_35 = and(_T_33, _T_34) @[Dispatcher.scala 60:27]
    when _T_35 : @[Dispatcher.scala 60:49]
      when x_PE_transl_odd : @[Dispatcher.scala 62:30]
        node _T_36 = add(y_dest_transl, x_PE_transl) @[Dispatcher.scala 63:49]
        node _T_37 = tail(_T_36, 1) @[Dispatcher.scala 63:49]
        node _T_38 = asSInt(_T_37) @[Dispatcher.scala 63:49]
        node _T_39 = leq(x_dest_transl, _T_38) @[Dispatcher.scala 63:32]
        when _T_39 : @[Dispatcher.scala 63:63]
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 65:30]
        else :
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 68:30]
      else :
        node _T_40 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 71:35]
        node _T_41 = tail(_T_40, 1) @[Dispatcher.scala 71:35]
        node _T_42 = asSInt(_T_41) @[Dispatcher.scala 71:35]
        node _T_43 = add(_T_42, x_PE_transl) @[Dispatcher.scala 71:50]
        node _T_44 = tail(_T_43, 1) @[Dispatcher.scala 71:50]
        node _T_45 = asSInt(_T_44) @[Dispatcher.scala 71:50]
        node _T_46 = leq(x_dest_transl, _T_45) @[Dispatcher.scala 71:32]
        when _T_46 : @[Dispatcher.scala 71:64]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 73:30]
        else :
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 76:30]
    node _T_47 = eq(io.x_PE, io.x_0) @[Dispatcher.scala 82:18]
    node _T_48 = gt(io.y_PE, io.y_0) @[Dispatcher.scala 82:40]
    node _T_49 = and(_T_47, _T_48) @[Dispatcher.scala 82:29]
    when _T_49 : @[Dispatcher.scala 82:49]
      when y_PE_transl_odd : @[Dispatcher.scala 84:30]
        node _T_50 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 85:35]
        node _T_51 = tail(_T_50, 1) @[Dispatcher.scala 85:35]
        node _T_52 = asSInt(_T_51) @[Dispatcher.scala 85:35]
        node _T_53 = add(_T_52, y_PE_transl) @[Dispatcher.scala 85:50]
        node _T_54 = tail(_T_53, 1) @[Dispatcher.scala 85:50]
        node _T_55 = asSInt(_T_54) @[Dispatcher.scala 85:50]
        node _T_56 = leq(x_dest_transl, _T_55) @[Dispatcher.scala 85:32]
        when _T_56 : @[Dispatcher.scala 85:64]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 87:30]
        else :
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 90:30]
      else :
        node _T_57 = sub(y_dest_transl, y_PE_transl) @[Dispatcher.scala 93:49]
        node _T_58 = tail(_T_57, 1) @[Dispatcher.scala 93:49]
        node _T_59 = asSInt(_T_58) @[Dispatcher.scala 93:49]
        node _T_60 = geq(x_dest_transl, _T_59) @[Dispatcher.scala 93:32]
        when _T_60 : @[Dispatcher.scala 93:63]
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 95:30]
        else :
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 98:30]
    node _T_61 = lt(io.x_PE, io.x_0) @[Dispatcher.scala 104:18]
    node _T_62 = eq(io.y_PE, io.y_0) @[Dispatcher.scala 104:38]
    node _T_63 = and(_T_61, _T_62) @[Dispatcher.scala 104:27]
    when _T_63 : @[Dispatcher.scala 104:49]
      when x_PE_transl_odd : @[Dispatcher.scala 106:30]
        node _T_64 = add(y_dest_transl, x_PE_transl) @[Dispatcher.scala 107:49]
        node _T_65 = tail(_T_64, 1) @[Dispatcher.scala 107:49]
        node _T_66 = asSInt(_T_65) @[Dispatcher.scala 107:49]
        node _T_67 = geq(x_dest_transl, _T_66) @[Dispatcher.scala 107:32]
        when _T_67 : @[Dispatcher.scala 107:63]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 109:30]
        else :
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 112:30]
      else :
        node _T_68 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 115:35]
        node _T_69 = tail(_T_68, 1) @[Dispatcher.scala 115:35]
        node _T_70 = asSInt(_T_69) @[Dispatcher.scala 115:35]
        node _T_71 = add(_T_70, x_PE_transl) @[Dispatcher.scala 115:50]
        node _T_72 = tail(_T_71, 1) @[Dispatcher.scala 115:50]
        node _T_73 = asSInt(_T_72) @[Dispatcher.scala 115:50]
        node _T_74 = geq(x_dest_transl, _T_73) @[Dispatcher.scala 115:32]
        when _T_74 : @[Dispatcher.scala 115:64]
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 117:30]
        else :
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 120:30]
    node _T_75 = eq(io.x_PE, io.x_0) @[Dispatcher.scala 126:18]
    node _T_76 = lt(io.y_PE, io.y_0) @[Dispatcher.scala 126:40]
    node _T_77 = and(_T_75, _T_76) @[Dispatcher.scala 126:29]
    when _T_77 : @[Dispatcher.scala 126:49]
      when y_PE_transl_odd : @[Dispatcher.scala 128:30]
        node _T_78 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 129:35]
        node _T_79 = tail(_T_78, 1) @[Dispatcher.scala 129:35]
        node _T_80 = asSInt(_T_79) @[Dispatcher.scala 129:35]
        node _T_81 = add(_T_80, y_PE_transl) @[Dispatcher.scala 129:50]
        node _T_82 = tail(_T_81, 1) @[Dispatcher.scala 129:50]
        node _T_83 = asSInt(_T_82) @[Dispatcher.scala 129:50]
        node _T_84 = geq(x_dest_transl, _T_83) @[Dispatcher.scala 129:32]
        when _T_84 : @[Dispatcher.scala 129:64]
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 131:30]
        else :
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 134:30]
      else :
        node _T_85 = sub(y_dest_transl, y_PE_transl) @[Dispatcher.scala 137:49]
        node _T_86 = tail(_T_85, 1) @[Dispatcher.scala 137:49]
        node _T_87 = asSInt(_T_86) @[Dispatcher.scala 137:49]
        node _T_88 = leq(x_dest_transl, _T_87) @[Dispatcher.scala 137:32]
        when _T_88 : @[Dispatcher.scala 137:63]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 139:30]
        else :
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 142:30]
    node _T_89 = head(x_PE_transl, 1) @[Dispatcher.scala 148:40]
    node sign_delta_x = bits(_T_89, 0, 0) @[Dispatcher.scala 148:44]
    node _T_90 = head(y_PE_transl, 1) @[Dispatcher.scala 149:40]
    node sign_delta_y = bits(_T_90, 0, 0) @[Dispatcher.scala 149:44]
    node _T_91 = xor(sign_delta_x, sign_delta_y) @[Dispatcher.scala 151:36]
    node uFactor_x = eq(_T_91, UInt<1>("h0")) @[Dispatcher.scala 151:21]
    node _T_92 = xor(x_PE_transl_odd, y_PE_transl_odd) @[Dispatcher.scala 152:39]
    node oddResult_x = xor(_T_92, uFactor_x) @[Dispatcher.scala 152:57]
    node uFactor_y = xor(sign_delta_x, sign_delta_y) @[Dispatcher.scala 154:34]
    node _T_93 = xor(x_PE_transl_odd, y_PE_transl_odd) @[Dispatcher.scala 155:39]
    node oddResult_y = xor(_T_93, uFactor_y) @[Dispatcher.scala 155:57]
    node _T_94 = neq(io.x_PE, io.x_0) @[Dispatcher.scala 158:18]
    node _T_95 = neq(io.y_PE, io.y_0) @[Dispatcher.scala 158:40]
    node _T_96 = and(_T_94, _T_95) @[Dispatcher.scala 158:29]
    when _T_96 : @[Dispatcher.scala 158:51]
      node _T_97 = eq(sign_delta_x, UInt<1>("h0")) @[Dispatcher.scala 160:29]
      node _T_98 = and(oddResult_x, _T_97) @[Dispatcher.scala 160:26]
      when _T_98 : @[Dispatcher.scala 160:43]
        out_selector <= UInt<2>("h2") @[Dispatcher.scala 162:26]
      else :
        node _T_99 = and(oddResult_x, sign_delta_x) @[Dispatcher.scala 164:32]
        when _T_99 : @[Dispatcher.scala 164:48]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 166:26]
      node _T_100 = eq(sign_delta_y, UInt<1>("h0")) @[Dispatcher.scala 169:29]
      node _T_101 = and(oddResult_y, _T_100) @[Dispatcher.scala 169:26]
      when _T_101 : @[Dispatcher.scala 169:43]
        out_selector <= UInt<3>("h4") @[Dispatcher.scala 171:26]
      else :
        node _T_102 = and(oddResult_y, sign_delta_y) @[Dispatcher.scala 173:32]
        when _T_102 : @[Dispatcher.scala 173:48]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 175:26]

  module Dispatcher_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip x_PE : UInt<3>, flip y_PE : UInt<3>, flip x_0 : UInt<3>, flip y_0 : UInt<3>, flip x_dest : UInt<3>, flip y_dest : UInt<3>, left : UInt<1>, right : UInt<1>, up : UInt<1>, bottom : UInt<1>, this_PE : UInt<1>}

    wire out_selector : UInt<4> @[Dispatcher.scala 34:28]
    node _T = eq(out_selector, UInt<1>("h1")) @[Dispatcher.scala 36:29]
    node _T_1 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 36:46]
    node _T_2 = and(_T, _T_1) @[Dispatcher.scala 36:43]
    io.left <= _T_2 @[Dispatcher.scala 36:13]
    node _T_3 = eq(out_selector, UInt<2>("h2")) @[Dispatcher.scala 37:30]
    node _T_4 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 37:47]
    node _T_5 = and(_T_3, _T_4) @[Dispatcher.scala 37:44]
    io.right <= _T_5 @[Dispatcher.scala 37:14]
    node _T_6 = eq(out_selector, UInt<3>("h4")) @[Dispatcher.scala 38:27]
    node _T_7 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 38:44]
    node _T_8 = and(_T_6, _T_7) @[Dispatcher.scala 38:41]
    io.up <= _T_8 @[Dispatcher.scala 38:11]
    node _T_9 = eq(out_selector, UInt<4>("h8")) @[Dispatcher.scala 39:31]
    node _T_10 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 39:48]
    node _T_11 = and(_T_9, _T_10) @[Dispatcher.scala 39:45]
    io.bottom <= _T_11 @[Dispatcher.scala 39:15]
    node _T_12 = eq(io.x_dest, io.x_PE) @[Dispatcher.scala 44:20]
    node _T_13 = eq(io.y_dest, io.y_PE) @[Dispatcher.scala 44:45]
    node _T_14 = and(_T_12, _T_13) @[Dispatcher.scala 44:32]
    when _T_14 : @[Dispatcher.scala 44:57]
      io.this_PE <= UInt<1>("h1") @[Dispatcher.scala 45:20]
      out_selector <= UInt<1>("h0") @[Dispatcher.scala 46:22]
    else :
      io.this_PE <= UInt<1>("h0") @[Dispatcher.scala 48:20]
      out_selector <= UInt<1>("h0") @[Dispatcher.scala 49:22]
    node _T_15 = cvt(io.x_PE) @[Dispatcher.scala 52:31]
    node _T_16 = cvt(io.x_0) @[Dispatcher.scala 52:45]
    node _T_17 = sub(_T_15, _T_16) @[Dispatcher.scala 52:36]
    node _T_18 = tail(_T_17, 1) @[Dispatcher.scala 52:36]
    node x_PE_transl = asSInt(_T_18) @[Dispatcher.scala 52:36]
    node _T_19 = cvt(io.y_PE) @[Dispatcher.scala 53:31]
    node _T_20 = cvt(io.y_0) @[Dispatcher.scala 53:45]
    node _T_21 = sub(_T_19, _T_20) @[Dispatcher.scala 53:36]
    node _T_22 = tail(_T_21, 1) @[Dispatcher.scala 53:36]
    node y_PE_transl = asSInt(_T_22) @[Dispatcher.scala 53:36]
    node _T_23 = bits(x_PE_transl, 0, 0) @[Dispatcher.scala 54:38]
    node x_PE_transl_odd = eq(_T_23, UInt<1>("h1")) @[Dispatcher.scala 54:42]
    node _T_24 = bits(y_PE_transl, 0, 0) @[Dispatcher.scala 55:38]
    node y_PE_transl_odd = eq(_T_24, UInt<1>("h1")) @[Dispatcher.scala 55:42]
    node _T_25 = cvt(io.x_dest) @[Dispatcher.scala 56:35]
    node _T_26 = cvt(io.x_0) @[Dispatcher.scala 56:49]
    node _T_27 = sub(_T_25, _T_26) @[Dispatcher.scala 56:40]
    node _T_28 = tail(_T_27, 1) @[Dispatcher.scala 56:40]
    node x_dest_transl = asSInt(_T_28) @[Dispatcher.scala 56:40]
    node _T_29 = cvt(io.y_dest) @[Dispatcher.scala 57:35]
    node _T_30 = cvt(io.y_0) @[Dispatcher.scala 57:49]
    node _T_31 = sub(_T_29, _T_30) @[Dispatcher.scala 57:40]
    node _T_32 = tail(_T_31, 1) @[Dispatcher.scala 57:40]
    node y_dest_transl = asSInt(_T_32) @[Dispatcher.scala 57:40]
    node _T_33 = gt(io.x_PE, io.x_0) @[Dispatcher.scala 60:18]
    node _T_34 = eq(io.y_PE, io.y_0) @[Dispatcher.scala 60:38]
    node _T_35 = and(_T_33, _T_34) @[Dispatcher.scala 60:27]
    when _T_35 : @[Dispatcher.scala 60:49]
      when x_PE_transl_odd : @[Dispatcher.scala 62:30]
        node _T_36 = add(y_dest_transl, x_PE_transl) @[Dispatcher.scala 63:49]
        node _T_37 = tail(_T_36, 1) @[Dispatcher.scala 63:49]
        node _T_38 = asSInt(_T_37) @[Dispatcher.scala 63:49]
        node _T_39 = leq(x_dest_transl, _T_38) @[Dispatcher.scala 63:32]
        when _T_39 : @[Dispatcher.scala 63:63]
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 65:30]
        else :
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 68:30]
      else :
        node _T_40 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 71:35]
        node _T_41 = tail(_T_40, 1) @[Dispatcher.scala 71:35]
        node _T_42 = asSInt(_T_41) @[Dispatcher.scala 71:35]
        node _T_43 = add(_T_42, x_PE_transl) @[Dispatcher.scala 71:50]
        node _T_44 = tail(_T_43, 1) @[Dispatcher.scala 71:50]
        node _T_45 = asSInt(_T_44) @[Dispatcher.scala 71:50]
        node _T_46 = leq(x_dest_transl, _T_45) @[Dispatcher.scala 71:32]
        when _T_46 : @[Dispatcher.scala 71:64]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 73:30]
        else :
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 76:30]
    node _T_47 = eq(io.x_PE, io.x_0) @[Dispatcher.scala 82:18]
    node _T_48 = gt(io.y_PE, io.y_0) @[Dispatcher.scala 82:40]
    node _T_49 = and(_T_47, _T_48) @[Dispatcher.scala 82:29]
    when _T_49 : @[Dispatcher.scala 82:49]
      when y_PE_transl_odd : @[Dispatcher.scala 84:30]
        node _T_50 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 85:35]
        node _T_51 = tail(_T_50, 1) @[Dispatcher.scala 85:35]
        node _T_52 = asSInt(_T_51) @[Dispatcher.scala 85:35]
        node _T_53 = add(_T_52, y_PE_transl) @[Dispatcher.scala 85:50]
        node _T_54 = tail(_T_53, 1) @[Dispatcher.scala 85:50]
        node _T_55 = asSInt(_T_54) @[Dispatcher.scala 85:50]
        node _T_56 = leq(x_dest_transl, _T_55) @[Dispatcher.scala 85:32]
        when _T_56 : @[Dispatcher.scala 85:64]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 87:30]
        else :
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 90:30]
      else :
        node _T_57 = sub(y_dest_transl, y_PE_transl) @[Dispatcher.scala 93:49]
        node _T_58 = tail(_T_57, 1) @[Dispatcher.scala 93:49]
        node _T_59 = asSInt(_T_58) @[Dispatcher.scala 93:49]
        node _T_60 = geq(x_dest_transl, _T_59) @[Dispatcher.scala 93:32]
        when _T_60 : @[Dispatcher.scala 93:63]
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 95:30]
        else :
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 98:30]
    node _T_61 = lt(io.x_PE, io.x_0) @[Dispatcher.scala 104:18]
    node _T_62 = eq(io.y_PE, io.y_0) @[Dispatcher.scala 104:38]
    node _T_63 = and(_T_61, _T_62) @[Dispatcher.scala 104:27]
    when _T_63 : @[Dispatcher.scala 104:49]
      when x_PE_transl_odd : @[Dispatcher.scala 106:30]
        node _T_64 = add(y_dest_transl, x_PE_transl) @[Dispatcher.scala 107:49]
        node _T_65 = tail(_T_64, 1) @[Dispatcher.scala 107:49]
        node _T_66 = asSInt(_T_65) @[Dispatcher.scala 107:49]
        node _T_67 = geq(x_dest_transl, _T_66) @[Dispatcher.scala 107:32]
        when _T_67 : @[Dispatcher.scala 107:63]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 109:30]
        else :
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 112:30]
      else :
        node _T_68 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 115:35]
        node _T_69 = tail(_T_68, 1) @[Dispatcher.scala 115:35]
        node _T_70 = asSInt(_T_69) @[Dispatcher.scala 115:35]
        node _T_71 = add(_T_70, x_PE_transl) @[Dispatcher.scala 115:50]
        node _T_72 = tail(_T_71, 1) @[Dispatcher.scala 115:50]
        node _T_73 = asSInt(_T_72) @[Dispatcher.scala 115:50]
        node _T_74 = geq(x_dest_transl, _T_73) @[Dispatcher.scala 115:32]
        when _T_74 : @[Dispatcher.scala 115:64]
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 117:30]
        else :
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 120:30]
    node _T_75 = eq(io.x_PE, io.x_0) @[Dispatcher.scala 126:18]
    node _T_76 = lt(io.y_PE, io.y_0) @[Dispatcher.scala 126:40]
    node _T_77 = and(_T_75, _T_76) @[Dispatcher.scala 126:29]
    when _T_77 : @[Dispatcher.scala 126:49]
      when y_PE_transl_odd : @[Dispatcher.scala 128:30]
        node _T_78 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 129:35]
        node _T_79 = tail(_T_78, 1) @[Dispatcher.scala 129:35]
        node _T_80 = asSInt(_T_79) @[Dispatcher.scala 129:35]
        node _T_81 = add(_T_80, y_PE_transl) @[Dispatcher.scala 129:50]
        node _T_82 = tail(_T_81, 1) @[Dispatcher.scala 129:50]
        node _T_83 = asSInt(_T_82) @[Dispatcher.scala 129:50]
        node _T_84 = geq(x_dest_transl, _T_83) @[Dispatcher.scala 129:32]
        when _T_84 : @[Dispatcher.scala 129:64]
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 131:30]
        else :
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 134:30]
      else :
        node _T_85 = sub(y_dest_transl, y_PE_transl) @[Dispatcher.scala 137:49]
        node _T_86 = tail(_T_85, 1) @[Dispatcher.scala 137:49]
        node _T_87 = asSInt(_T_86) @[Dispatcher.scala 137:49]
        node _T_88 = leq(x_dest_transl, _T_87) @[Dispatcher.scala 137:32]
        when _T_88 : @[Dispatcher.scala 137:63]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 139:30]
        else :
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 142:30]
    node _T_89 = head(x_PE_transl, 1) @[Dispatcher.scala 148:40]
    node sign_delta_x = bits(_T_89, 0, 0) @[Dispatcher.scala 148:44]
    node _T_90 = head(y_PE_transl, 1) @[Dispatcher.scala 149:40]
    node sign_delta_y = bits(_T_90, 0, 0) @[Dispatcher.scala 149:44]
    node _T_91 = xor(sign_delta_x, sign_delta_y) @[Dispatcher.scala 151:36]
    node uFactor_x = eq(_T_91, UInt<1>("h0")) @[Dispatcher.scala 151:21]
    node _T_92 = xor(x_PE_transl_odd, y_PE_transl_odd) @[Dispatcher.scala 152:39]
    node oddResult_x = xor(_T_92, uFactor_x) @[Dispatcher.scala 152:57]
    node uFactor_y = xor(sign_delta_x, sign_delta_y) @[Dispatcher.scala 154:34]
    node _T_93 = xor(x_PE_transl_odd, y_PE_transl_odd) @[Dispatcher.scala 155:39]
    node oddResult_y = xor(_T_93, uFactor_y) @[Dispatcher.scala 155:57]
    node _T_94 = neq(io.x_PE, io.x_0) @[Dispatcher.scala 158:18]
    node _T_95 = neq(io.y_PE, io.y_0) @[Dispatcher.scala 158:40]
    node _T_96 = and(_T_94, _T_95) @[Dispatcher.scala 158:29]
    when _T_96 : @[Dispatcher.scala 158:51]
      node _T_97 = eq(sign_delta_x, UInt<1>("h0")) @[Dispatcher.scala 160:29]
      node _T_98 = and(oddResult_x, _T_97) @[Dispatcher.scala 160:26]
      when _T_98 : @[Dispatcher.scala 160:43]
        out_selector <= UInt<2>("h2") @[Dispatcher.scala 162:26]
      else :
        node _T_99 = and(oddResult_x, sign_delta_x) @[Dispatcher.scala 164:32]
        when _T_99 : @[Dispatcher.scala 164:48]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 166:26]
      node _T_100 = eq(sign_delta_y, UInt<1>("h0")) @[Dispatcher.scala 169:29]
      node _T_101 = and(oddResult_y, _T_100) @[Dispatcher.scala 169:26]
      when _T_101 : @[Dispatcher.scala 169:43]
        out_selector <= UInt<3>("h4") @[Dispatcher.scala 171:26]
      else :
        node _T_102 = and(oddResult_y, sign_delta_y) @[Dispatcher.scala 173:32]
        when _T_102 : @[Dispatcher.scala 173:48]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 175:26]

  module GenerationDispatcher :
    input clock : Clock
    input reset : Reset
    output io : { flip x_PE : UInt<3>, flip y_PE : UInt<3>, flip x_dest : UInt<3>, flip y_dest : UInt<3>, left : UInt<1>, right : UInt<1>, up : UInt<1>, bottom : UInt<1>}

    wire out_selector : UInt<4> @[Dispatcher.scala 201:28]
    node _T = eq(out_selector, UInt<1>("h1")) @[Dispatcher.scala 205:29]
    io.left <= _T @[Dispatcher.scala 205:13]
    node _T_1 = eq(out_selector, UInt<2>("h2")) @[Dispatcher.scala 206:30]
    io.right <= _T_1 @[Dispatcher.scala 206:14]
    node _T_2 = eq(out_selector, UInt<3>("h4")) @[Dispatcher.scala 207:27]
    io.up <= _T_2 @[Dispatcher.scala 207:11]
    node _T_3 = eq(out_selector, UInt<4>("h8")) @[Dispatcher.scala 208:31]
    io.bottom <= _T_3 @[Dispatcher.scala 208:15]
    node _T_4 = cvt(io.x_dest) @[Dispatcher.scala 210:35]
    node _T_5 = cvt(io.x_PE) @[Dispatcher.scala 210:50]
    node _T_6 = sub(_T_4, _T_5) @[Dispatcher.scala 210:40]
    node _T_7 = tail(_T_6, 1) @[Dispatcher.scala 210:40]
    node x_dest_transl = asSInt(_T_7) @[Dispatcher.scala 210:40]
    node _T_8 = cvt(io.y_dest) @[Dispatcher.scala 211:35]
    node _T_9 = cvt(io.y_PE) @[Dispatcher.scala 211:50]
    node _T_10 = sub(_T_8, _T_9) @[Dispatcher.scala 211:40]
    node _T_11 = tail(_T_10, 1) @[Dispatcher.scala 211:40]
    node y_dest_transl = asSInt(_T_11) @[Dispatcher.scala 211:40]
    node _T_12 = leq(x_dest_transl, y_dest_transl) @[Dispatcher.scala 213:24]
    node _T_13 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 213:60]
    node _T_14 = tail(_T_13, 1) @[Dispatcher.scala 213:60]
    node _T_15 = asSInt(_T_14) @[Dispatcher.scala 213:60]
    node _T_16 = lt(x_dest_transl, _T_15) @[Dispatcher.scala 213:58]
    node _T_17 = and(_T_12, _T_16) @[Dispatcher.scala 213:41]
    when _T_17 : @[Dispatcher.scala 213:75]
      out_selector <= UInt<1>("h1") @[Dispatcher.scala 215:22]
    else :
      node _T_18 = geq(x_dest_transl, y_dest_transl) @[Dispatcher.scala 217:30]
      node _T_19 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 217:66]
      node _T_20 = tail(_T_19, 1) @[Dispatcher.scala 217:66]
      node _T_21 = asSInt(_T_20) @[Dispatcher.scala 217:66]
      node _T_22 = gt(x_dest_transl, _T_21) @[Dispatcher.scala 217:64]
      node _T_23 = and(_T_18, _T_22) @[Dispatcher.scala 217:47]
      when _T_23 : @[Dispatcher.scala 217:81]
        out_selector <= UInt<2>("h2") @[Dispatcher.scala 219:22]
      else :
        node _T_24 = lt(x_dest_transl, y_dest_transl) @[Dispatcher.scala 221:30]
        node _T_25 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 221:66]
        node _T_26 = tail(_T_25, 1) @[Dispatcher.scala 221:66]
        node _T_27 = asSInt(_T_26) @[Dispatcher.scala 221:66]
        node _T_28 = geq(x_dest_transl, _T_27) @[Dispatcher.scala 221:63]
        node _T_29 = and(_T_24, _T_28) @[Dispatcher.scala 221:46]
        when _T_29 : @[Dispatcher.scala 221:81]
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 223:22]
        else :
          node _T_30 = gt(x_dest_transl, y_dest_transl) @[Dispatcher.scala 225:30]
          node _T_31 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 225:66]
          node _T_32 = tail(_T_31, 1) @[Dispatcher.scala 225:66]
          node _T_33 = asSInt(_T_32) @[Dispatcher.scala 225:66]
          node _T_34 = leq(x_dest_transl, _T_33) @[Dispatcher.scala 225:63]
          node _T_35 = and(_T_30, _T_34) @[Dispatcher.scala 225:46]
          when _T_35 : @[Dispatcher.scala 225:81]
            out_selector <= UInt<4>("h8") @[Dispatcher.scala 227:22]
          else :
            out_selector <= UInt<1>("h0") @[Dispatcher.scala 231:22]

  module GenerationDispatcher_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip x_PE : UInt<3>, flip y_PE : UInt<3>, flip x_dest : UInt<3>, flip y_dest : UInt<3>, left : UInt<1>, right : UInt<1>, up : UInt<1>, bottom : UInt<1>}

    wire out_selector : UInt<4> @[Dispatcher.scala 201:28]
    node _T = eq(out_selector, UInt<1>("h1")) @[Dispatcher.scala 205:29]
    io.left <= _T @[Dispatcher.scala 205:13]
    node _T_1 = eq(out_selector, UInt<2>("h2")) @[Dispatcher.scala 206:30]
    io.right <= _T_1 @[Dispatcher.scala 206:14]
    node _T_2 = eq(out_selector, UInt<3>("h4")) @[Dispatcher.scala 207:27]
    io.up <= _T_2 @[Dispatcher.scala 207:11]
    node _T_3 = eq(out_selector, UInt<4>("h8")) @[Dispatcher.scala 208:31]
    io.bottom <= _T_3 @[Dispatcher.scala 208:15]
    node _T_4 = cvt(io.x_dest) @[Dispatcher.scala 210:35]
    node _T_5 = cvt(io.x_PE) @[Dispatcher.scala 210:50]
    node _T_6 = sub(_T_4, _T_5) @[Dispatcher.scala 210:40]
    node _T_7 = tail(_T_6, 1) @[Dispatcher.scala 210:40]
    node x_dest_transl = asSInt(_T_7) @[Dispatcher.scala 210:40]
    node _T_8 = cvt(io.y_dest) @[Dispatcher.scala 211:35]
    node _T_9 = cvt(io.y_PE) @[Dispatcher.scala 211:50]
    node _T_10 = sub(_T_8, _T_9) @[Dispatcher.scala 211:40]
    node _T_11 = tail(_T_10, 1) @[Dispatcher.scala 211:40]
    node y_dest_transl = asSInt(_T_11) @[Dispatcher.scala 211:40]
    node _T_12 = leq(x_dest_transl, y_dest_transl) @[Dispatcher.scala 213:24]
    node _T_13 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 213:60]
    node _T_14 = tail(_T_13, 1) @[Dispatcher.scala 213:60]
    node _T_15 = asSInt(_T_14) @[Dispatcher.scala 213:60]
    node _T_16 = lt(x_dest_transl, _T_15) @[Dispatcher.scala 213:58]
    node _T_17 = and(_T_12, _T_16) @[Dispatcher.scala 213:41]
    when _T_17 : @[Dispatcher.scala 213:75]
      out_selector <= UInt<1>("h1") @[Dispatcher.scala 215:22]
    else :
      node _T_18 = geq(x_dest_transl, y_dest_transl) @[Dispatcher.scala 217:30]
      node _T_19 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 217:66]
      node _T_20 = tail(_T_19, 1) @[Dispatcher.scala 217:66]
      node _T_21 = asSInt(_T_20) @[Dispatcher.scala 217:66]
      node _T_22 = gt(x_dest_transl, _T_21) @[Dispatcher.scala 217:64]
      node _T_23 = and(_T_18, _T_22) @[Dispatcher.scala 217:47]
      when _T_23 : @[Dispatcher.scala 217:81]
        out_selector <= UInt<2>("h2") @[Dispatcher.scala 219:22]
      else :
        node _T_24 = lt(x_dest_transl, y_dest_transl) @[Dispatcher.scala 221:30]
        node _T_25 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 221:66]
        node _T_26 = tail(_T_25, 1) @[Dispatcher.scala 221:66]
        node _T_27 = asSInt(_T_26) @[Dispatcher.scala 221:66]
        node _T_28 = geq(x_dest_transl, _T_27) @[Dispatcher.scala 221:63]
        node _T_29 = and(_T_24, _T_28) @[Dispatcher.scala 221:46]
        when _T_29 : @[Dispatcher.scala 221:81]
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 223:22]
        else :
          node _T_30 = gt(x_dest_transl, y_dest_transl) @[Dispatcher.scala 225:30]
          node _T_31 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 225:66]
          node _T_32 = tail(_T_31, 1) @[Dispatcher.scala 225:66]
          node _T_33 = asSInt(_T_32) @[Dispatcher.scala 225:66]
          node _T_34 = leq(x_dest_transl, _T_33) @[Dispatcher.scala 225:63]
          node _T_35 = and(_T_30, _T_34) @[Dispatcher.scala 225:46]
          when _T_35 : @[Dispatcher.scala 225:81]
            out_selector <= UInt<4>("h8") @[Dispatcher.scala 227:22]
          else :
            out_selector <= UInt<1>("h0") @[Dispatcher.scala 231:22]

  module GenerationDispatcher_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip x_PE : UInt<3>, flip y_PE : UInt<3>, flip x_dest : UInt<3>, flip y_dest : UInt<3>, left : UInt<1>, right : UInt<1>, up : UInt<1>, bottom : UInt<1>}

    wire out_selector : UInt<4> @[Dispatcher.scala 201:28]
    node _T = eq(out_selector, UInt<1>("h1")) @[Dispatcher.scala 205:29]
    io.left <= _T @[Dispatcher.scala 205:13]
    node _T_1 = eq(out_selector, UInt<2>("h2")) @[Dispatcher.scala 206:30]
    io.right <= _T_1 @[Dispatcher.scala 206:14]
    node _T_2 = eq(out_selector, UInt<3>("h4")) @[Dispatcher.scala 207:27]
    io.up <= _T_2 @[Dispatcher.scala 207:11]
    node _T_3 = eq(out_selector, UInt<4>("h8")) @[Dispatcher.scala 208:31]
    io.bottom <= _T_3 @[Dispatcher.scala 208:15]
    node _T_4 = cvt(io.x_dest) @[Dispatcher.scala 210:35]
    node _T_5 = cvt(io.x_PE) @[Dispatcher.scala 210:50]
    node _T_6 = sub(_T_4, _T_5) @[Dispatcher.scala 210:40]
    node _T_7 = tail(_T_6, 1) @[Dispatcher.scala 210:40]
    node x_dest_transl = asSInt(_T_7) @[Dispatcher.scala 210:40]
    node _T_8 = cvt(io.y_dest) @[Dispatcher.scala 211:35]
    node _T_9 = cvt(io.y_PE) @[Dispatcher.scala 211:50]
    node _T_10 = sub(_T_8, _T_9) @[Dispatcher.scala 211:40]
    node _T_11 = tail(_T_10, 1) @[Dispatcher.scala 211:40]
    node y_dest_transl = asSInt(_T_11) @[Dispatcher.scala 211:40]
    node _T_12 = leq(x_dest_transl, y_dest_transl) @[Dispatcher.scala 213:24]
    node _T_13 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 213:60]
    node _T_14 = tail(_T_13, 1) @[Dispatcher.scala 213:60]
    node _T_15 = asSInt(_T_14) @[Dispatcher.scala 213:60]
    node _T_16 = lt(x_dest_transl, _T_15) @[Dispatcher.scala 213:58]
    node _T_17 = and(_T_12, _T_16) @[Dispatcher.scala 213:41]
    when _T_17 : @[Dispatcher.scala 213:75]
      out_selector <= UInt<1>("h1") @[Dispatcher.scala 215:22]
    else :
      node _T_18 = geq(x_dest_transl, y_dest_transl) @[Dispatcher.scala 217:30]
      node _T_19 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 217:66]
      node _T_20 = tail(_T_19, 1) @[Dispatcher.scala 217:66]
      node _T_21 = asSInt(_T_20) @[Dispatcher.scala 217:66]
      node _T_22 = gt(x_dest_transl, _T_21) @[Dispatcher.scala 217:64]
      node _T_23 = and(_T_18, _T_22) @[Dispatcher.scala 217:47]
      when _T_23 : @[Dispatcher.scala 217:81]
        out_selector <= UInt<2>("h2") @[Dispatcher.scala 219:22]
      else :
        node _T_24 = lt(x_dest_transl, y_dest_transl) @[Dispatcher.scala 221:30]
        node _T_25 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 221:66]
        node _T_26 = tail(_T_25, 1) @[Dispatcher.scala 221:66]
        node _T_27 = asSInt(_T_26) @[Dispatcher.scala 221:66]
        node _T_28 = geq(x_dest_transl, _T_27) @[Dispatcher.scala 221:63]
        node _T_29 = and(_T_24, _T_28) @[Dispatcher.scala 221:46]
        when _T_29 : @[Dispatcher.scala 221:81]
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 223:22]
        else :
          node _T_30 = gt(x_dest_transl, y_dest_transl) @[Dispatcher.scala 225:30]
          node _T_31 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 225:66]
          node _T_32 = tail(_T_31, 1) @[Dispatcher.scala 225:66]
          node _T_33 = asSInt(_T_32) @[Dispatcher.scala 225:66]
          node _T_34 = leq(x_dest_transl, _T_33) @[Dispatcher.scala 225:63]
          node _T_35 = and(_T_30, _T_34) @[Dispatcher.scala 225:46]
          when _T_35 : @[Dispatcher.scala 225:81]
            out_selector <= UInt<4>("h8") @[Dispatcher.scala 227:22]
          else :
            out_selector <= UInt<1>("h0") @[Dispatcher.scala 231:22]

  module GenerationDispatcher_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip x_PE : UInt<3>, flip y_PE : UInt<3>, flip x_dest : UInt<3>, flip y_dest : UInt<3>, left : UInt<1>, right : UInt<1>, up : UInt<1>, bottom : UInt<1>}

    wire out_selector : UInt<4> @[Dispatcher.scala 201:28]
    node _T = eq(out_selector, UInt<1>("h1")) @[Dispatcher.scala 205:29]
    io.left <= _T @[Dispatcher.scala 205:13]
    node _T_1 = eq(out_selector, UInt<2>("h2")) @[Dispatcher.scala 206:30]
    io.right <= _T_1 @[Dispatcher.scala 206:14]
    node _T_2 = eq(out_selector, UInt<3>("h4")) @[Dispatcher.scala 207:27]
    io.up <= _T_2 @[Dispatcher.scala 207:11]
    node _T_3 = eq(out_selector, UInt<4>("h8")) @[Dispatcher.scala 208:31]
    io.bottom <= _T_3 @[Dispatcher.scala 208:15]
    node _T_4 = cvt(io.x_dest) @[Dispatcher.scala 210:35]
    node _T_5 = cvt(io.x_PE) @[Dispatcher.scala 210:50]
    node _T_6 = sub(_T_4, _T_5) @[Dispatcher.scala 210:40]
    node _T_7 = tail(_T_6, 1) @[Dispatcher.scala 210:40]
    node x_dest_transl = asSInt(_T_7) @[Dispatcher.scala 210:40]
    node _T_8 = cvt(io.y_dest) @[Dispatcher.scala 211:35]
    node _T_9 = cvt(io.y_PE) @[Dispatcher.scala 211:50]
    node _T_10 = sub(_T_8, _T_9) @[Dispatcher.scala 211:40]
    node _T_11 = tail(_T_10, 1) @[Dispatcher.scala 211:40]
    node y_dest_transl = asSInt(_T_11) @[Dispatcher.scala 211:40]
    node _T_12 = leq(x_dest_transl, y_dest_transl) @[Dispatcher.scala 213:24]
    node _T_13 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 213:60]
    node _T_14 = tail(_T_13, 1) @[Dispatcher.scala 213:60]
    node _T_15 = asSInt(_T_14) @[Dispatcher.scala 213:60]
    node _T_16 = lt(x_dest_transl, _T_15) @[Dispatcher.scala 213:58]
    node _T_17 = and(_T_12, _T_16) @[Dispatcher.scala 213:41]
    when _T_17 : @[Dispatcher.scala 213:75]
      out_selector <= UInt<1>("h1") @[Dispatcher.scala 215:22]
    else :
      node _T_18 = geq(x_dest_transl, y_dest_transl) @[Dispatcher.scala 217:30]
      node _T_19 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 217:66]
      node _T_20 = tail(_T_19, 1) @[Dispatcher.scala 217:66]
      node _T_21 = asSInt(_T_20) @[Dispatcher.scala 217:66]
      node _T_22 = gt(x_dest_transl, _T_21) @[Dispatcher.scala 217:64]
      node _T_23 = and(_T_18, _T_22) @[Dispatcher.scala 217:47]
      when _T_23 : @[Dispatcher.scala 217:81]
        out_selector <= UInt<2>("h2") @[Dispatcher.scala 219:22]
      else :
        node _T_24 = lt(x_dest_transl, y_dest_transl) @[Dispatcher.scala 221:30]
        node _T_25 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 221:66]
        node _T_26 = tail(_T_25, 1) @[Dispatcher.scala 221:66]
        node _T_27 = asSInt(_T_26) @[Dispatcher.scala 221:66]
        node _T_28 = geq(x_dest_transl, _T_27) @[Dispatcher.scala 221:63]
        node _T_29 = and(_T_24, _T_28) @[Dispatcher.scala 221:46]
        when _T_29 : @[Dispatcher.scala 221:81]
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 223:22]
        else :
          node _T_30 = gt(x_dest_transl, y_dest_transl) @[Dispatcher.scala 225:30]
          node _T_31 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 225:66]
          node _T_32 = tail(_T_31, 1) @[Dispatcher.scala 225:66]
          node _T_33 = asSInt(_T_32) @[Dispatcher.scala 225:66]
          node _T_34 = leq(x_dest_transl, _T_33) @[Dispatcher.scala 225:63]
          node _T_35 = and(_T_30, _T_34) @[Dispatcher.scala 225:46]
          when _T_35 : @[Dispatcher.scala 225:81]
            out_selector <= UInt<4>("h8") @[Dispatcher.scala 227:22]
          else :
            out_selector <= UInt<1>("h0") @[Dispatcher.scala 231:22]

  module MyPriorityMux :
    input clock : Clock
    input reset : Reset
    output io : { flip valid : UInt<1>[4], flip in_bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}[4], out_valid : UInt<1>, out_val : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>}}

    wire first : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>} @[PEmux.scala 44:19]
    wire myseq2_1 : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>} @[PEmux.scala 45:20]
    wire myseq2_2 : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>} @[PEmux.scala 46:19]
    wire fourth : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>} @[PEmux.scala 47:20]
    wire myseq2_4 : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>} @[PEmux.scala 48:28]
    first.bits.pos <= io.in_bits[0].pos @[PEmux.scala 50:14]
    first.bits.y_dest <= io.in_bits[0].y_dest @[PEmux.scala 50:14]
    first.bits.x_dest <= io.in_bits[0].x_dest @[PEmux.scala 50:14]
    first.bits.y_0 <= io.in_bits[0].y_0 @[PEmux.scala 50:14]
    first.bits.x_0 <= io.in_bits[0].x_0 @[PEmux.scala 50:14]
    first.bits.data <= io.in_bits[0].data @[PEmux.scala 50:14]
    myseq2_1.bits.pos <= io.in_bits[1].pos @[PEmux.scala 51:15]
    myseq2_1.bits.y_dest <= io.in_bits[1].y_dest @[PEmux.scala 51:15]
    myseq2_1.bits.x_dest <= io.in_bits[1].x_dest @[PEmux.scala 51:15]
    myseq2_1.bits.y_0 <= io.in_bits[1].y_0 @[PEmux.scala 51:15]
    myseq2_1.bits.x_0 <= io.in_bits[1].x_0 @[PEmux.scala 51:15]
    myseq2_1.bits.data <= io.in_bits[1].data @[PEmux.scala 51:15]
    myseq2_2.bits.pos <= io.in_bits[2].pos @[PEmux.scala 52:14]
    myseq2_2.bits.y_dest <= io.in_bits[2].y_dest @[PEmux.scala 52:14]
    myseq2_2.bits.x_dest <= io.in_bits[2].x_dest @[PEmux.scala 52:14]
    myseq2_2.bits.y_0 <= io.in_bits[2].y_0 @[PEmux.scala 52:14]
    myseq2_2.bits.x_0 <= io.in_bits[2].x_0 @[PEmux.scala 52:14]
    myseq2_2.bits.data <= io.in_bits[2].data @[PEmux.scala 52:14]
    fourth.bits.pos <= io.in_bits[3].pos @[PEmux.scala 53:15]
    fourth.bits.y_dest <= io.in_bits[3].y_dest @[PEmux.scala 53:15]
    fourth.bits.x_dest <= io.in_bits[3].x_dest @[PEmux.scala 53:15]
    fourth.bits.y_0 <= io.in_bits[3].y_0 @[PEmux.scala 53:15]
    fourth.bits.x_0 <= io.in_bits[3].x_0 @[PEmux.scala 53:15]
    fourth.bits.data <= io.in_bits[3].data @[PEmux.scala 53:15]
    myseq2_4.bits.data <= UInt<1>("h0") @[PEmux.scala 55:28]
    myseq2_4.bits.x_0 <= UInt<1>("h0") @[PEmux.scala 56:27]
    myseq2_4.bits.y_0 <= UInt<1>("h0") @[PEmux.scala 57:27]
    myseq2_4.bits.x_dest <= UInt<1>("h0") @[PEmux.scala 58:30]
    myseq2_4.bits.y_dest <= UInt<1>("h0") @[PEmux.scala 59:30]
    myseq2_4.bits.pos <= UInt<1>("h0") @[PEmux.scala 60:27]
    first.selected <= UInt<1>("h1") @[PEmux.scala 63:18]
    myseq2_1.selected <= UInt<2>("h2") @[PEmux.scala 64:19]
    myseq2_2.selected <= UInt<3>("h4") @[PEmux.scala 65:18]
    fourth.selected <= UInt<4>("h8") @[PEmux.scala 66:19]
    myseq2_4.selected <= UInt<1>("h0") @[PEmux.scala 67:27]
    node _T = mux(io.valid[3], fourth, myseq2_4) @[Mux.scala 47:69]
    node _T_1 = mux(io.valid[2], myseq2_2, _T) @[Mux.scala 47:69]
    node _T_2 = mux(io.valid[1], myseq2_1, _T_1) @[Mux.scala 47:69]
    node mux1 = mux(io.valid[0], first, _T_2) @[Mux.scala 47:69]
    io.out_val.selected <= mux1.selected @[PEmux.scala 76:14]
    io.out_val.bits.pos <= mux1.bits.pos @[PEmux.scala 76:14]
    io.out_val.bits.y_dest <= mux1.bits.y_dest @[PEmux.scala 76:14]
    io.out_val.bits.x_dest <= mux1.bits.x_dest @[PEmux.scala 76:14]
    io.out_val.bits.y_0 <= mux1.bits.y_0 @[PEmux.scala 76:14]
    io.out_val.bits.x_0 <= mux1.bits.x_0 @[PEmux.scala 76:14]
    io.out_val.bits.data <= mux1.bits.data @[PEmux.scala 76:14]
    node _T_3 = eq(io.valid[0], UInt<1>("h0")) @[PEmux.scala 78:18]
    node _T_4 = eq(io.valid[1], UInt<1>("h0")) @[PEmux.scala 78:34]
    node _T_5 = and(_T_3, _T_4) @[PEmux.scala 78:31]
    node _T_6 = eq(io.valid[2], UInt<1>("h0")) @[PEmux.scala 78:50]
    node _T_7 = and(_T_5, _T_6) @[PEmux.scala 78:47]
    node _T_8 = eq(io.valid[3], UInt<1>("h0")) @[PEmux.scala 78:66]
    node no_valid = and(_T_7, _T_8) @[PEmux.scala 78:63]
    node _T_9 = mux(no_valid, UInt<1>("h0"), UInt<1>("h1")) @[PEmux.scala 79:22]
    io.out_valid <= _T_9 @[PEmux.scala 79:16]

  module MyPriorityMux_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip valid : UInt<1>[4], flip in_bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}[4], out_valid : UInt<1>, out_val : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>}}

    wire first : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>} @[PEmux.scala 44:19]
    wire myseq2_1 : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>} @[PEmux.scala 45:20]
    wire myseq2_2 : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>} @[PEmux.scala 46:19]
    wire fourth : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>} @[PEmux.scala 47:20]
    wire myseq2_4 : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>} @[PEmux.scala 48:28]
    first.bits.pos <= io.in_bits[0].pos @[PEmux.scala 50:14]
    first.bits.y_dest <= io.in_bits[0].y_dest @[PEmux.scala 50:14]
    first.bits.x_dest <= io.in_bits[0].x_dest @[PEmux.scala 50:14]
    first.bits.y_0 <= io.in_bits[0].y_0 @[PEmux.scala 50:14]
    first.bits.x_0 <= io.in_bits[0].x_0 @[PEmux.scala 50:14]
    first.bits.data <= io.in_bits[0].data @[PEmux.scala 50:14]
    myseq2_1.bits.pos <= io.in_bits[1].pos @[PEmux.scala 51:15]
    myseq2_1.bits.y_dest <= io.in_bits[1].y_dest @[PEmux.scala 51:15]
    myseq2_1.bits.x_dest <= io.in_bits[1].x_dest @[PEmux.scala 51:15]
    myseq2_1.bits.y_0 <= io.in_bits[1].y_0 @[PEmux.scala 51:15]
    myseq2_1.bits.x_0 <= io.in_bits[1].x_0 @[PEmux.scala 51:15]
    myseq2_1.bits.data <= io.in_bits[1].data @[PEmux.scala 51:15]
    myseq2_2.bits.pos <= io.in_bits[2].pos @[PEmux.scala 52:14]
    myseq2_2.bits.y_dest <= io.in_bits[2].y_dest @[PEmux.scala 52:14]
    myseq2_2.bits.x_dest <= io.in_bits[2].x_dest @[PEmux.scala 52:14]
    myseq2_2.bits.y_0 <= io.in_bits[2].y_0 @[PEmux.scala 52:14]
    myseq2_2.bits.x_0 <= io.in_bits[2].x_0 @[PEmux.scala 52:14]
    myseq2_2.bits.data <= io.in_bits[2].data @[PEmux.scala 52:14]
    fourth.bits.pos <= io.in_bits[3].pos @[PEmux.scala 53:15]
    fourth.bits.y_dest <= io.in_bits[3].y_dest @[PEmux.scala 53:15]
    fourth.bits.x_dest <= io.in_bits[3].x_dest @[PEmux.scala 53:15]
    fourth.bits.y_0 <= io.in_bits[3].y_0 @[PEmux.scala 53:15]
    fourth.bits.x_0 <= io.in_bits[3].x_0 @[PEmux.scala 53:15]
    fourth.bits.data <= io.in_bits[3].data @[PEmux.scala 53:15]
    myseq2_4.bits.data <= UInt<1>("h0") @[PEmux.scala 55:28]
    myseq2_4.bits.x_0 <= UInt<1>("h0") @[PEmux.scala 56:27]
    myseq2_4.bits.y_0 <= UInt<1>("h0") @[PEmux.scala 57:27]
    myseq2_4.bits.x_dest <= UInt<1>("h0") @[PEmux.scala 58:30]
    myseq2_4.bits.y_dest <= UInt<1>("h0") @[PEmux.scala 59:30]
    myseq2_4.bits.pos <= UInt<1>("h0") @[PEmux.scala 60:27]
    first.selected <= UInt<1>("h1") @[PEmux.scala 63:18]
    myseq2_1.selected <= UInt<2>("h2") @[PEmux.scala 64:19]
    myseq2_2.selected <= UInt<3>("h4") @[PEmux.scala 65:18]
    fourth.selected <= UInt<4>("h8") @[PEmux.scala 66:19]
    myseq2_4.selected <= UInt<1>("h0") @[PEmux.scala 67:27]
    node _T = mux(io.valid[3], fourth, myseq2_4) @[Mux.scala 47:69]
    node _T_1 = mux(io.valid[2], myseq2_2, _T) @[Mux.scala 47:69]
    node _T_2 = mux(io.valid[1], myseq2_1, _T_1) @[Mux.scala 47:69]
    node mux1 = mux(io.valid[0], first, _T_2) @[Mux.scala 47:69]
    io.out_val.selected <= mux1.selected @[PEmux.scala 76:14]
    io.out_val.bits.pos <= mux1.bits.pos @[PEmux.scala 76:14]
    io.out_val.bits.y_dest <= mux1.bits.y_dest @[PEmux.scala 76:14]
    io.out_val.bits.x_dest <= mux1.bits.x_dest @[PEmux.scala 76:14]
    io.out_val.bits.y_0 <= mux1.bits.y_0 @[PEmux.scala 76:14]
    io.out_val.bits.x_0 <= mux1.bits.x_0 @[PEmux.scala 76:14]
    io.out_val.bits.data <= mux1.bits.data @[PEmux.scala 76:14]
    node _T_3 = eq(io.valid[0], UInt<1>("h0")) @[PEmux.scala 78:18]
    node _T_4 = eq(io.valid[1], UInt<1>("h0")) @[PEmux.scala 78:34]
    node _T_5 = and(_T_3, _T_4) @[PEmux.scala 78:31]
    node _T_6 = eq(io.valid[2], UInt<1>("h0")) @[PEmux.scala 78:50]
    node _T_7 = and(_T_5, _T_6) @[PEmux.scala 78:47]
    node _T_8 = eq(io.valid[3], UInt<1>("h0")) @[PEmux.scala 78:66]
    node no_valid = and(_T_7, _T_8) @[PEmux.scala 78:63]
    node _T_9 = mux(no_valid, UInt<1>("h0"), UInt<1>("h1")) @[PEmux.scala 79:22]
    io.out_valid <= _T_9 @[PEmux.scala 79:16]

  module MyPriorityMux_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip valid : UInt<1>[4], flip in_bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}[4], out_valid : UInt<1>, out_val : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>}}

    wire first : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>} @[PEmux.scala 44:19]
    wire myseq2_1 : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>} @[PEmux.scala 45:20]
    wire myseq2_2 : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>} @[PEmux.scala 46:19]
    wire fourth : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>} @[PEmux.scala 47:20]
    wire myseq2_4 : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>} @[PEmux.scala 48:28]
    first.bits.pos <= io.in_bits[0].pos @[PEmux.scala 50:14]
    first.bits.y_dest <= io.in_bits[0].y_dest @[PEmux.scala 50:14]
    first.bits.x_dest <= io.in_bits[0].x_dest @[PEmux.scala 50:14]
    first.bits.y_0 <= io.in_bits[0].y_0 @[PEmux.scala 50:14]
    first.bits.x_0 <= io.in_bits[0].x_0 @[PEmux.scala 50:14]
    first.bits.data <= io.in_bits[0].data @[PEmux.scala 50:14]
    myseq2_1.bits.pos <= io.in_bits[1].pos @[PEmux.scala 51:15]
    myseq2_1.bits.y_dest <= io.in_bits[1].y_dest @[PEmux.scala 51:15]
    myseq2_1.bits.x_dest <= io.in_bits[1].x_dest @[PEmux.scala 51:15]
    myseq2_1.bits.y_0 <= io.in_bits[1].y_0 @[PEmux.scala 51:15]
    myseq2_1.bits.x_0 <= io.in_bits[1].x_0 @[PEmux.scala 51:15]
    myseq2_1.bits.data <= io.in_bits[1].data @[PEmux.scala 51:15]
    myseq2_2.bits.pos <= io.in_bits[2].pos @[PEmux.scala 52:14]
    myseq2_2.bits.y_dest <= io.in_bits[2].y_dest @[PEmux.scala 52:14]
    myseq2_2.bits.x_dest <= io.in_bits[2].x_dest @[PEmux.scala 52:14]
    myseq2_2.bits.y_0 <= io.in_bits[2].y_0 @[PEmux.scala 52:14]
    myseq2_2.bits.x_0 <= io.in_bits[2].x_0 @[PEmux.scala 52:14]
    myseq2_2.bits.data <= io.in_bits[2].data @[PEmux.scala 52:14]
    fourth.bits.pos <= io.in_bits[3].pos @[PEmux.scala 53:15]
    fourth.bits.y_dest <= io.in_bits[3].y_dest @[PEmux.scala 53:15]
    fourth.bits.x_dest <= io.in_bits[3].x_dest @[PEmux.scala 53:15]
    fourth.bits.y_0 <= io.in_bits[3].y_0 @[PEmux.scala 53:15]
    fourth.bits.x_0 <= io.in_bits[3].x_0 @[PEmux.scala 53:15]
    fourth.bits.data <= io.in_bits[3].data @[PEmux.scala 53:15]
    myseq2_4.bits.data <= UInt<1>("h0") @[PEmux.scala 55:28]
    myseq2_4.bits.x_0 <= UInt<1>("h0") @[PEmux.scala 56:27]
    myseq2_4.bits.y_0 <= UInt<1>("h0") @[PEmux.scala 57:27]
    myseq2_4.bits.x_dest <= UInt<1>("h0") @[PEmux.scala 58:30]
    myseq2_4.bits.y_dest <= UInt<1>("h0") @[PEmux.scala 59:30]
    myseq2_4.bits.pos <= UInt<1>("h0") @[PEmux.scala 60:27]
    first.selected <= UInt<1>("h1") @[PEmux.scala 63:18]
    myseq2_1.selected <= UInt<2>("h2") @[PEmux.scala 64:19]
    myseq2_2.selected <= UInt<3>("h4") @[PEmux.scala 65:18]
    fourth.selected <= UInt<4>("h8") @[PEmux.scala 66:19]
    myseq2_4.selected <= UInt<1>("h0") @[PEmux.scala 67:27]
    node _T = mux(io.valid[3], fourth, myseq2_4) @[Mux.scala 47:69]
    node _T_1 = mux(io.valid[2], myseq2_2, _T) @[Mux.scala 47:69]
    node _T_2 = mux(io.valid[1], myseq2_1, _T_1) @[Mux.scala 47:69]
    node mux1 = mux(io.valid[0], first, _T_2) @[Mux.scala 47:69]
    io.out_val.selected <= mux1.selected @[PEmux.scala 76:14]
    io.out_val.bits.pos <= mux1.bits.pos @[PEmux.scala 76:14]
    io.out_val.bits.y_dest <= mux1.bits.y_dest @[PEmux.scala 76:14]
    io.out_val.bits.x_dest <= mux1.bits.x_dest @[PEmux.scala 76:14]
    io.out_val.bits.y_0 <= mux1.bits.y_0 @[PEmux.scala 76:14]
    io.out_val.bits.x_0 <= mux1.bits.x_0 @[PEmux.scala 76:14]
    io.out_val.bits.data <= mux1.bits.data @[PEmux.scala 76:14]
    node _T_3 = eq(io.valid[0], UInt<1>("h0")) @[PEmux.scala 78:18]
    node _T_4 = eq(io.valid[1], UInt<1>("h0")) @[PEmux.scala 78:34]
    node _T_5 = and(_T_3, _T_4) @[PEmux.scala 78:31]
    node _T_6 = eq(io.valid[2], UInt<1>("h0")) @[PEmux.scala 78:50]
    node _T_7 = and(_T_5, _T_6) @[PEmux.scala 78:47]
    node _T_8 = eq(io.valid[3], UInt<1>("h0")) @[PEmux.scala 78:66]
    node no_valid = and(_T_7, _T_8) @[PEmux.scala 78:63]
    node _T_9 = mux(no_valid, UInt<1>("h0"), UInt<1>("h1")) @[PEmux.scala 79:22]
    io.out_valid <= _T_9 @[PEmux.scala 79:16]

  module MyPriorityMux_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip valid : UInt<1>[4], flip in_bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}[4], out_valid : UInt<1>, out_val : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>}}

    wire first : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>} @[PEmux.scala 44:19]
    wire myseq2_1 : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>} @[PEmux.scala 45:20]
    wire myseq2_2 : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>} @[PEmux.scala 46:19]
    wire fourth : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>} @[PEmux.scala 47:20]
    wire myseq2_4 : { bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}, selected : UInt<4>} @[PEmux.scala 48:28]
    first.bits.pos <= io.in_bits[0].pos @[PEmux.scala 50:14]
    first.bits.y_dest <= io.in_bits[0].y_dest @[PEmux.scala 50:14]
    first.bits.x_dest <= io.in_bits[0].x_dest @[PEmux.scala 50:14]
    first.bits.y_0 <= io.in_bits[0].y_0 @[PEmux.scala 50:14]
    first.bits.x_0 <= io.in_bits[0].x_0 @[PEmux.scala 50:14]
    first.bits.data <= io.in_bits[0].data @[PEmux.scala 50:14]
    myseq2_1.bits.pos <= io.in_bits[1].pos @[PEmux.scala 51:15]
    myseq2_1.bits.y_dest <= io.in_bits[1].y_dest @[PEmux.scala 51:15]
    myseq2_1.bits.x_dest <= io.in_bits[1].x_dest @[PEmux.scala 51:15]
    myseq2_1.bits.y_0 <= io.in_bits[1].y_0 @[PEmux.scala 51:15]
    myseq2_1.bits.x_0 <= io.in_bits[1].x_0 @[PEmux.scala 51:15]
    myseq2_1.bits.data <= io.in_bits[1].data @[PEmux.scala 51:15]
    myseq2_2.bits.pos <= io.in_bits[2].pos @[PEmux.scala 52:14]
    myseq2_2.bits.y_dest <= io.in_bits[2].y_dest @[PEmux.scala 52:14]
    myseq2_2.bits.x_dest <= io.in_bits[2].x_dest @[PEmux.scala 52:14]
    myseq2_2.bits.y_0 <= io.in_bits[2].y_0 @[PEmux.scala 52:14]
    myseq2_2.bits.x_0 <= io.in_bits[2].x_0 @[PEmux.scala 52:14]
    myseq2_2.bits.data <= io.in_bits[2].data @[PEmux.scala 52:14]
    fourth.bits.pos <= io.in_bits[3].pos @[PEmux.scala 53:15]
    fourth.bits.y_dest <= io.in_bits[3].y_dest @[PEmux.scala 53:15]
    fourth.bits.x_dest <= io.in_bits[3].x_dest @[PEmux.scala 53:15]
    fourth.bits.y_0 <= io.in_bits[3].y_0 @[PEmux.scala 53:15]
    fourth.bits.x_0 <= io.in_bits[3].x_0 @[PEmux.scala 53:15]
    fourth.bits.data <= io.in_bits[3].data @[PEmux.scala 53:15]
    myseq2_4.bits.data <= UInt<1>("h0") @[PEmux.scala 55:28]
    myseq2_4.bits.x_0 <= UInt<1>("h0") @[PEmux.scala 56:27]
    myseq2_4.bits.y_0 <= UInt<1>("h0") @[PEmux.scala 57:27]
    myseq2_4.bits.x_dest <= UInt<1>("h0") @[PEmux.scala 58:30]
    myseq2_4.bits.y_dest <= UInt<1>("h0") @[PEmux.scala 59:30]
    myseq2_4.bits.pos <= UInt<1>("h0") @[PEmux.scala 60:27]
    first.selected <= UInt<1>("h1") @[PEmux.scala 63:18]
    myseq2_1.selected <= UInt<2>("h2") @[PEmux.scala 64:19]
    myseq2_2.selected <= UInt<3>("h4") @[PEmux.scala 65:18]
    fourth.selected <= UInt<4>("h8") @[PEmux.scala 66:19]
    myseq2_4.selected <= UInt<1>("h0") @[PEmux.scala 67:27]
    node _T = mux(io.valid[3], fourth, myseq2_4) @[Mux.scala 47:69]
    node _T_1 = mux(io.valid[2], myseq2_2, _T) @[Mux.scala 47:69]
    node _T_2 = mux(io.valid[1], myseq2_1, _T_1) @[Mux.scala 47:69]
    node mux1 = mux(io.valid[0], first, _T_2) @[Mux.scala 47:69]
    io.out_val.selected <= mux1.selected @[PEmux.scala 76:14]
    io.out_val.bits.pos <= mux1.bits.pos @[PEmux.scala 76:14]
    io.out_val.bits.y_dest <= mux1.bits.y_dest @[PEmux.scala 76:14]
    io.out_val.bits.x_dest <= mux1.bits.x_dest @[PEmux.scala 76:14]
    io.out_val.bits.y_0 <= mux1.bits.y_0 @[PEmux.scala 76:14]
    io.out_val.bits.x_0 <= mux1.bits.x_0 @[PEmux.scala 76:14]
    io.out_val.bits.data <= mux1.bits.data @[PEmux.scala 76:14]
    node _T_3 = eq(io.valid[0], UInt<1>("h0")) @[PEmux.scala 78:18]
    node _T_4 = eq(io.valid[1], UInt<1>("h0")) @[PEmux.scala 78:34]
    node _T_5 = and(_T_3, _T_4) @[PEmux.scala 78:31]
    node _T_6 = eq(io.valid[2], UInt<1>("h0")) @[PEmux.scala 78:50]
    node _T_7 = and(_T_5, _T_6) @[PEmux.scala 78:47]
    node _T_8 = eq(io.valid[3], UInt<1>("h0")) @[PEmux.scala 78:66]
    node no_valid = and(_T_7, _T_8) @[PEmux.scala 78:63]
    node _T_9 = mux(no_valid, UInt<1>("h0"), UInt<1>("h1")) @[PEmux.scala 79:22]
    io.out_valid <= _T_9 @[PEmux.scala 79:16]

  module RRArbiter :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}[4], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, chosen : UInt<2>}

    wire choice : UInt
    choice <= UInt<2>("h3")
    io.chosen <= choice @[Arbiter.scala 40:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 41:16]
    io.out.bits.pos <= io.in[io.chosen].bits.pos @[Arbiter.scala 42:15]
    io.out.bits.y_dest <= io.in[io.chosen].bits.y_dest @[Arbiter.scala 42:15]
    io.out.bits.x_dest <= io.in[io.chosen].bits.x_dest @[Arbiter.scala 42:15]
    io.out.bits.y_0 <= io.in[io.chosen].bits.y_0 @[Arbiter.scala 42:15]
    io.out.bits.x_0 <= io.in[io.chosen].bits.x_0 @[Arbiter.scala 42:15]
    io.out.bits.data <= io.in[io.chosen].bits.data @[Arbiter.scala 42:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg lastGrant : UInt<2>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 15:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 16:19]
      lastGrant <= io.chosen @[Reg.scala 16:23]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_1 = gt(UInt<1>("h1"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_2 = gt(UInt<2>("h2"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_3 = gt(UInt<2>("h3"), lastGrant) @[Arbiter.scala 67:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 68:75]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 68:75]
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 68:75]
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 68:75]
    node _ctrl_T = or(validMask_0, validMask_1) @[Arbiter.scala 31:68]
    node _ctrl_T_1 = or(_ctrl_T, validMask_2) @[Arbiter.scala 31:68]
    node _ctrl_T_2 = or(_ctrl_T_1, validMask_3) @[Arbiter.scala 31:68]
    node _ctrl_T_3 = or(_ctrl_T_2, io.in[0].valid) @[Arbiter.scala 31:68]
    node _ctrl_T_4 = or(_ctrl_T_3, io.in[1].valid) @[Arbiter.scala 31:68]
    node _ctrl_T_5 = or(_ctrl_T_4, io.in[2].valid) @[Arbiter.scala 31:68]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_2 = eq(_ctrl_T, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_3 = eq(_ctrl_T_1, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_4 = eq(_ctrl_T_2, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_5 = eq(_ctrl_T_3, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_6 = eq(_ctrl_T_4, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_7 = eq(_ctrl_T_5, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 72:34]
    node _T_1 = or(_T, ctrl_4) @[Arbiter.scala 72:50]
    node _T_2 = and(ctrl_1, grantMask_1) @[Arbiter.scala 72:34]
    node _T_3 = or(_T_2, ctrl_5) @[Arbiter.scala 72:50]
    node _T_4 = and(ctrl_2, grantMask_2) @[Arbiter.scala 72:34]
    node _T_5 = or(_T_4, ctrl_6) @[Arbiter.scala 72:50]
    node _T_6 = and(ctrl_3, grantMask_3) @[Arbiter.scala 72:34]
    node _T_7 = or(_T_6, ctrl_7) @[Arbiter.scala 72:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 60:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 60:16]
    node _io_in_1_ready_T = and(_T_3, io.out.ready) @[Arbiter.scala 60:21]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 60:16]
    node _io_in_2_ready_T = and(_T_5, io.out.ready) @[Arbiter.scala 60:21]
    io.in[2].ready <= _io_in_2_ready_T @[Arbiter.scala 60:16]
    node _io_in_3_ready_T = and(_T_7, io.out.ready) @[Arbiter.scala 60:21]
    io.in[3].ready <= _io_in_3_ready_T @[Arbiter.scala 60:16]
    when io.in[2].valid : @[Arbiter.scala 77:27]
      choice <= UInt<2>("h2") @[Arbiter.scala 77:36]
    when io.in[1].valid : @[Arbiter.scala 77:27]
      choice <= UInt<1>("h1") @[Arbiter.scala 77:36]
    when io.in[0].valid : @[Arbiter.scala 77:27]
      choice <= UInt<1>("h0") @[Arbiter.scala 77:36]
    when validMask_3 : @[Arbiter.scala 79:25]
      choice <= UInt<2>("h3") @[Arbiter.scala 79:34]
    when validMask_2 : @[Arbiter.scala 79:25]
      choice <= UInt<2>("h2") @[Arbiter.scala 79:34]
    when validMask_1 : @[Arbiter.scala 79:25]
      choice <= UInt<1>("h1") @[Arbiter.scala 79:34]

  module RRArbiter_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}[4], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, chosen : UInt<2>}

    wire choice : UInt
    choice <= UInt<2>("h3")
    io.chosen <= choice @[Arbiter.scala 40:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 41:16]
    io.out.bits.pos <= io.in[io.chosen].bits.pos @[Arbiter.scala 42:15]
    io.out.bits.y_dest <= io.in[io.chosen].bits.y_dest @[Arbiter.scala 42:15]
    io.out.bits.x_dest <= io.in[io.chosen].bits.x_dest @[Arbiter.scala 42:15]
    io.out.bits.y_0 <= io.in[io.chosen].bits.y_0 @[Arbiter.scala 42:15]
    io.out.bits.x_0 <= io.in[io.chosen].bits.x_0 @[Arbiter.scala 42:15]
    io.out.bits.data <= io.in[io.chosen].bits.data @[Arbiter.scala 42:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg lastGrant : UInt<2>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 15:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 16:19]
      lastGrant <= io.chosen @[Reg.scala 16:23]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_1 = gt(UInt<1>("h1"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_2 = gt(UInt<2>("h2"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_3 = gt(UInt<2>("h3"), lastGrant) @[Arbiter.scala 67:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 68:75]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 68:75]
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 68:75]
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 68:75]
    node _ctrl_T = or(validMask_0, validMask_1) @[Arbiter.scala 31:68]
    node _ctrl_T_1 = or(_ctrl_T, validMask_2) @[Arbiter.scala 31:68]
    node _ctrl_T_2 = or(_ctrl_T_1, validMask_3) @[Arbiter.scala 31:68]
    node _ctrl_T_3 = or(_ctrl_T_2, io.in[0].valid) @[Arbiter.scala 31:68]
    node _ctrl_T_4 = or(_ctrl_T_3, io.in[1].valid) @[Arbiter.scala 31:68]
    node _ctrl_T_5 = or(_ctrl_T_4, io.in[2].valid) @[Arbiter.scala 31:68]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_2 = eq(_ctrl_T, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_3 = eq(_ctrl_T_1, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_4 = eq(_ctrl_T_2, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_5 = eq(_ctrl_T_3, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_6 = eq(_ctrl_T_4, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_7 = eq(_ctrl_T_5, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 72:34]
    node _T_1 = or(_T, ctrl_4) @[Arbiter.scala 72:50]
    node _T_2 = and(ctrl_1, grantMask_1) @[Arbiter.scala 72:34]
    node _T_3 = or(_T_2, ctrl_5) @[Arbiter.scala 72:50]
    node _T_4 = and(ctrl_2, grantMask_2) @[Arbiter.scala 72:34]
    node _T_5 = or(_T_4, ctrl_6) @[Arbiter.scala 72:50]
    node _T_6 = and(ctrl_3, grantMask_3) @[Arbiter.scala 72:34]
    node _T_7 = or(_T_6, ctrl_7) @[Arbiter.scala 72:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 60:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 60:16]
    node _io_in_1_ready_T = and(_T_3, io.out.ready) @[Arbiter.scala 60:21]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 60:16]
    node _io_in_2_ready_T = and(_T_5, io.out.ready) @[Arbiter.scala 60:21]
    io.in[2].ready <= _io_in_2_ready_T @[Arbiter.scala 60:16]
    node _io_in_3_ready_T = and(_T_7, io.out.ready) @[Arbiter.scala 60:21]
    io.in[3].ready <= _io_in_3_ready_T @[Arbiter.scala 60:16]
    when io.in[2].valid : @[Arbiter.scala 77:27]
      choice <= UInt<2>("h2") @[Arbiter.scala 77:36]
    when io.in[1].valid : @[Arbiter.scala 77:27]
      choice <= UInt<1>("h1") @[Arbiter.scala 77:36]
    when io.in[0].valid : @[Arbiter.scala 77:27]
      choice <= UInt<1>("h0") @[Arbiter.scala 77:36]
    when validMask_3 : @[Arbiter.scala 79:25]
      choice <= UInt<2>("h3") @[Arbiter.scala 79:34]
    when validMask_2 : @[Arbiter.scala 79:25]
      choice <= UInt<2>("h2") @[Arbiter.scala 79:34]
    when validMask_1 : @[Arbiter.scala 79:25]
      choice <= UInt<1>("h1") @[Arbiter.scala 79:34]

  module RRArbiter_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}[4], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, chosen : UInt<2>}

    wire choice : UInt
    choice <= UInt<2>("h3")
    io.chosen <= choice @[Arbiter.scala 40:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 41:16]
    io.out.bits.pos <= io.in[io.chosen].bits.pos @[Arbiter.scala 42:15]
    io.out.bits.y_dest <= io.in[io.chosen].bits.y_dest @[Arbiter.scala 42:15]
    io.out.bits.x_dest <= io.in[io.chosen].bits.x_dest @[Arbiter.scala 42:15]
    io.out.bits.y_0 <= io.in[io.chosen].bits.y_0 @[Arbiter.scala 42:15]
    io.out.bits.x_0 <= io.in[io.chosen].bits.x_0 @[Arbiter.scala 42:15]
    io.out.bits.data <= io.in[io.chosen].bits.data @[Arbiter.scala 42:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg lastGrant : UInt<2>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 15:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 16:19]
      lastGrant <= io.chosen @[Reg.scala 16:23]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_1 = gt(UInt<1>("h1"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_2 = gt(UInt<2>("h2"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_3 = gt(UInt<2>("h3"), lastGrant) @[Arbiter.scala 67:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 68:75]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 68:75]
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 68:75]
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 68:75]
    node _ctrl_T = or(validMask_0, validMask_1) @[Arbiter.scala 31:68]
    node _ctrl_T_1 = or(_ctrl_T, validMask_2) @[Arbiter.scala 31:68]
    node _ctrl_T_2 = or(_ctrl_T_1, validMask_3) @[Arbiter.scala 31:68]
    node _ctrl_T_3 = or(_ctrl_T_2, io.in[0].valid) @[Arbiter.scala 31:68]
    node _ctrl_T_4 = or(_ctrl_T_3, io.in[1].valid) @[Arbiter.scala 31:68]
    node _ctrl_T_5 = or(_ctrl_T_4, io.in[2].valid) @[Arbiter.scala 31:68]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_2 = eq(_ctrl_T, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_3 = eq(_ctrl_T_1, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_4 = eq(_ctrl_T_2, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_5 = eq(_ctrl_T_3, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_6 = eq(_ctrl_T_4, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_7 = eq(_ctrl_T_5, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 72:34]
    node _T_1 = or(_T, ctrl_4) @[Arbiter.scala 72:50]
    node _T_2 = and(ctrl_1, grantMask_1) @[Arbiter.scala 72:34]
    node _T_3 = or(_T_2, ctrl_5) @[Arbiter.scala 72:50]
    node _T_4 = and(ctrl_2, grantMask_2) @[Arbiter.scala 72:34]
    node _T_5 = or(_T_4, ctrl_6) @[Arbiter.scala 72:50]
    node _T_6 = and(ctrl_3, grantMask_3) @[Arbiter.scala 72:34]
    node _T_7 = or(_T_6, ctrl_7) @[Arbiter.scala 72:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 60:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 60:16]
    node _io_in_1_ready_T = and(_T_3, io.out.ready) @[Arbiter.scala 60:21]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 60:16]
    node _io_in_2_ready_T = and(_T_5, io.out.ready) @[Arbiter.scala 60:21]
    io.in[2].ready <= _io_in_2_ready_T @[Arbiter.scala 60:16]
    node _io_in_3_ready_T = and(_T_7, io.out.ready) @[Arbiter.scala 60:21]
    io.in[3].ready <= _io_in_3_ready_T @[Arbiter.scala 60:16]
    when io.in[2].valid : @[Arbiter.scala 77:27]
      choice <= UInt<2>("h2") @[Arbiter.scala 77:36]
    when io.in[1].valid : @[Arbiter.scala 77:27]
      choice <= UInt<1>("h1") @[Arbiter.scala 77:36]
    when io.in[0].valid : @[Arbiter.scala 77:27]
      choice <= UInt<1>("h0") @[Arbiter.scala 77:36]
    when validMask_3 : @[Arbiter.scala 79:25]
      choice <= UInt<2>("h3") @[Arbiter.scala 79:34]
    when validMask_2 : @[Arbiter.scala 79:25]
      choice <= UInt<2>("h2") @[Arbiter.scala 79:34]
    when validMask_1 : @[Arbiter.scala 79:25]
      choice <= UInt<1>("h1") @[Arbiter.scala 79:34]

  module RRArbiter_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}[4], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, chosen : UInt<2>}

    wire choice : UInt
    choice <= UInt<2>("h3")
    io.chosen <= choice @[Arbiter.scala 40:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 41:16]
    io.out.bits.pos <= io.in[io.chosen].bits.pos @[Arbiter.scala 42:15]
    io.out.bits.y_dest <= io.in[io.chosen].bits.y_dest @[Arbiter.scala 42:15]
    io.out.bits.x_dest <= io.in[io.chosen].bits.x_dest @[Arbiter.scala 42:15]
    io.out.bits.y_0 <= io.in[io.chosen].bits.y_0 @[Arbiter.scala 42:15]
    io.out.bits.x_0 <= io.in[io.chosen].bits.x_0 @[Arbiter.scala 42:15]
    io.out.bits.data <= io.in[io.chosen].bits.data @[Arbiter.scala 42:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg lastGrant : UInt<2>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 15:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 16:19]
      lastGrant <= io.chosen @[Reg.scala 16:23]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_1 = gt(UInt<1>("h1"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_2 = gt(UInt<2>("h2"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_3 = gt(UInt<2>("h3"), lastGrant) @[Arbiter.scala 67:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 68:75]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 68:75]
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 68:75]
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 68:75]
    node _ctrl_T = or(validMask_0, validMask_1) @[Arbiter.scala 31:68]
    node _ctrl_T_1 = or(_ctrl_T, validMask_2) @[Arbiter.scala 31:68]
    node _ctrl_T_2 = or(_ctrl_T_1, validMask_3) @[Arbiter.scala 31:68]
    node _ctrl_T_3 = or(_ctrl_T_2, io.in[0].valid) @[Arbiter.scala 31:68]
    node _ctrl_T_4 = or(_ctrl_T_3, io.in[1].valid) @[Arbiter.scala 31:68]
    node _ctrl_T_5 = or(_ctrl_T_4, io.in[2].valid) @[Arbiter.scala 31:68]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_2 = eq(_ctrl_T, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_3 = eq(_ctrl_T_1, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_4 = eq(_ctrl_T_2, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_5 = eq(_ctrl_T_3, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_6 = eq(_ctrl_T_4, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_7 = eq(_ctrl_T_5, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 72:34]
    node _T_1 = or(_T, ctrl_4) @[Arbiter.scala 72:50]
    node _T_2 = and(ctrl_1, grantMask_1) @[Arbiter.scala 72:34]
    node _T_3 = or(_T_2, ctrl_5) @[Arbiter.scala 72:50]
    node _T_4 = and(ctrl_2, grantMask_2) @[Arbiter.scala 72:34]
    node _T_5 = or(_T_4, ctrl_6) @[Arbiter.scala 72:50]
    node _T_6 = and(ctrl_3, grantMask_3) @[Arbiter.scala 72:34]
    node _T_7 = or(_T_6, ctrl_7) @[Arbiter.scala 72:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 60:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 60:16]
    node _io_in_1_ready_T = and(_T_3, io.out.ready) @[Arbiter.scala 60:21]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 60:16]
    node _io_in_2_ready_T = and(_T_5, io.out.ready) @[Arbiter.scala 60:21]
    io.in[2].ready <= _io_in_2_ready_T @[Arbiter.scala 60:16]
    node _io_in_3_ready_T = and(_T_7, io.out.ready) @[Arbiter.scala 60:21]
    io.in[3].ready <= _io_in_3_ready_T @[Arbiter.scala 60:16]
    when io.in[2].valid : @[Arbiter.scala 77:27]
      choice <= UInt<2>("h2") @[Arbiter.scala 77:36]
    when io.in[1].valid : @[Arbiter.scala 77:27]
      choice <= UInt<1>("h1") @[Arbiter.scala 77:36]
    when io.in[0].valid : @[Arbiter.scala 77:27]
      choice <= UInt<1>("h0") @[Arbiter.scala 77:36]
    when validMask_3 : @[Arbiter.scala 79:25]
      choice <= UInt<2>("h3") @[Arbiter.scala 79:34]
    when validMask_2 : @[Arbiter.scala 79:25]
      choice <= UInt<2>("h2") @[Arbiter.scala 79:34]
    when validMask_1 : @[Arbiter.scala 79:25]
      choice <= UInt<1>("h1") @[Arbiter.scala 79:34]

  module Queue_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.pos <= io.enq.bits.pos @[Decoupled.scala 230:24]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.pos <= io_deq_bits_MPORT.pos @[Decoupled.scala 242:15]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.pos <= io.enq.bits.pos @[Decoupled.scala 230:24]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.pos <= io_deq_bits_MPORT.pos @[Decoupled.scala 242:15]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_6 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.pos <= io.enq.bits.pos @[Decoupled.scala 230:24]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.pos <= io_deq_bits_MPORT.pos @[Decoupled.scala 242:15]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_7 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.pos <= io.enq.bits.pos @[Decoupled.scala 230:24]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.pos <= io_deq_bits_MPORT.pos @[Decoupled.scala 242:15]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module AllToAllPE :
    input clock : Clock
    input reset : UInt<1>
    output io : { busy : UInt<1>, flip end_AllToAll : UInt<1>, flip cmd : { flip ready : UInt<1>, valid : UInt<1>, bits : { load : UInt<1>, store : UInt<1>, doAllToAll : UInt<1>, rs1 : UInt<64>, rs2 : UInt<64>}}, resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, write_enable : UInt<1>}}, left : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}}, right : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}}, up : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}}, bottom : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>}}}}

    cmem memPE : UInt<64> [1024] @[AllToAllPE.scala 20:18]
    reg x_coord : UInt<2>, clock with :
      reset => (reset, UInt<2>("h2")) @[AllToAllPE.scala 23:24]
    reg y_coord : UInt<2>, clock with :
      reset => (reset, UInt<1>("h1")) @[AllToAllPE.scala 24:24]
    reg dim_N : UInt<16>, clock with :
      reset => (UInt<1>("h0"), dim_N) @[AllToAllPE.scala 26:18]
    reg offset : UInt<32>, clock with :
      reset => (UInt<1>("h0"), offset) @[AllToAllPE.scala 27:19]
    reg index_write_this_PE : UInt<32>, clock with :
      reset => (UInt<1>("h0"), index_write_this_PE) @[AllToAllPE.scala 28:32]
    reg rs1 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), rs1) @[AllToAllPE.scala 31:16]
    reg rs2 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), rs2) @[AllToAllPE.scala 32:16]
    rs1 <= io.cmd.bits.rs1 @[AllToAllPE.scala 33:7]
    rs2 <= io.cmd.bits.rs2 @[AllToAllPE.scala 34:7]
    reg w_en : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 37:21]
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AllToAllPE.scala 42:22]
    reg resp_value : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 43:27]
    node x_value = bits(rs2, 15, 0) @[AllToAllPE.scala 45:20]
    node y_value = bits(rs2, 31, 16) @[AllToAllPE.scala 46:20]
    node memIndex = bits(rs2, 63, 32) @[AllToAllPE.scala 47:21]
    node _T = eq(x_value, x_coord) @[AllToAllPE.scala 52:29]
    node _T_1 = eq(y_value, y_coord) @[AllToAllPE.scala 52:54]
    node is_this_PE = and(_T, _T_1) @[AllToAllPE.scala 52:42]
    node load_signal = and(io.cmd.valid, io.cmd.bits.load) @[AllToAllPE.scala 53:34]
    node store_signal = and(io.cmd.valid, io.cmd.bits.store) @[AllToAllPE.scala 54:35]
    node allToAll_signal = and(io.cmd.valid, io.cmd.bits.doAllToAll) @[AllToAllPE.scala 55:38]
    node _T_2 = eq(io.resp.ready, UInt<1>("h0")) @[AllToAllPE.scala 56:20]
    node stall_resp = and(_T_2, io.resp.valid) @[AllToAllPE.scala 56:35]
    node start_AllToAll = eq(state, UInt<3>("h1")) @[AllToAllPE.scala 57:30]
    inst index_calculator of IndexCalculatorV1 @[AllToAllPE.scala 59:32]
    index_calculator.clock <= clock
    index_calculator.reset <= reset
    reg end_push_data : UInt<1>, clock with :
      reset => (UInt<1>("h0"), end_push_data) @[AllToAllPE.scala 61:26]
    reg read_values : UInt<64>[4], clock with :
      reset => (UInt<1>("h0"), read_values) @[AllToAllPE.scala 62:24]
    wire _WIRE : UInt<1>[4] @[AllToAllPE.scala 64:42]
    _WIRE[0] <= UInt<1>("h0") @[AllToAllPE.scala 64:42]
    _WIRE[1] <= UInt<1>("h0") @[AllToAllPE.scala 64:42]
    _WIRE[2] <= UInt<1>("h0") @[AllToAllPE.scala 64:42]
    _WIRE[3] <= UInt<1>("h0") @[AllToAllPE.scala 64:42]
    reg read_values_valid : UInt<1>[4], clock with :
      reset => (reset, _WIRE) @[AllToAllPE.scala 64:34]
    reg read_x_dest : UInt<2>[4], clock with :
      reset => (UInt<1>("h0"), read_x_dest) @[AllToAllPE.scala 65:24]
    reg read_y_dest : UInt<2>[4], clock with :
      reset => (UInt<1>("h0"), read_y_dest) @[AllToAllPE.scala 66:24]
    reg read_pos : UInt<16>[4], clock with :
      reset => (UInt<1>("h0"), read_pos) @[AllToAllPE.scala 67:21]
    node _T_3 = eq(read_x_dest[0], x_coord) @[AllToAllPE.scala 69:45]
    node _T_4 = eq(read_y_dest[0], y_coord) @[AllToAllPE.scala 69:77]
    node this_PE_generation_0 = and(_T_3, _T_4) @[AllToAllPE.scala 69:58]
    node _T_5 = eq(read_x_dest[1], x_coord) @[AllToAllPE.scala 70:45]
    node _T_6 = eq(read_y_dest[1], y_coord) @[AllToAllPE.scala 70:77]
    node this_PE_generation_1 = and(_T_5, _T_6) @[AllToAllPE.scala 70:58]
    node _T_7 = eq(read_x_dest[2], x_coord) @[AllToAllPE.scala 71:45]
    node _T_8 = eq(read_y_dest[2], y_coord) @[AllToAllPE.scala 71:77]
    node this_PE_generation_2 = and(_T_7, _T_8) @[AllToAllPE.scala 71:58]
    node _T_9 = eq(read_x_dest[3], x_coord) @[AllToAllPE.scala 72:45]
    node _T_10 = eq(read_y_dest[3], y_coord) @[AllToAllPE.scala 72:77]
    node this_PE_generation_3 = and(_T_9, _T_10) @[AllToAllPE.scala 72:58]
    node _T_11 = eq(read_values_valid[0], UInt<1>("h0")) @[AllToAllPE.scala 74:17]
    node _T_12 = eq(read_values_valid[1], UInt<1>("h0")) @[AllToAllPE.scala 74:42]
    node _T_13 = and(_T_11, _T_12) @[AllToAllPE.scala 74:39]
    node _T_14 = eq(read_values_valid[2], UInt<1>("h0")) @[AllToAllPE.scala 74:67]
    node _T_15 = and(_T_13, _T_14) @[AllToAllPE.scala 74:64]
    node _T_16 = eq(read_values_valid[3], UInt<1>("h0")) @[AllToAllPE.scala 74:92]
    node do_read = and(_T_15, _T_16) @[AllToAllPE.scala 74:89]
    inst left_in of Queue @[Decoupled.scala 296:21]
    left_in.clock <= clock
    left_in.reset <= reset
    left_in.io.enq.valid <= io.left.in.valid @[Decoupled.scala 297:22]
    left_in.io.enq.bits.pos <= io.left.in.bits.pos @[Decoupled.scala 298:21]
    left_in.io.enq.bits.y_dest <= io.left.in.bits.y_dest @[Decoupled.scala 298:21]
    left_in.io.enq.bits.x_dest <= io.left.in.bits.x_dest @[Decoupled.scala 298:21]
    left_in.io.enq.bits.y_0 <= io.left.in.bits.y_0 @[Decoupled.scala 298:21]
    left_in.io.enq.bits.x_0 <= io.left.in.bits.x_0 @[Decoupled.scala 298:21]
    left_in.io.enq.bits.data <= io.left.in.bits.data @[Decoupled.scala 298:21]
    io.left.in.ready <= left_in.io.enq.ready @[Decoupled.scala 299:17]
    inst right_in of Queue_1 @[Decoupled.scala 296:21]
    right_in.clock <= clock
    right_in.reset <= reset
    right_in.io.enq.valid <= io.right.in.valid @[Decoupled.scala 297:22]
    right_in.io.enq.bits.pos <= io.right.in.bits.pos @[Decoupled.scala 298:21]
    right_in.io.enq.bits.y_dest <= io.right.in.bits.y_dest @[Decoupled.scala 298:21]
    right_in.io.enq.bits.x_dest <= io.right.in.bits.x_dest @[Decoupled.scala 298:21]
    right_in.io.enq.bits.y_0 <= io.right.in.bits.y_0 @[Decoupled.scala 298:21]
    right_in.io.enq.bits.x_0 <= io.right.in.bits.x_0 @[Decoupled.scala 298:21]
    right_in.io.enq.bits.data <= io.right.in.bits.data @[Decoupled.scala 298:21]
    io.right.in.ready <= right_in.io.enq.ready @[Decoupled.scala 299:17]
    inst up_in of Queue_2 @[Decoupled.scala 296:21]
    up_in.clock <= clock
    up_in.reset <= reset
    up_in.io.enq.valid <= io.up.in.valid @[Decoupled.scala 297:22]
    up_in.io.enq.bits.pos <= io.up.in.bits.pos @[Decoupled.scala 298:21]
    up_in.io.enq.bits.y_dest <= io.up.in.bits.y_dest @[Decoupled.scala 298:21]
    up_in.io.enq.bits.x_dest <= io.up.in.bits.x_dest @[Decoupled.scala 298:21]
    up_in.io.enq.bits.y_0 <= io.up.in.bits.y_0 @[Decoupled.scala 298:21]
    up_in.io.enq.bits.x_0 <= io.up.in.bits.x_0 @[Decoupled.scala 298:21]
    up_in.io.enq.bits.data <= io.up.in.bits.data @[Decoupled.scala 298:21]
    io.up.in.ready <= up_in.io.enq.ready @[Decoupled.scala 299:17]
    inst bottom_in of Queue_3 @[Decoupled.scala 296:21]
    bottom_in.clock <= clock
    bottom_in.reset <= reset
    bottom_in.io.enq.valid <= io.bottom.in.valid @[Decoupled.scala 297:22]
    bottom_in.io.enq.bits.pos <= io.bottom.in.bits.pos @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.y_dest <= io.bottom.in.bits.y_dest @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.x_dest <= io.bottom.in.bits.x_dest @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.y_0 <= io.bottom.in.bits.y_0 @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.x_0 <= io.bottom.in.bits.x_0 @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.data <= io.bottom.in.bits.data @[Decoupled.scala 298:21]
    io.bottom.in.ready <= bottom_in.io.enq.ready @[Decoupled.scala 299:17]
    node left_busy = or(left_in.io.deq.valid, io.left.out.valid) @[AllToAllPE.scala 86:33]
    node right_busy = or(right_in.io.deq.valid, io.right.out.valid) @[AllToAllPE.scala 87:35]
    node up_busy = or(up_in.io.deq.valid, io.up.out.valid) @[AllToAllPE.scala 88:29]
    node bottom_busy = or(bottom_in.io.deq.valid, io.bottom.out.valid) @[AllToAllPE.scala 89:37]
    inst left_dispatcher of Dispatcher @[AllToAllPE.scala 93:31]
    left_dispatcher.clock <= clock
    left_dispatcher.reset <= reset
    inst right_dispatcher of Dispatcher_1 @[AllToAllPE.scala 94:32]
    right_dispatcher.clock <= clock
    right_dispatcher.reset <= reset
    inst up_dispatcher of Dispatcher_2 @[AllToAllPE.scala 95:29]
    up_dispatcher.clock <= clock
    up_dispatcher.reset <= reset
    inst bottom_dispatcher of Dispatcher_3 @[AllToAllPE.scala 96:33]
    bottom_dispatcher.clock <= clock
    bottom_dispatcher.reset <= reset
    inst generation_dispatcher_0 of GenerationDispatcher @[AllToAllPE.scala 101:39]
    generation_dispatcher_0.clock <= clock
    generation_dispatcher_0.reset <= reset
    inst generation_dispatcher_1 of GenerationDispatcher_1 @[AllToAllPE.scala 102:39]
    generation_dispatcher_1.clock <= clock
    generation_dispatcher_1.reset <= reset
    inst generation_dispatcher_2 of GenerationDispatcher_2 @[AllToAllPE.scala 103:39]
    generation_dispatcher_2.clock <= clock
    generation_dispatcher_2.reset <= reset
    inst generation_dispatcher_3 of GenerationDispatcher_3 @[AllToAllPE.scala 104:39]
    generation_dispatcher_3.clock <= clock
    generation_dispatcher_3.reset <= reset
    left_dispatcher.io.x_0 <= left_in.io.deq.bits.x_0 @[AllToAllPE.scala 107:26]
    left_dispatcher.io.y_0 <= left_in.io.deq.bits.y_0 @[AllToAllPE.scala 108:26]
    left_dispatcher.io.x_dest <= left_in.io.deq.bits.x_dest @[AllToAllPE.scala 109:29]
    left_dispatcher.io.y_dest <= left_in.io.deq.bits.y_dest @[AllToAllPE.scala 110:29]
    left_dispatcher.io.x_PE <= x_coord @[AllToAllPE.scala 111:27]
    left_dispatcher.io.y_PE <= y_coord @[AllToAllPE.scala 112:27]
    right_dispatcher.io.x_0 <= right_in.io.deq.bits.x_0 @[AllToAllPE.scala 114:27]
    right_dispatcher.io.y_0 <= right_in.io.deq.bits.y_0 @[AllToAllPE.scala 115:27]
    right_dispatcher.io.x_dest <= right_in.io.deq.bits.x_dest @[AllToAllPE.scala 116:30]
    right_dispatcher.io.y_dest <= right_in.io.deq.bits.y_dest @[AllToAllPE.scala 117:30]
    right_dispatcher.io.x_PE <= x_coord @[AllToAllPE.scala 118:28]
    right_dispatcher.io.y_PE <= y_coord @[AllToAllPE.scala 119:28]
    up_dispatcher.io.x_0 <= up_in.io.deq.bits.x_0 @[AllToAllPE.scala 121:24]
    up_dispatcher.io.y_0 <= up_in.io.deq.bits.y_0 @[AllToAllPE.scala 122:24]
    up_dispatcher.io.x_dest <= up_in.io.deq.bits.x_dest @[AllToAllPE.scala 123:27]
    up_dispatcher.io.y_dest <= up_in.io.deq.bits.y_dest @[AllToAllPE.scala 124:27]
    up_dispatcher.io.x_PE <= x_coord @[AllToAllPE.scala 125:25]
    up_dispatcher.io.y_PE <= y_coord @[AllToAllPE.scala 126:25]
    bottom_dispatcher.io.x_0 <= bottom_in.io.deq.bits.x_0 @[AllToAllPE.scala 128:28]
    bottom_dispatcher.io.y_0 <= bottom_in.io.deq.bits.y_0 @[AllToAllPE.scala 129:28]
    bottom_dispatcher.io.x_dest <= bottom_in.io.deq.bits.x_dest @[AllToAllPE.scala 130:31]
    bottom_dispatcher.io.y_dest <= bottom_in.io.deq.bits.y_dest @[AllToAllPE.scala 131:31]
    bottom_dispatcher.io.x_PE <= x_coord @[AllToAllPE.scala 132:29]
    bottom_dispatcher.io.y_PE <= y_coord @[AllToAllPE.scala 133:29]
    generation_dispatcher_0.io.x_PE <= x_coord @[AllToAllPE.scala 136:35]
    generation_dispatcher_0.io.y_PE <= y_coord @[AllToAllPE.scala 137:35]
    generation_dispatcher_0.io.x_dest <= read_x_dest[0] @[AllToAllPE.scala 138:37]
    generation_dispatcher_0.io.y_dest <= read_y_dest[0] @[AllToAllPE.scala 139:37]
    generation_dispatcher_1.io.x_PE <= x_coord @[AllToAllPE.scala 141:35]
    generation_dispatcher_1.io.y_PE <= y_coord @[AllToAllPE.scala 142:35]
    generation_dispatcher_1.io.x_dest <= read_x_dest[1] @[AllToAllPE.scala 143:37]
    generation_dispatcher_1.io.y_dest <= read_y_dest[1] @[AllToAllPE.scala 144:37]
    generation_dispatcher_2.io.x_PE <= x_coord @[AllToAllPE.scala 146:35]
    generation_dispatcher_2.io.y_PE <= y_coord @[AllToAllPE.scala 147:35]
    generation_dispatcher_2.io.x_dest <= read_x_dest[2] @[AllToAllPE.scala 148:37]
    generation_dispatcher_2.io.y_dest <= read_y_dest[2] @[AllToAllPE.scala 149:37]
    generation_dispatcher_3.io.x_PE <= x_coord @[AllToAllPE.scala 151:35]
    generation_dispatcher_3.io.y_PE <= y_coord @[AllToAllPE.scala 152:35]
    generation_dispatcher_3.io.x_dest <= read_x_dest[3] @[AllToAllPE.scala 153:37]
    generation_dispatcher_3.io.y_dest <= read_y_dest[3] @[AllToAllPE.scala 154:37]
    node _T_17 = and(left_dispatcher.io.this_PE, left_in.io.deq.valid) @[AllToAllPE.scala 159:35]
    when _T_17 : @[AllToAllPE.scala 159:52]
      node _T_18 = mul(left_in.io.deq.bits.y_0, UInt<2>("h3")) @[AllToAllPE.scala 160:48]
      node _T_19 = add(left_in.io.deq.bits.x_0, _T_18) @[AllToAllPE.scala 160:29]
      node _T_20 = tail(_T_19, 1) @[AllToAllPE.scala 160:29]
      node _T_21 = mul(_T_20, dim_N) @[AllToAllPE.scala 160:54]
      node _T_22 = add(_T_21, left_in.io.deq.bits.pos) @[AllToAllPE.scala 160:61]
      node _T_23 = tail(_T_22, 1) @[AllToAllPE.scala 160:61]
      node _T_24 = add(_T_23, offset) @[AllToAllPE.scala 160:80]
      node _T_25 = tail(_T_24, 1) @[AllToAllPE.scala 160:80]
      node _T_26 = bits(_T_25, 9, 0) @[AllToAllPE.scala 160:10]
      infer mport MPORT = memPE[_T_26], clock @[AllToAllPE.scala 160:10]
      MPORT <= left_in.io.deq.bits.data @[AllToAllPE.scala 160:90]
    node _T_27 = and(right_dispatcher.io.this_PE, right_in.io.deq.valid) @[AllToAllPE.scala 163:36]
    when _T_27 : @[AllToAllPE.scala 163:54]
      node _T_28 = mul(right_in.io.deq.bits.y_0, UInt<2>("h3")) @[AllToAllPE.scala 164:50]
      node _T_29 = add(right_in.io.deq.bits.x_0, _T_28) @[AllToAllPE.scala 164:30]
      node _T_30 = tail(_T_29, 1) @[AllToAllPE.scala 164:30]
      node _T_31 = mul(_T_30, dim_N) @[AllToAllPE.scala 164:56]
      node _T_32 = add(_T_31, right_in.io.deq.bits.pos) @[AllToAllPE.scala 164:63]
      node _T_33 = tail(_T_32, 1) @[AllToAllPE.scala 164:63]
      node _T_34 = add(_T_33, offset) @[AllToAllPE.scala 164:83]
      node _T_35 = tail(_T_34, 1) @[AllToAllPE.scala 164:83]
      node _T_36 = bits(_T_35, 9, 0) @[AllToAllPE.scala 164:10]
      infer mport MPORT_1 = memPE[_T_36], clock @[AllToAllPE.scala 164:10]
      MPORT_1 <= right_in.io.deq.bits.data @[AllToAllPE.scala 164:93]
    node _T_37 = and(up_dispatcher.io.this_PE, up_in.io.deq.valid) @[AllToAllPE.scala 167:33]
    when _T_37 : @[AllToAllPE.scala 167:48]
      node _T_38 = mul(up_in.io.deq.bits.y_0, UInt<2>("h3")) @[AllToAllPE.scala 168:44]
      node _T_39 = add(up_in.io.deq.bits.x_0, _T_38) @[AllToAllPE.scala 168:27]
      node _T_40 = tail(_T_39, 1) @[AllToAllPE.scala 168:27]
      node _T_41 = mul(_T_40, dim_N) @[AllToAllPE.scala 168:50]
      node _T_42 = add(_T_41, up_in.io.deq.bits.pos) @[AllToAllPE.scala 168:57]
      node _T_43 = tail(_T_42, 1) @[AllToAllPE.scala 168:57]
      node _T_44 = add(_T_43, offset) @[AllToAllPE.scala 168:74]
      node _T_45 = tail(_T_44, 1) @[AllToAllPE.scala 168:74]
      node _T_46 = bits(_T_45, 9, 0) @[AllToAllPE.scala 168:10]
      infer mport MPORT_2 = memPE[_T_46], clock @[AllToAllPE.scala 168:10]
      MPORT_2 <= up_in.io.deq.bits.data @[AllToAllPE.scala 168:84]
    node _T_47 = and(bottom_dispatcher.io.this_PE, bottom_in.io.deq.valid) @[AllToAllPE.scala 171:37]
    when _T_47 : @[AllToAllPE.scala 171:56]
      node _T_48 = mul(bottom_in.io.deq.bits.y_0, UInt<2>("h3")) @[AllToAllPE.scala 172:52]
      node _T_49 = add(bottom_in.io.deq.bits.x_0, _T_48) @[AllToAllPE.scala 172:31]
      node _T_50 = tail(_T_49, 1) @[AllToAllPE.scala 172:31]
      node _T_51 = mul(_T_50, dim_N) @[AllToAllPE.scala 172:58]
      node _T_52 = add(_T_51, bottom_in.io.deq.bits.pos) @[AllToAllPE.scala 172:65]
      node _T_53 = tail(_T_52, 1) @[AllToAllPE.scala 172:65]
      node _T_54 = add(_T_53, offset) @[AllToAllPE.scala 172:86]
      node _T_55 = tail(_T_54, 1) @[AllToAllPE.scala 172:86]
      node _T_56 = bits(_T_55, 9, 0) @[AllToAllPE.scala 172:10]
      infer mport MPORT_3 = memPE[_T_56], clock @[AllToAllPE.scala 172:10]
      MPORT_3 <= bottom_in.io.deq.bits.data @[AllToAllPE.scala 172:96]
    inst left_mux of MyPriorityMux @[AllToAllPE.scala 179:24]
    left_mux.clock <= clock
    left_mux.reset <= reset
    inst right_mux of MyPriorityMux_1 @[AllToAllPE.scala 180:25]
    right_mux.clock <= clock
    right_mux.reset <= reset
    inst up_mux of MyPriorityMux_2 @[AllToAllPE.scala 181:22]
    up_mux.clock <= clock
    up_mux.reset <= reset
    inst bottom_mux of MyPriorityMux_3 @[AllToAllPE.scala 182:26]
    bottom_mux.clock <= clock
    bottom_mux.reset <= reset
    wire input_0 : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>} @[AllToAllPE.scala 186:21]
    input_0.data <= read_values[0] @[AllToAllPE.scala 187:16]
    input_0.x_0 <= x_coord @[AllToAllPE.scala 188:15]
    input_0.y_0 <= y_coord @[AllToAllPE.scala 189:15]
    input_0.x_dest <= read_x_dest[0] @[AllToAllPE.scala 190:18]
    input_0.y_dest <= read_y_dest[0] @[AllToAllPE.scala 191:18]
    input_0.pos <= read_pos[0] @[AllToAllPE.scala 192:15]
    wire input_1 : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>} @[AllToAllPE.scala 194:21]
    input_1.data <= read_values[1] @[AllToAllPE.scala 195:16]
    input_1.x_0 <= x_coord @[AllToAllPE.scala 196:15]
    input_1.y_0 <= y_coord @[AllToAllPE.scala 197:15]
    input_1.x_dest <= read_x_dest[1] @[AllToAllPE.scala 198:18]
    input_1.y_dest <= read_y_dest[1] @[AllToAllPE.scala 199:18]
    input_1.pos <= read_pos[1] @[AllToAllPE.scala 200:15]
    wire input_2 : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>} @[AllToAllPE.scala 202:21]
    input_2.data <= read_values[2] @[AllToAllPE.scala 203:16]
    input_2.x_0 <= x_coord @[AllToAllPE.scala 204:15]
    input_2.y_0 <= y_coord @[AllToAllPE.scala 205:15]
    input_2.x_dest <= read_x_dest[2] @[AllToAllPE.scala 206:18]
    input_2.y_dest <= read_y_dest[2] @[AllToAllPE.scala 207:18]
    input_2.pos <= read_pos[2] @[AllToAllPE.scala 208:15]
    wire input_3 : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>, pos : UInt<16>} @[AllToAllPE.scala 210:21]
    input_3.data <= read_values[3] @[AllToAllPE.scala 211:16]
    input_3.x_0 <= x_coord @[AllToAllPE.scala 212:15]
    input_3.y_0 <= y_coord @[AllToAllPE.scala 213:15]
    input_3.x_dest <= read_x_dest[3] @[AllToAllPE.scala 214:18]
    input_3.y_dest <= read_y_dest[3] @[AllToAllPE.scala 215:18]
    input_3.pos <= read_pos[3] @[AllToAllPE.scala 216:15]
    node _T_57 = and(read_values_valid[0], generation_dispatcher_0.io.left) @[AllToAllPE.scala 219:48]
    node _T_58 = eq(this_PE_generation_0, UInt<1>("h0")) @[AllToAllPE.scala 219:86]
    node _T_59 = and(_T_57, _T_58) @[AllToAllPE.scala 219:83]
    left_mux.io.valid[0] <= _T_59 @[AllToAllPE.scala 219:24]
    node _T_60 = and(read_values_valid[1], generation_dispatcher_1.io.left) @[AllToAllPE.scala 220:48]
    node _T_61 = eq(this_PE_generation_1, UInt<1>("h0")) @[AllToAllPE.scala 220:86]
    node _T_62 = and(_T_60, _T_61) @[AllToAllPE.scala 220:83]
    left_mux.io.valid[1] <= _T_62 @[AllToAllPE.scala 220:24]
    node _T_63 = and(read_values_valid[2], generation_dispatcher_2.io.left) @[AllToAllPE.scala 221:48]
    node _T_64 = eq(this_PE_generation_2, UInt<1>("h0")) @[AllToAllPE.scala 221:86]
    node _T_65 = and(_T_63, _T_64) @[AllToAllPE.scala 221:83]
    left_mux.io.valid[2] <= _T_65 @[AllToAllPE.scala 221:24]
    node _T_66 = and(read_values_valid[3], generation_dispatcher_3.io.left) @[AllToAllPE.scala 222:48]
    node _T_67 = eq(this_PE_generation_3, UInt<1>("h0")) @[AllToAllPE.scala 222:86]
    node _T_68 = and(_T_66, _T_67) @[AllToAllPE.scala 222:83]
    left_mux.io.valid[3] <= _T_68 @[AllToAllPE.scala 222:24]
    left_mux.io.in_bits[0].pos <= input_0.pos @[AllToAllPE.scala 224:26]
    left_mux.io.in_bits[0].y_dest <= input_0.y_dest @[AllToAllPE.scala 224:26]
    left_mux.io.in_bits[0].x_dest <= input_0.x_dest @[AllToAllPE.scala 224:26]
    left_mux.io.in_bits[0].y_0 <= input_0.y_0 @[AllToAllPE.scala 224:26]
    left_mux.io.in_bits[0].x_0 <= input_0.x_0 @[AllToAllPE.scala 224:26]
    left_mux.io.in_bits[0].data <= input_0.data @[AllToAllPE.scala 224:26]
    left_mux.io.in_bits[1].pos <= input_1.pos @[AllToAllPE.scala 225:26]
    left_mux.io.in_bits[1].y_dest <= input_1.y_dest @[AllToAllPE.scala 225:26]
    left_mux.io.in_bits[1].x_dest <= input_1.x_dest @[AllToAllPE.scala 225:26]
    left_mux.io.in_bits[1].y_0 <= input_1.y_0 @[AllToAllPE.scala 225:26]
    left_mux.io.in_bits[1].x_0 <= input_1.x_0 @[AllToAllPE.scala 225:26]
    left_mux.io.in_bits[1].data <= input_1.data @[AllToAllPE.scala 225:26]
    left_mux.io.in_bits[2].pos <= input_2.pos @[AllToAllPE.scala 226:26]
    left_mux.io.in_bits[2].y_dest <= input_2.y_dest @[AllToAllPE.scala 226:26]
    left_mux.io.in_bits[2].x_dest <= input_2.x_dest @[AllToAllPE.scala 226:26]
    left_mux.io.in_bits[2].y_0 <= input_2.y_0 @[AllToAllPE.scala 226:26]
    left_mux.io.in_bits[2].x_0 <= input_2.x_0 @[AllToAllPE.scala 226:26]
    left_mux.io.in_bits[2].data <= input_2.data @[AllToAllPE.scala 226:26]
    left_mux.io.in_bits[3].pos <= input_3.pos @[AllToAllPE.scala 227:26]
    left_mux.io.in_bits[3].y_dest <= input_3.y_dest @[AllToAllPE.scala 227:26]
    left_mux.io.in_bits[3].x_dest <= input_3.x_dest @[AllToAllPE.scala 227:26]
    left_mux.io.in_bits[3].y_0 <= input_3.y_0 @[AllToAllPE.scala 227:26]
    left_mux.io.in_bits[3].x_0 <= input_3.x_0 @[AllToAllPE.scala 227:26]
    left_mux.io.in_bits[3].data <= input_3.data @[AllToAllPE.scala 227:26]
    node _T_69 = and(read_values_valid[0], generation_dispatcher_0.io.right) @[AllToAllPE.scala 230:49]
    node _T_70 = eq(this_PE_generation_0, UInt<1>("h0")) @[AllToAllPE.scala 230:88]
    node _T_71 = and(_T_69, _T_70) @[AllToAllPE.scala 230:85]
    right_mux.io.valid[0] <= _T_71 @[AllToAllPE.scala 230:25]
    node _T_72 = and(read_values_valid[1], generation_dispatcher_1.io.right) @[AllToAllPE.scala 231:49]
    node _T_73 = eq(this_PE_generation_1, UInt<1>("h0")) @[AllToAllPE.scala 231:88]
    node _T_74 = and(_T_72, _T_73) @[AllToAllPE.scala 231:85]
    right_mux.io.valid[1] <= _T_74 @[AllToAllPE.scala 231:25]
    node _T_75 = and(read_values_valid[2], generation_dispatcher_2.io.right) @[AllToAllPE.scala 232:49]
    node _T_76 = eq(this_PE_generation_2, UInt<1>("h0")) @[AllToAllPE.scala 232:88]
    node _T_77 = and(_T_75, _T_76) @[AllToAllPE.scala 232:85]
    right_mux.io.valid[2] <= _T_77 @[AllToAllPE.scala 232:25]
    node _T_78 = and(read_values_valid[3], generation_dispatcher_3.io.right) @[AllToAllPE.scala 233:49]
    node _T_79 = eq(this_PE_generation_3, UInt<1>("h0")) @[AllToAllPE.scala 233:88]
    node _T_80 = and(_T_78, _T_79) @[AllToAllPE.scala 233:85]
    right_mux.io.valid[3] <= _T_80 @[AllToAllPE.scala 233:25]
    right_mux.io.in_bits[0].pos <= input_0.pos @[AllToAllPE.scala 235:27]
    right_mux.io.in_bits[0].y_dest <= input_0.y_dest @[AllToAllPE.scala 235:27]
    right_mux.io.in_bits[0].x_dest <= input_0.x_dest @[AllToAllPE.scala 235:27]
    right_mux.io.in_bits[0].y_0 <= input_0.y_0 @[AllToAllPE.scala 235:27]
    right_mux.io.in_bits[0].x_0 <= input_0.x_0 @[AllToAllPE.scala 235:27]
    right_mux.io.in_bits[0].data <= input_0.data @[AllToAllPE.scala 235:27]
    right_mux.io.in_bits[1].pos <= input_1.pos @[AllToAllPE.scala 236:27]
    right_mux.io.in_bits[1].y_dest <= input_1.y_dest @[AllToAllPE.scala 236:27]
    right_mux.io.in_bits[1].x_dest <= input_1.x_dest @[AllToAllPE.scala 236:27]
    right_mux.io.in_bits[1].y_0 <= input_1.y_0 @[AllToAllPE.scala 236:27]
    right_mux.io.in_bits[1].x_0 <= input_1.x_0 @[AllToAllPE.scala 236:27]
    right_mux.io.in_bits[1].data <= input_1.data @[AllToAllPE.scala 236:27]
    right_mux.io.in_bits[2].pos <= input_2.pos @[AllToAllPE.scala 237:27]
    right_mux.io.in_bits[2].y_dest <= input_2.y_dest @[AllToAllPE.scala 237:27]
    right_mux.io.in_bits[2].x_dest <= input_2.x_dest @[AllToAllPE.scala 237:27]
    right_mux.io.in_bits[2].y_0 <= input_2.y_0 @[AllToAllPE.scala 237:27]
    right_mux.io.in_bits[2].x_0 <= input_2.x_0 @[AllToAllPE.scala 237:27]
    right_mux.io.in_bits[2].data <= input_2.data @[AllToAllPE.scala 237:27]
    right_mux.io.in_bits[3].pos <= input_3.pos @[AllToAllPE.scala 238:27]
    right_mux.io.in_bits[3].y_dest <= input_3.y_dest @[AllToAllPE.scala 238:27]
    right_mux.io.in_bits[3].x_dest <= input_3.x_dest @[AllToAllPE.scala 238:27]
    right_mux.io.in_bits[3].y_0 <= input_3.y_0 @[AllToAllPE.scala 238:27]
    right_mux.io.in_bits[3].x_0 <= input_3.x_0 @[AllToAllPE.scala 238:27]
    right_mux.io.in_bits[3].data <= input_3.data @[AllToAllPE.scala 238:27]
    node _T_81 = and(read_values_valid[0], generation_dispatcher_0.io.up) @[AllToAllPE.scala 241:46]
    node _T_82 = eq(this_PE_generation_0, UInt<1>("h0")) @[AllToAllPE.scala 241:82]
    node _T_83 = and(_T_81, _T_82) @[AllToAllPE.scala 241:79]
    up_mux.io.valid[0] <= _T_83 @[AllToAllPE.scala 241:22]
    node _T_84 = and(read_values_valid[1], generation_dispatcher_1.io.up) @[AllToAllPE.scala 242:46]
    node _T_85 = eq(this_PE_generation_1, UInt<1>("h0")) @[AllToAllPE.scala 242:82]
    node _T_86 = and(_T_84, _T_85) @[AllToAllPE.scala 242:79]
    up_mux.io.valid[1] <= _T_86 @[AllToAllPE.scala 242:22]
    node _T_87 = and(read_values_valid[2], generation_dispatcher_2.io.up) @[AllToAllPE.scala 243:46]
    node _T_88 = eq(this_PE_generation_2, UInt<1>("h0")) @[AllToAllPE.scala 243:82]
    node _T_89 = and(_T_87, _T_88) @[AllToAllPE.scala 243:79]
    up_mux.io.valid[2] <= _T_89 @[AllToAllPE.scala 243:22]
    node _T_90 = and(read_values_valid[3], generation_dispatcher_3.io.up) @[AllToAllPE.scala 244:46]
    node _T_91 = eq(this_PE_generation_3, UInt<1>("h0")) @[AllToAllPE.scala 244:82]
    node _T_92 = and(_T_90, _T_91) @[AllToAllPE.scala 244:79]
    up_mux.io.valid[3] <= _T_92 @[AllToAllPE.scala 244:22]
    up_mux.io.in_bits[0].pos <= input_0.pos @[AllToAllPE.scala 246:24]
    up_mux.io.in_bits[0].y_dest <= input_0.y_dest @[AllToAllPE.scala 246:24]
    up_mux.io.in_bits[0].x_dest <= input_0.x_dest @[AllToAllPE.scala 246:24]
    up_mux.io.in_bits[0].y_0 <= input_0.y_0 @[AllToAllPE.scala 246:24]
    up_mux.io.in_bits[0].x_0 <= input_0.x_0 @[AllToAllPE.scala 246:24]
    up_mux.io.in_bits[0].data <= input_0.data @[AllToAllPE.scala 246:24]
    up_mux.io.in_bits[1].pos <= input_1.pos @[AllToAllPE.scala 247:24]
    up_mux.io.in_bits[1].y_dest <= input_1.y_dest @[AllToAllPE.scala 247:24]
    up_mux.io.in_bits[1].x_dest <= input_1.x_dest @[AllToAllPE.scala 247:24]
    up_mux.io.in_bits[1].y_0 <= input_1.y_0 @[AllToAllPE.scala 247:24]
    up_mux.io.in_bits[1].x_0 <= input_1.x_0 @[AllToAllPE.scala 247:24]
    up_mux.io.in_bits[1].data <= input_1.data @[AllToAllPE.scala 247:24]
    up_mux.io.in_bits[2].pos <= input_2.pos @[AllToAllPE.scala 248:24]
    up_mux.io.in_bits[2].y_dest <= input_2.y_dest @[AllToAllPE.scala 248:24]
    up_mux.io.in_bits[2].x_dest <= input_2.x_dest @[AllToAllPE.scala 248:24]
    up_mux.io.in_bits[2].y_0 <= input_2.y_0 @[AllToAllPE.scala 248:24]
    up_mux.io.in_bits[2].x_0 <= input_2.x_0 @[AllToAllPE.scala 248:24]
    up_mux.io.in_bits[2].data <= input_2.data @[AllToAllPE.scala 248:24]
    up_mux.io.in_bits[3].pos <= input_3.pos @[AllToAllPE.scala 249:24]
    up_mux.io.in_bits[3].y_dest <= input_3.y_dest @[AllToAllPE.scala 249:24]
    up_mux.io.in_bits[3].x_dest <= input_3.x_dest @[AllToAllPE.scala 249:24]
    up_mux.io.in_bits[3].y_0 <= input_3.y_0 @[AllToAllPE.scala 249:24]
    up_mux.io.in_bits[3].x_0 <= input_3.x_0 @[AllToAllPE.scala 249:24]
    up_mux.io.in_bits[3].data <= input_3.data @[AllToAllPE.scala 249:24]
    node _T_93 = and(read_values_valid[0], generation_dispatcher_0.io.bottom) @[AllToAllPE.scala 252:50]
    node _T_94 = eq(this_PE_generation_0, UInt<1>("h0")) @[AllToAllPE.scala 252:90]
    node _T_95 = and(_T_93, _T_94) @[AllToAllPE.scala 252:87]
    bottom_mux.io.valid[0] <= _T_95 @[AllToAllPE.scala 252:26]
    node _T_96 = and(read_values_valid[1], generation_dispatcher_1.io.bottom) @[AllToAllPE.scala 253:50]
    node _T_97 = eq(this_PE_generation_1, UInt<1>("h0")) @[AllToAllPE.scala 253:90]
    node _T_98 = and(_T_96, _T_97) @[AllToAllPE.scala 253:87]
    bottom_mux.io.valid[1] <= _T_98 @[AllToAllPE.scala 253:26]
    node _T_99 = and(read_values_valid[2], generation_dispatcher_2.io.bottom) @[AllToAllPE.scala 254:50]
    node _T_100 = eq(this_PE_generation_2, UInt<1>("h0")) @[AllToAllPE.scala 254:90]
    node _T_101 = and(_T_99, _T_100) @[AllToAllPE.scala 254:87]
    bottom_mux.io.valid[2] <= _T_101 @[AllToAllPE.scala 254:26]
    node _T_102 = and(read_values_valid[3], generation_dispatcher_3.io.bottom) @[AllToAllPE.scala 255:50]
    node _T_103 = eq(this_PE_generation_3, UInt<1>("h0")) @[AllToAllPE.scala 255:90]
    node _T_104 = and(_T_102, _T_103) @[AllToAllPE.scala 255:87]
    bottom_mux.io.valid[3] <= _T_104 @[AllToAllPE.scala 255:26]
    bottom_mux.io.in_bits[0].pos <= input_0.pos @[AllToAllPE.scala 257:28]
    bottom_mux.io.in_bits[0].y_dest <= input_0.y_dest @[AllToAllPE.scala 257:28]
    bottom_mux.io.in_bits[0].x_dest <= input_0.x_dest @[AllToAllPE.scala 257:28]
    bottom_mux.io.in_bits[0].y_0 <= input_0.y_0 @[AllToAllPE.scala 257:28]
    bottom_mux.io.in_bits[0].x_0 <= input_0.x_0 @[AllToAllPE.scala 257:28]
    bottom_mux.io.in_bits[0].data <= input_0.data @[AllToAllPE.scala 257:28]
    bottom_mux.io.in_bits[1].pos <= input_1.pos @[AllToAllPE.scala 258:28]
    bottom_mux.io.in_bits[1].y_dest <= input_1.y_dest @[AllToAllPE.scala 258:28]
    bottom_mux.io.in_bits[1].x_dest <= input_1.x_dest @[AllToAllPE.scala 258:28]
    bottom_mux.io.in_bits[1].y_0 <= input_1.y_0 @[AllToAllPE.scala 258:28]
    bottom_mux.io.in_bits[1].x_0 <= input_1.x_0 @[AllToAllPE.scala 258:28]
    bottom_mux.io.in_bits[1].data <= input_1.data @[AllToAllPE.scala 258:28]
    bottom_mux.io.in_bits[2].pos <= input_2.pos @[AllToAllPE.scala 259:28]
    bottom_mux.io.in_bits[2].y_dest <= input_2.y_dest @[AllToAllPE.scala 259:28]
    bottom_mux.io.in_bits[2].x_dest <= input_2.x_dest @[AllToAllPE.scala 259:28]
    bottom_mux.io.in_bits[2].y_0 <= input_2.y_0 @[AllToAllPE.scala 259:28]
    bottom_mux.io.in_bits[2].x_0 <= input_2.x_0 @[AllToAllPE.scala 259:28]
    bottom_mux.io.in_bits[2].data <= input_2.data @[AllToAllPE.scala 259:28]
    bottom_mux.io.in_bits[3].pos <= input_3.pos @[AllToAllPE.scala 260:28]
    bottom_mux.io.in_bits[3].y_dest <= input_3.y_dest @[AllToAllPE.scala 260:28]
    bottom_mux.io.in_bits[3].x_dest <= input_3.x_dest @[AllToAllPE.scala 260:28]
    bottom_mux.io.in_bits[3].y_0 <= input_3.y_0 @[AllToAllPE.scala 260:28]
    bottom_mux.io.in_bits[3].x_0 <= input_3.x_0 @[AllToAllPE.scala 260:28]
    bottom_mux.io.in_bits[3].data <= input_3.data @[AllToAllPE.scala 260:28]
    inst left_out_arbiter of RRArbiter @[AllToAllPE.scala 269:32]
    left_out_arbiter.clock <= clock
    left_out_arbiter.reset <= reset
    inst right_out_arbiter of RRArbiter_1 @[AllToAllPE.scala 270:33]
    right_out_arbiter.clock <= clock
    right_out_arbiter.reset <= reset
    inst up_out_arbiter of RRArbiter_2 @[AllToAllPE.scala 271:30]
    up_out_arbiter.clock <= clock
    up_out_arbiter.reset <= reset
    inst bottom_out_arbiter of RRArbiter_3 @[AllToAllPE.scala 272:33]
    bottom_out_arbiter.clock <= clock
    bottom_out_arbiter.reset <= reset
    inst left_out of Queue_4 @[Decoupled.scala 296:21]
    left_out.clock <= clock
    left_out.reset <= reset
    left_out.io.enq.valid <= left_out_arbiter.io.out.valid @[Decoupled.scala 297:22]
    left_out.io.enq.bits.pos <= left_out_arbiter.io.out.bits.pos @[Decoupled.scala 298:21]
    left_out.io.enq.bits.y_dest <= left_out_arbiter.io.out.bits.y_dest @[Decoupled.scala 298:21]
    left_out.io.enq.bits.x_dest <= left_out_arbiter.io.out.bits.x_dest @[Decoupled.scala 298:21]
    left_out.io.enq.bits.y_0 <= left_out_arbiter.io.out.bits.y_0 @[Decoupled.scala 298:21]
    left_out.io.enq.bits.x_0 <= left_out_arbiter.io.out.bits.x_0 @[Decoupled.scala 298:21]
    left_out.io.enq.bits.data <= left_out_arbiter.io.out.bits.data @[Decoupled.scala 298:21]
    left_out_arbiter.io.out.ready <= left_out.io.enq.ready @[Decoupled.scala 299:17]
    inst right_out of Queue_5 @[Decoupled.scala 296:21]
    right_out.clock <= clock
    right_out.reset <= reset
    right_out.io.enq.valid <= right_out_arbiter.io.out.valid @[Decoupled.scala 297:22]
    right_out.io.enq.bits.pos <= right_out_arbiter.io.out.bits.pos @[Decoupled.scala 298:21]
    right_out.io.enq.bits.y_dest <= right_out_arbiter.io.out.bits.y_dest @[Decoupled.scala 298:21]
    right_out.io.enq.bits.x_dest <= right_out_arbiter.io.out.bits.x_dest @[Decoupled.scala 298:21]
    right_out.io.enq.bits.y_0 <= right_out_arbiter.io.out.bits.y_0 @[Decoupled.scala 298:21]
    right_out.io.enq.bits.x_0 <= right_out_arbiter.io.out.bits.x_0 @[Decoupled.scala 298:21]
    right_out.io.enq.bits.data <= right_out_arbiter.io.out.bits.data @[Decoupled.scala 298:21]
    right_out_arbiter.io.out.ready <= right_out.io.enq.ready @[Decoupled.scala 299:17]
    inst up_out of Queue_6 @[Decoupled.scala 296:21]
    up_out.clock <= clock
    up_out.reset <= reset
    up_out.io.enq.valid <= up_out_arbiter.io.out.valid @[Decoupled.scala 297:22]
    up_out.io.enq.bits.pos <= up_out_arbiter.io.out.bits.pos @[Decoupled.scala 298:21]
    up_out.io.enq.bits.y_dest <= up_out_arbiter.io.out.bits.y_dest @[Decoupled.scala 298:21]
    up_out.io.enq.bits.x_dest <= up_out_arbiter.io.out.bits.x_dest @[Decoupled.scala 298:21]
    up_out.io.enq.bits.y_0 <= up_out_arbiter.io.out.bits.y_0 @[Decoupled.scala 298:21]
    up_out.io.enq.bits.x_0 <= up_out_arbiter.io.out.bits.x_0 @[Decoupled.scala 298:21]
    up_out.io.enq.bits.data <= up_out_arbiter.io.out.bits.data @[Decoupled.scala 298:21]
    up_out_arbiter.io.out.ready <= up_out.io.enq.ready @[Decoupled.scala 299:17]
    inst bottom_out of Queue_7 @[Decoupled.scala 296:21]
    bottom_out.clock <= clock
    bottom_out.reset <= reset
    bottom_out.io.enq.valid <= bottom_out_arbiter.io.out.valid @[Decoupled.scala 297:22]
    bottom_out.io.enq.bits.pos <= bottom_out_arbiter.io.out.bits.pos @[Decoupled.scala 298:21]
    bottom_out.io.enq.bits.y_dest <= bottom_out_arbiter.io.out.bits.y_dest @[Decoupled.scala 298:21]
    bottom_out.io.enq.bits.x_dest <= bottom_out_arbiter.io.out.bits.x_dest @[Decoupled.scala 298:21]
    bottom_out.io.enq.bits.y_0 <= bottom_out_arbiter.io.out.bits.y_0 @[Decoupled.scala 298:21]
    bottom_out.io.enq.bits.x_0 <= bottom_out_arbiter.io.out.bits.x_0 @[Decoupled.scala 298:21]
    bottom_out.io.enq.bits.data <= bottom_out_arbiter.io.out.bits.data @[Decoupled.scala 298:21]
    bottom_out_arbiter.io.out.ready <= bottom_out.io.enq.ready @[Decoupled.scala 299:17]
    io.left.out.bits.pos <= left_out.io.deq.bits.pos @[AllToAllPE.scala 281:15]
    io.left.out.bits.y_dest <= left_out.io.deq.bits.y_dest @[AllToAllPE.scala 281:15]
    io.left.out.bits.x_dest <= left_out.io.deq.bits.x_dest @[AllToAllPE.scala 281:15]
    io.left.out.bits.y_0 <= left_out.io.deq.bits.y_0 @[AllToAllPE.scala 281:15]
    io.left.out.bits.x_0 <= left_out.io.deq.bits.x_0 @[AllToAllPE.scala 281:15]
    io.left.out.bits.data <= left_out.io.deq.bits.data @[AllToAllPE.scala 281:15]
    io.left.out.valid <= left_out.io.deq.valid @[AllToAllPE.scala 281:15]
    left_out.io.deq.ready <= io.left.out.ready @[AllToAllPE.scala 281:15]
    io.right.out.bits.pos <= right_out.io.deq.bits.pos @[AllToAllPE.scala 282:16]
    io.right.out.bits.y_dest <= right_out.io.deq.bits.y_dest @[AllToAllPE.scala 282:16]
    io.right.out.bits.x_dest <= right_out.io.deq.bits.x_dest @[AllToAllPE.scala 282:16]
    io.right.out.bits.y_0 <= right_out.io.deq.bits.y_0 @[AllToAllPE.scala 282:16]
    io.right.out.bits.x_0 <= right_out.io.deq.bits.x_0 @[AllToAllPE.scala 282:16]
    io.right.out.bits.data <= right_out.io.deq.bits.data @[AllToAllPE.scala 282:16]
    io.right.out.valid <= right_out.io.deq.valid @[AllToAllPE.scala 282:16]
    right_out.io.deq.ready <= io.right.out.ready @[AllToAllPE.scala 282:16]
    io.up.out.bits.pos <= up_out.io.deq.bits.pos @[AllToAllPE.scala 283:13]
    io.up.out.bits.y_dest <= up_out.io.deq.bits.y_dest @[AllToAllPE.scala 283:13]
    io.up.out.bits.x_dest <= up_out.io.deq.bits.x_dest @[AllToAllPE.scala 283:13]
    io.up.out.bits.y_0 <= up_out.io.deq.bits.y_0 @[AllToAllPE.scala 283:13]
    io.up.out.bits.x_0 <= up_out.io.deq.bits.x_0 @[AllToAllPE.scala 283:13]
    io.up.out.bits.data <= up_out.io.deq.bits.data @[AllToAllPE.scala 283:13]
    io.up.out.valid <= up_out.io.deq.valid @[AllToAllPE.scala 283:13]
    up_out.io.deq.ready <= io.up.out.ready @[AllToAllPE.scala 283:13]
    io.bottom.out.bits.pos <= bottom_out.io.deq.bits.pos @[AllToAllPE.scala 284:17]
    io.bottom.out.bits.y_dest <= bottom_out.io.deq.bits.y_dest @[AllToAllPE.scala 284:17]
    io.bottom.out.bits.x_dest <= bottom_out.io.deq.bits.x_dest @[AllToAllPE.scala 284:17]
    io.bottom.out.bits.y_0 <= bottom_out.io.deq.bits.y_0 @[AllToAllPE.scala 284:17]
    io.bottom.out.bits.x_0 <= bottom_out.io.deq.bits.x_0 @[AllToAllPE.scala 284:17]
    io.bottom.out.bits.data <= bottom_out.io.deq.bits.data @[AllToAllPE.scala 284:17]
    io.bottom.out.valid <= bottom_out.io.deq.valid @[AllToAllPE.scala 284:17]
    bottom_out.io.deq.ready <= io.bottom.out.ready @[AllToAllPE.scala 284:17]
    left_out_arbiter.io.in[0].bits.pos <= left_mux.io.out_val.bits.pos @[AllToAllPE.scala 292:34]
    left_out_arbiter.io.in[0].bits.y_dest <= left_mux.io.out_val.bits.y_dest @[AllToAllPE.scala 292:34]
    left_out_arbiter.io.in[0].bits.x_dest <= left_mux.io.out_val.bits.x_dest @[AllToAllPE.scala 292:34]
    left_out_arbiter.io.in[0].bits.y_0 <= left_mux.io.out_val.bits.y_0 @[AllToAllPE.scala 292:34]
    left_out_arbiter.io.in[0].bits.x_0 <= left_mux.io.out_val.bits.x_0 @[AllToAllPE.scala 292:34]
    left_out_arbiter.io.in[0].bits.data <= left_mux.io.out_val.bits.data @[AllToAllPE.scala 292:34]
    left_out_arbiter.io.in[0].valid <= left_mux.io.out_valid @[AllToAllPE.scala 293:35]
    left_out_arbiter.io.in[1].bits.pos <= right_in.io.deq.bits.pos @[AllToAllPE.scala 294:34]
    left_out_arbiter.io.in[1].bits.y_dest <= right_in.io.deq.bits.y_dest @[AllToAllPE.scala 294:34]
    left_out_arbiter.io.in[1].bits.x_dest <= right_in.io.deq.bits.x_dest @[AllToAllPE.scala 294:34]
    left_out_arbiter.io.in[1].bits.y_0 <= right_in.io.deq.bits.y_0 @[AllToAllPE.scala 294:34]
    left_out_arbiter.io.in[1].bits.x_0 <= right_in.io.deq.bits.x_0 @[AllToAllPE.scala 294:34]
    left_out_arbiter.io.in[1].bits.data <= right_in.io.deq.bits.data @[AllToAllPE.scala 294:34]
    node _T_105 = and(right_dispatcher.io.left, right_in.io.deq.valid) @[AllToAllPE.scala 295:63]
    left_out_arbiter.io.in[1].valid <= _T_105 @[AllToAllPE.scala 295:35]
    left_out_arbiter.io.in[2].bits.pos <= up_in.io.deq.bits.pos @[AllToAllPE.scala 296:34]
    left_out_arbiter.io.in[2].bits.y_dest <= up_in.io.deq.bits.y_dest @[AllToAllPE.scala 296:34]
    left_out_arbiter.io.in[2].bits.x_dest <= up_in.io.deq.bits.x_dest @[AllToAllPE.scala 296:34]
    left_out_arbiter.io.in[2].bits.y_0 <= up_in.io.deq.bits.y_0 @[AllToAllPE.scala 296:34]
    left_out_arbiter.io.in[2].bits.x_0 <= up_in.io.deq.bits.x_0 @[AllToAllPE.scala 296:34]
    left_out_arbiter.io.in[2].bits.data <= up_in.io.deq.bits.data @[AllToAllPE.scala 296:34]
    node _T_106 = and(up_dispatcher.io.left, up_in.io.deq.valid) @[AllToAllPE.scala 297:60]
    left_out_arbiter.io.in[2].valid <= _T_106 @[AllToAllPE.scala 297:35]
    left_out_arbiter.io.in[3].bits.pos <= bottom_in.io.deq.bits.pos @[AllToAllPE.scala 298:34]
    left_out_arbiter.io.in[3].bits.y_dest <= bottom_in.io.deq.bits.y_dest @[AllToAllPE.scala 298:34]
    left_out_arbiter.io.in[3].bits.x_dest <= bottom_in.io.deq.bits.x_dest @[AllToAllPE.scala 298:34]
    left_out_arbiter.io.in[3].bits.y_0 <= bottom_in.io.deq.bits.y_0 @[AllToAllPE.scala 298:34]
    left_out_arbiter.io.in[3].bits.x_0 <= bottom_in.io.deq.bits.x_0 @[AllToAllPE.scala 298:34]
    left_out_arbiter.io.in[3].bits.data <= bottom_in.io.deq.bits.data @[AllToAllPE.scala 298:34]
    node _T_107 = and(bottom_dispatcher.io.left, bottom_in.io.deq.valid) @[AllToAllPE.scala 299:64]
    left_out_arbiter.io.in[3].valid <= _T_107 @[AllToAllPE.scala 299:35]
    right_out_arbiter.io.in[0].bits.pos <= right_mux.io.out_val.bits.pos @[AllToAllPE.scala 302:35]
    right_out_arbiter.io.in[0].bits.y_dest <= right_mux.io.out_val.bits.y_dest @[AllToAllPE.scala 302:35]
    right_out_arbiter.io.in[0].bits.x_dest <= right_mux.io.out_val.bits.x_dest @[AllToAllPE.scala 302:35]
    right_out_arbiter.io.in[0].bits.y_0 <= right_mux.io.out_val.bits.y_0 @[AllToAllPE.scala 302:35]
    right_out_arbiter.io.in[0].bits.x_0 <= right_mux.io.out_val.bits.x_0 @[AllToAllPE.scala 302:35]
    right_out_arbiter.io.in[0].bits.data <= right_mux.io.out_val.bits.data @[AllToAllPE.scala 302:35]
    right_out_arbiter.io.in[0].valid <= right_mux.io.out_valid @[AllToAllPE.scala 303:36]
    right_out_arbiter.io.in[1].bits.pos <= left_in.io.deq.bits.pos @[AllToAllPE.scala 304:35]
    right_out_arbiter.io.in[1].bits.y_dest <= left_in.io.deq.bits.y_dest @[AllToAllPE.scala 304:35]
    right_out_arbiter.io.in[1].bits.x_dest <= left_in.io.deq.bits.x_dest @[AllToAllPE.scala 304:35]
    right_out_arbiter.io.in[1].bits.y_0 <= left_in.io.deq.bits.y_0 @[AllToAllPE.scala 304:35]
    right_out_arbiter.io.in[1].bits.x_0 <= left_in.io.deq.bits.x_0 @[AllToAllPE.scala 304:35]
    right_out_arbiter.io.in[1].bits.data <= left_in.io.deq.bits.data @[AllToAllPE.scala 304:35]
    node _T_108 = and(left_dispatcher.io.right, left_in.io.deq.valid) @[AllToAllPE.scala 305:64]
    right_out_arbiter.io.in[1].valid <= _T_108 @[AllToAllPE.scala 305:36]
    right_out_arbiter.io.in[2].bits.pos <= up_in.io.deq.bits.pos @[AllToAllPE.scala 306:35]
    right_out_arbiter.io.in[2].bits.y_dest <= up_in.io.deq.bits.y_dest @[AllToAllPE.scala 306:35]
    right_out_arbiter.io.in[2].bits.x_dest <= up_in.io.deq.bits.x_dest @[AllToAllPE.scala 306:35]
    right_out_arbiter.io.in[2].bits.y_0 <= up_in.io.deq.bits.y_0 @[AllToAllPE.scala 306:35]
    right_out_arbiter.io.in[2].bits.x_0 <= up_in.io.deq.bits.x_0 @[AllToAllPE.scala 306:35]
    right_out_arbiter.io.in[2].bits.data <= up_in.io.deq.bits.data @[AllToAllPE.scala 306:35]
    node _T_109 = and(up_dispatcher.io.right, up_in.io.deq.valid) @[AllToAllPE.scala 307:62]
    right_out_arbiter.io.in[2].valid <= _T_109 @[AllToAllPE.scala 307:36]
    right_out_arbiter.io.in[3].bits.pos <= bottom_in.io.deq.bits.pos @[AllToAllPE.scala 308:35]
    right_out_arbiter.io.in[3].bits.y_dest <= bottom_in.io.deq.bits.y_dest @[AllToAllPE.scala 308:35]
    right_out_arbiter.io.in[3].bits.x_dest <= bottom_in.io.deq.bits.x_dest @[AllToAllPE.scala 308:35]
    right_out_arbiter.io.in[3].bits.y_0 <= bottom_in.io.deq.bits.y_0 @[AllToAllPE.scala 308:35]
    right_out_arbiter.io.in[3].bits.x_0 <= bottom_in.io.deq.bits.x_0 @[AllToAllPE.scala 308:35]
    right_out_arbiter.io.in[3].bits.data <= bottom_in.io.deq.bits.data @[AllToAllPE.scala 308:35]
    node _T_110 = and(bottom_dispatcher.io.right, bottom_in.io.deq.valid) @[AllToAllPE.scala 309:66]
    right_out_arbiter.io.in[3].valid <= _T_110 @[AllToAllPE.scala 309:36]
    up_out_arbiter.io.in[0].bits.pos <= up_mux.io.out_val.bits.pos @[AllToAllPE.scala 312:32]
    up_out_arbiter.io.in[0].bits.y_dest <= up_mux.io.out_val.bits.y_dest @[AllToAllPE.scala 312:32]
    up_out_arbiter.io.in[0].bits.x_dest <= up_mux.io.out_val.bits.x_dest @[AllToAllPE.scala 312:32]
    up_out_arbiter.io.in[0].bits.y_0 <= up_mux.io.out_val.bits.y_0 @[AllToAllPE.scala 312:32]
    up_out_arbiter.io.in[0].bits.x_0 <= up_mux.io.out_val.bits.x_0 @[AllToAllPE.scala 312:32]
    up_out_arbiter.io.in[0].bits.data <= up_mux.io.out_val.bits.data @[AllToAllPE.scala 312:32]
    up_out_arbiter.io.in[0].valid <= up_mux.io.out_valid @[AllToAllPE.scala 313:33]
    up_out_arbiter.io.in[1].bits.pos <= left_in.io.deq.bits.pos @[AllToAllPE.scala 314:32]
    up_out_arbiter.io.in[1].bits.y_dest <= left_in.io.deq.bits.y_dest @[AllToAllPE.scala 314:32]
    up_out_arbiter.io.in[1].bits.x_dest <= left_in.io.deq.bits.x_dest @[AllToAllPE.scala 314:32]
    up_out_arbiter.io.in[1].bits.y_0 <= left_in.io.deq.bits.y_0 @[AllToAllPE.scala 314:32]
    up_out_arbiter.io.in[1].bits.x_0 <= left_in.io.deq.bits.x_0 @[AllToAllPE.scala 314:32]
    up_out_arbiter.io.in[1].bits.data <= left_in.io.deq.bits.data @[AllToAllPE.scala 314:32]
    node _T_111 = and(left_dispatcher.io.up, left_in.io.deq.valid) @[AllToAllPE.scala 315:58]
    up_out_arbiter.io.in[1].valid <= _T_111 @[AllToAllPE.scala 315:33]
    up_out_arbiter.io.in[2].bits.pos <= right_in.io.deq.bits.pos @[AllToAllPE.scala 316:32]
    up_out_arbiter.io.in[2].bits.y_dest <= right_in.io.deq.bits.y_dest @[AllToAllPE.scala 316:32]
    up_out_arbiter.io.in[2].bits.x_dest <= right_in.io.deq.bits.x_dest @[AllToAllPE.scala 316:32]
    up_out_arbiter.io.in[2].bits.y_0 <= right_in.io.deq.bits.y_0 @[AllToAllPE.scala 316:32]
    up_out_arbiter.io.in[2].bits.x_0 <= right_in.io.deq.bits.x_0 @[AllToAllPE.scala 316:32]
    up_out_arbiter.io.in[2].bits.data <= right_in.io.deq.bits.data @[AllToAllPE.scala 316:32]
    node _T_112 = and(right_dispatcher.io.up, right_in.io.deq.valid) @[AllToAllPE.scala 317:59]
    up_out_arbiter.io.in[2].valid <= _T_112 @[AllToAllPE.scala 317:33]
    up_out_arbiter.io.in[3].bits.pos <= bottom_in.io.deq.bits.pos @[AllToAllPE.scala 318:32]
    up_out_arbiter.io.in[3].bits.y_dest <= bottom_in.io.deq.bits.y_dest @[AllToAllPE.scala 318:32]
    up_out_arbiter.io.in[3].bits.x_dest <= bottom_in.io.deq.bits.x_dest @[AllToAllPE.scala 318:32]
    up_out_arbiter.io.in[3].bits.y_0 <= bottom_in.io.deq.bits.y_0 @[AllToAllPE.scala 318:32]
    up_out_arbiter.io.in[3].bits.x_0 <= bottom_in.io.deq.bits.x_0 @[AllToAllPE.scala 318:32]
    up_out_arbiter.io.in[3].bits.data <= bottom_in.io.deq.bits.data @[AllToAllPE.scala 318:32]
    node _T_113 = and(bottom_dispatcher.io.up, bottom_in.io.deq.valid) @[AllToAllPE.scala 319:60]
    up_out_arbiter.io.in[3].valid <= _T_113 @[AllToAllPE.scala 319:33]
    bottom_out_arbiter.io.in[0].bits.pos <= bottom_mux.io.out_val.bits.pos @[AllToAllPE.scala 322:36]
    bottom_out_arbiter.io.in[0].bits.y_dest <= bottom_mux.io.out_val.bits.y_dest @[AllToAllPE.scala 322:36]
    bottom_out_arbiter.io.in[0].bits.x_dest <= bottom_mux.io.out_val.bits.x_dest @[AllToAllPE.scala 322:36]
    bottom_out_arbiter.io.in[0].bits.y_0 <= bottom_mux.io.out_val.bits.y_0 @[AllToAllPE.scala 322:36]
    bottom_out_arbiter.io.in[0].bits.x_0 <= bottom_mux.io.out_val.bits.x_0 @[AllToAllPE.scala 322:36]
    bottom_out_arbiter.io.in[0].bits.data <= bottom_mux.io.out_val.bits.data @[AllToAllPE.scala 322:36]
    bottom_out_arbiter.io.in[0].valid <= bottom_mux.io.out_valid @[AllToAllPE.scala 323:37]
    bottom_out_arbiter.io.in[1].bits.pos <= left_in.io.deq.bits.pos @[AllToAllPE.scala 324:36]
    bottom_out_arbiter.io.in[1].bits.y_dest <= left_in.io.deq.bits.y_dest @[AllToAllPE.scala 324:36]
    bottom_out_arbiter.io.in[1].bits.x_dest <= left_in.io.deq.bits.x_dest @[AllToAllPE.scala 324:36]
    bottom_out_arbiter.io.in[1].bits.y_0 <= left_in.io.deq.bits.y_0 @[AllToAllPE.scala 324:36]
    bottom_out_arbiter.io.in[1].bits.x_0 <= left_in.io.deq.bits.x_0 @[AllToAllPE.scala 324:36]
    bottom_out_arbiter.io.in[1].bits.data <= left_in.io.deq.bits.data @[AllToAllPE.scala 324:36]
    node _T_114 = and(left_dispatcher.io.bottom, left_in.io.deq.valid) @[AllToAllPE.scala 325:66]
    bottom_out_arbiter.io.in[1].valid <= _T_114 @[AllToAllPE.scala 325:37]
    bottom_out_arbiter.io.in[2].bits.pos <= right_in.io.deq.bits.pos @[AllToAllPE.scala 326:36]
    bottom_out_arbiter.io.in[2].bits.y_dest <= right_in.io.deq.bits.y_dest @[AllToAllPE.scala 326:36]
    bottom_out_arbiter.io.in[2].bits.x_dest <= right_in.io.deq.bits.x_dest @[AllToAllPE.scala 326:36]
    bottom_out_arbiter.io.in[2].bits.y_0 <= right_in.io.deq.bits.y_0 @[AllToAllPE.scala 326:36]
    bottom_out_arbiter.io.in[2].bits.x_0 <= right_in.io.deq.bits.x_0 @[AllToAllPE.scala 326:36]
    bottom_out_arbiter.io.in[2].bits.data <= right_in.io.deq.bits.data @[AllToAllPE.scala 326:36]
    node _T_115 = and(right_dispatcher.io.bottom, right_in.io.deq.valid) @[AllToAllPE.scala 327:67]
    bottom_out_arbiter.io.in[2].valid <= _T_115 @[AllToAllPE.scala 327:37]
    bottom_out_arbiter.io.in[3].bits.pos <= up_in.io.deq.bits.pos @[AllToAllPE.scala 328:36]
    bottom_out_arbiter.io.in[3].bits.y_dest <= up_in.io.deq.bits.y_dest @[AllToAllPE.scala 328:36]
    bottom_out_arbiter.io.in[3].bits.x_dest <= up_in.io.deq.bits.x_dest @[AllToAllPE.scala 328:36]
    bottom_out_arbiter.io.in[3].bits.y_0 <= up_in.io.deq.bits.y_0 @[AllToAllPE.scala 328:36]
    bottom_out_arbiter.io.in[3].bits.x_0 <= up_in.io.deq.bits.x_0 @[AllToAllPE.scala 328:36]
    bottom_out_arbiter.io.in[3].bits.data <= up_in.io.deq.bits.data @[AllToAllPE.scala 328:36]
    node _T_116 = and(up_dispatcher.io.bottom, up_in.io.deq.valid) @[AllToAllPE.scala 329:64]
    bottom_out_arbiter.io.in[3].valid <= _T_116 @[AllToAllPE.scala 329:37]
    node _q_io_deq_ready_T = and(left_dispatcher.io.right, right_out_arbiter.io.in[1].ready) @[AllToAllPE.scala 334:45]
    node _q_io_deq_ready_T_1 = or(left_dispatcher.io.this_PE, _q_io_deq_ready_T) @[AllToAllPE.scala 333:49]
    node _q_io_deq_ready_T_2 = and(left_dispatcher.io.up, up_out_arbiter.io.in[1].ready) @[AllToAllPE.scala 335:42]
    node _q_io_deq_ready_T_3 = or(_q_io_deq_ready_T_1, _q_io_deq_ready_T_2) @[AllToAllPE.scala 334:82]
    node _q_io_deq_ready_T_4 = and(left_dispatcher.io.bottom, bottom_out_arbiter.io.in[1].ready) @[AllToAllPE.scala 336:46]
    node _q_io_deq_ready_T_5 = or(_q_io_deq_ready_T_3, _q_io_deq_ready_T_4) @[AllToAllPE.scala 335:76]
    left_in.io.deq.ready <= _q_io_deq_ready_T_5 @[AllToAllPE.scala 333:17]
    node _q_io_deq_ready_T_6 = and(right_dispatcher.io.left, left_out_arbiter.io.in[1].ready) @[AllToAllPE.scala 339:45]
    node _q_io_deq_ready_T_7 = or(right_dispatcher.io.this_PE, _q_io_deq_ready_T_6) @[AllToAllPE.scala 338:51]
    node _q_io_deq_ready_T_8 = and(right_dispatcher.io.up, up_out_arbiter.io.in[2].ready) @[AllToAllPE.scala 340:43]
    node _q_io_deq_ready_T_9 = or(_q_io_deq_ready_T_7, _q_io_deq_ready_T_8) @[AllToAllPE.scala 339:81]
    node _q_io_deq_ready_T_10 = and(right_dispatcher.io.bottom, bottom_out_arbiter.io.in[2].ready) @[AllToAllPE.scala 341:47]
    node _q_io_deq_ready_T_11 = or(_q_io_deq_ready_T_9, _q_io_deq_ready_T_10) @[AllToAllPE.scala 340:77]
    right_in.io.deq.ready <= _q_io_deq_ready_T_11 @[AllToAllPE.scala 338:18]
    node _q_io_deq_ready_T_12 = and(up_dispatcher.io.left, left_out_arbiter.io.in[2].ready) @[AllToAllPE.scala 344:42]
    node _q_io_deq_ready_T_13 = or(up_dispatcher.io.this_PE, _q_io_deq_ready_T_12) @[AllToAllPE.scala 343:45]
    node _q_io_deq_ready_T_14 = and(up_dispatcher.io.right, right_out_arbiter.io.in[2].ready) @[AllToAllPE.scala 345:43]
    node _q_io_deq_ready_T_15 = or(_q_io_deq_ready_T_13, _q_io_deq_ready_T_14) @[AllToAllPE.scala 344:78]
    node _q_io_deq_ready_T_16 = and(up_dispatcher.io.bottom, bottom_out_arbiter.io.in[3].ready) @[AllToAllPE.scala 346:44]
    node _q_io_deq_ready_T_17 = or(_q_io_deq_ready_T_15, _q_io_deq_ready_T_16) @[AllToAllPE.scala 345:80]
    up_in.io.deq.ready <= _q_io_deq_ready_T_17 @[AllToAllPE.scala 343:15]
    node _q_io_deq_ready_T_18 = and(bottom_dispatcher.io.left, left_out_arbiter.io.in[3].ready) @[AllToAllPE.scala 349:46]
    node _q_io_deq_ready_T_19 = or(bottom_dispatcher.io.this_PE, _q_io_deq_ready_T_18) @[AllToAllPE.scala 348:53]
    node _q_io_deq_ready_T_20 = and(bottom_dispatcher.io.right, right_out_arbiter.io.in[3].ready) @[AllToAllPE.scala 350:47]
    node _q_io_deq_ready_T_21 = or(_q_io_deq_ready_T_19, _q_io_deq_ready_T_20) @[AllToAllPE.scala 349:82]
    node _q_io_deq_ready_T_22 = and(bottom_dispatcher.io.up, up_out_arbiter.io.in[3].ready) @[AllToAllPE.scala 351:44]
    node _q_io_deq_ready_T_23 = or(_q_io_deq_ready_T_21, _q_io_deq_ready_T_22) @[AllToAllPE.scala 350:84]
    bottom_in.io.deq.ready <= _q_io_deq_ready_T_23 @[AllToAllPE.scala 348:19]
    node _T_117 = eq(state, UInt<3>("h0")) @[AllToAllPE.scala 355:14]
    when _T_117 : @[AllToAllPE.scala 355:23]
      io.busy <= UInt<1>("h0") @[AllToAllPE.scala 356:13]
      io.cmd.ready <= UInt<1>("h1") @[AllToAllPE.scala 357:18]
      io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 358:19]
      io.resp.bits.data <= UInt<1>("h0") @[AllToAllPE.scala 359:23]
      io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 361:31]
      w_en <= UInt<1>("h0") @[AllToAllPE.scala 362:10]
      node _T_118 = bits(io.cmd.bits.rs1, 15, 0) @[AllToAllPE.scala 364:29]
      dim_N <= _T_118 @[AllToAllPE.scala 364:11]
      when load_signal : @[AllToAllPE.scala 367:22]
        state <= UInt<3>("h4") @[AllToAllPE.scala 368:13]
      else :
        when store_signal : @[AllToAllPE.scala 369:29]
          state <= UInt<3>("h5") @[AllToAllPE.scala 370:13]
        else :
          when allToAll_signal : @[AllToAllPE.scala 371:32]
            state <= UInt<3>("h1") @[AllToAllPE.scala 372:13]
          else :
            state <= UInt<3>("h0") @[AllToAllPE.scala 374:13]
    else :
      node _T_119 = eq(state, UInt<3>("h4")) @[AllToAllPE.scala 377:20]
      when _T_119 : @[AllToAllPE.scala 377:32]
        io.busy <= stall_resp @[AllToAllPE.scala 378:13]
        node _T_120 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 379:21]
        io.cmd.ready <= _T_120 @[AllToAllPE.scala 379:18]
        io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 380:19]
        io.resp.bits.data <= UInt<6>("h20") @[AllToAllPE.scala 381:23]
        resp_value <= UInt<6>("h20") @[AllToAllPE.scala 382:16]
        when is_this_PE : @[AllToAllPE.scala 384:21]
          node _T_121 = bits(memIndex, 9, 0) @[AllToAllPE.scala 385:12]
          infer mport MPORT_4 = memPE[_T_121], clock @[AllToAllPE.scala 385:12]
          MPORT_4 <= rs1 @[AllToAllPE.scala 385:23]
          io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 386:33]
          w_en <= UInt<1>("h1") @[AllToAllPE.scala 387:12]
        else :
          io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 389:33]
          w_en <= UInt<1>("h0") @[AllToAllPE.scala 390:12]
        node _T_122 = bits(io.cmd.bits.rs1, 15, 0) @[AllToAllPE.scala 393:29]
        dim_N <= _T_122 @[AllToAllPE.scala 393:11]
        node _T_123 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 396:25]
        node _T_124 = and(load_signal, _T_123) @[AllToAllPE.scala 396:22]
        when _T_124 : @[AllToAllPE.scala 396:37]
          state <= UInt<3>("h4") @[AllToAllPE.scala 397:13]
        else :
          node _T_125 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 398:32]
          node _T_126 = and(store_signal, _T_125) @[AllToAllPE.scala 398:29]
          when _T_126 : @[AllToAllPE.scala 398:44]
            state <= UInt<3>("h5") @[AllToAllPE.scala 399:13]
          else :
            node _T_127 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 400:35]
            node _T_128 = and(allToAll_signal, _T_127) @[AllToAllPE.scala 400:32]
            when _T_128 : @[AllToAllPE.scala 400:47]
              state <= UInt<3>("h1") @[AllToAllPE.scala 401:13]
            else :
              when stall_resp : @[AllToAllPE.scala 402:27]
                state <= UInt<3>("h7") @[AllToAllPE.scala 403:13]
              else :
                state <= UInt<3>("h0") @[AllToAllPE.scala 405:13]
      else :
        node _T_129 = eq(state, UInt<3>("h5")) @[AllToAllPE.scala 408:20]
        when _T_129 : @[AllToAllPE.scala 408:33]
          io.busy <= UInt<1>("h1") @[AllToAllPE.scala 410:13]
          io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 411:18]
          io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 412:19]
          io.resp.bits.data <= UInt<6>("h21") @[AllToAllPE.scala 413:23]
          when is_this_PE : @[AllToAllPE.scala 415:21]
            node _T_130 = bits(memIndex, 9, 0) @[AllToAllPE.scala 416:26]
            infer mport MPORT_5 = memPE[_T_130], clock @[AllToAllPE.scala 416:26]
            resp_value <= MPORT_5 @[AllToAllPE.scala 416:18]
            w_en <= UInt<1>("h1") @[AllToAllPE.scala 417:12]
          else :
            w_en <= UInt<1>("h0") @[AllToAllPE.scala 419:12]
          io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 422:31]
          state <= UInt<3>("h6") @[AllToAllPE.scala 424:11]
        else :
          node _T_131 = eq(state, UInt<3>("h6")) @[AllToAllPE.scala 426:20]
          when _T_131 : @[AllToAllPE.scala 426:35]
            io.busy <= stall_resp @[AllToAllPE.scala 428:13]
            node _T_132 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 429:21]
            io.cmd.ready <= _T_132 @[AllToAllPE.scala 429:18]
            io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 430:19]
            io.resp.bits.data <= resp_value @[AllToAllPE.scala 431:23]
            io.resp.bits.write_enable <= w_en @[AllToAllPE.scala 432:31]
            node _T_133 = bits(io.cmd.bits.rs1, 15, 0) @[AllToAllPE.scala 434:29]
            dim_N <= _T_133 @[AllToAllPE.scala 434:11]
            node _T_134 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 437:25]
            node _T_135 = and(load_signal, _T_134) @[AllToAllPE.scala 437:22]
            when _T_135 : @[AllToAllPE.scala 437:37]
              state <= UInt<3>("h4") @[AllToAllPE.scala 438:13]
            else :
              node _T_136 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 439:32]
              node _T_137 = and(store_signal, _T_136) @[AllToAllPE.scala 439:29]
              when _T_137 : @[AllToAllPE.scala 439:44]
                state <= UInt<3>("h5") @[AllToAllPE.scala 440:13]
              else :
                node _T_138 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 441:35]
                node _T_139 = and(allToAll_signal, _T_138) @[AllToAllPE.scala 441:32]
                when _T_139 : @[AllToAllPE.scala 441:47]
                  state <= UInt<3>("h1") @[AllToAllPE.scala 442:13]
                else :
                  when stall_resp : @[AllToAllPE.scala 443:27]
                    state <= UInt<3>("h7") @[AllToAllPE.scala 444:13]
                  else :
                    state <= UInt<3>("h0") @[AllToAllPE.scala 446:13]
          else :
            node _T_140 = eq(state, UInt<3>("h7")) @[AllToAllPE.scala 449:20]
            when _T_140 : @[AllToAllPE.scala 449:36]
              io.busy <= UInt<1>("h1") @[AllToAllPE.scala 451:13]
              io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 452:18]
              io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 453:19]
              io.resp.bits.data <= resp_value @[AllToAllPE.scala 454:23]
              io.resp.bits.write_enable <= w_en @[AllToAllPE.scala 456:31]
              when stall_resp : @[AllToAllPE.scala 458:21]
                state <= UInt<3>("h7") @[AllToAllPE.scala 459:13]
              else :
                state <= UInt<3>("h0") @[AllToAllPE.scala 461:13]
            else :
              node _T_141 = eq(state, UInt<3>("h1")) @[AllToAllPE.scala 464:20]
              when _T_141 : @[AllToAllPE.scala 464:31]
                io.busy <= UInt<1>("h1") @[AllToAllPE.scala 466:13]
                io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 467:18]
                io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 468:19]
                io.resp.bits.data <= UInt<5>("h1e") @[AllToAllPE.scala 469:23]
                io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 471:31]
                node _T_142 = mul(UInt<4>("h9"), dim_N) @[AllToAllPE.scala 473:23]
                offset <= _T_142 @[AllToAllPE.scala 473:12]
                end_push_data <= UInt<1>("h0") @[AllToAllPE.scala 476:19]
                state <= UInt<3>("h2") @[AllToAllPE.scala 478:11]
              else :
                node _T_143 = eq(state, UInt<3>("h2")) @[AllToAllPE.scala 480:20]
                when _T_143 : @[AllToAllPE.scala 480:41]
                  node _T_144 = or(left_busy, right_busy) @[AllToAllPE.scala 482:27]
                  node _T_145 = or(_T_144, up_busy) @[AllToAllPE.scala 482:41]
                  node _T_146 = or(_T_145, bottom_busy) @[AllToAllPE.scala 482:52]
                  node _T_147 = eq(end_push_data, UInt<1>("h0")) @[AllToAllPE.scala 482:70]
                  node _T_148 = or(_T_146, _T_147) @[AllToAllPE.scala 482:67]
                  io.busy <= _T_148 @[AllToAllPE.scala 482:13]
                  io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 483:18]
                  io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 484:19]
                  io.resp.bits.data <= UInt<5>("h1f") @[AllToAllPE.scala 485:23]
                  node _T_149 = mul(UInt<3>("h5"), dim_N) @[AllToAllPE.scala 487:39]
                  node _T_150 = add(_T_149, offset) @[AllToAllPE.scala 487:47]
                  node _T_151 = tail(_T_150, 1) @[AllToAllPE.scala 487:47]
                  index_write_this_PE <= _T_151 @[AllToAllPE.scala 487:25]
                  io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 489:31]
                  when io.end_AllToAll : @[AllToAllPE.scala 491:27]
                    state <= UInt<3>("h3") @[AllToAllPE.scala 492:13]
                  else :
                    state <= UInt<3>("h2") @[AllToAllPE.scala 494:13]
                else :
                  node _T_152 = eq(state, UInt<3>("h3")) @[AllToAllPE.scala 497:20]
                  when _T_152 : @[AllToAllPE.scala 497:36]
                    io.busy <= UInt<1>("h0") @[AllToAllPE.scala 499:13]
                    io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 500:18]
                    io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 501:19]
                    io.resp.bits.data <= UInt<6>("h23") @[AllToAllPE.scala 502:23]
                    io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 504:31]
                    state <= UInt<3>("h0") @[AllToAllPE.scala 507:11]
                  else :
                    io.busy <= UInt<1>("h0") @[AllToAllPE.scala 511:13]
                    io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 512:18]
                    io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 513:19]
                    io.resp.bits.data <= UInt<64>("h61") @[AllToAllPE.scala 514:23]
                    io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 515:31]
    reg stateAction : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 523:28]
    index_calculator.io.dim_N <= dim_N @[AllToAllPE.scala 525:29]
    node _T_153 = eq(stateAction, UInt<1>("h0")) @[AllToAllPE.scala 527:20]
    when _T_153 : @[AllToAllPE.scala 527:30]
      index_calculator.io.enable <= UInt<1>("h1") @[AllToAllPE.scala 529:32]
      index_calculator.io.reset <= UInt<1>("h1") @[AllToAllPE.scala 530:31]
      read_values_valid[0] <= UInt<1>("h0") @[AllToAllPE.scala 532:26]
      read_values_valid[1] <= UInt<1>("h0") @[AllToAllPE.scala 533:26]
      read_values_valid[2] <= UInt<1>("h0") @[AllToAllPE.scala 534:26]
      read_values_valid[3] <= UInt<1>("h0") @[AllToAllPE.scala 535:26]
      when start_AllToAll : @[AllToAllPE.scala 537:25]
        stateAction <= UInt<1>("h1") @[AllToAllPE.scala 538:19]
      else :
        stateAction <= UInt<1>("h0") @[AllToAllPE.scala 540:19]
    else :
      node _T_154 = eq(stateAction, UInt<1>("h1")) @[AllToAllPE.scala 542:26]
      when _T_154 : @[AllToAllPE.scala 542:38]
        index_calculator.io.reset <= UInt<1>("h0") @[AllToAllPE.scala 544:31]
        node _T_155 = eq(index_calculator.io.last_iteration, UInt<1>("h0")) @[AllToAllPE.scala 547:21]
        node _T_156 = and(do_read, _T_155) @[AllToAllPE.scala 547:18]
        when _T_156 : @[AllToAllPE.scala 547:57]
          index_calculator.io.enable <= UInt<1>("h1") @[AllToAllPE.scala 549:34]
          node _T_157 = bits(index_calculator.io.index0, 9, 0) @[AllToAllPE.scala 551:30]
          infer mport MPORT_6 = memPE[_T_157], clock @[AllToAllPE.scala 551:30]
          read_values[0] <= MPORT_6 @[AllToAllPE.scala 551:22]
          node _T_158 = bits(index_calculator.io.index1, 9, 0) @[AllToAllPE.scala 552:30]
          infer mport MPORT_7 = memPE[_T_158], clock @[AllToAllPE.scala 552:30]
          read_values[1] <= MPORT_7 @[AllToAllPE.scala 552:22]
          node _T_159 = bits(index_calculator.io.index2, 9, 0) @[AllToAllPE.scala 553:30]
          infer mport MPORT_8 = memPE[_T_159], clock @[AllToAllPE.scala 553:30]
          read_values[2] <= MPORT_8 @[AllToAllPE.scala 553:22]
          node _T_160 = bits(index_calculator.io.index3, 9, 0) @[AllToAllPE.scala 554:30]
          infer mport MPORT_9 = memPE[_T_160], clock @[AllToAllPE.scala 554:30]
          read_values[3] <= MPORT_9 @[AllToAllPE.scala 554:22]
          read_values_valid[0] <= index_calculator.io.valid0 @[AllToAllPE.scala 556:28]
          read_values_valid[1] <= index_calculator.io.valid1 @[AllToAllPE.scala 557:28]
          read_values_valid[2] <= index_calculator.io.valid2 @[AllToAllPE.scala 558:28]
          read_values_valid[3] <= index_calculator.io.valid3 @[AllToAllPE.scala 559:28]
          read_x_dest[0] <= index_calculator.io.x_dest_0 @[AllToAllPE.scala 561:22]
          read_x_dest[1] <= index_calculator.io.x_dest_1 @[AllToAllPE.scala 562:22]
          read_x_dest[2] <= index_calculator.io.x_dest_2 @[AllToAllPE.scala 563:22]
          read_x_dest[3] <= index_calculator.io.x_dest_3 @[AllToAllPE.scala 564:22]
          read_y_dest[0] <= index_calculator.io.y_dest_0 @[AllToAllPE.scala 566:22]
          read_y_dest[1] <= index_calculator.io.y_dest_1 @[AllToAllPE.scala 567:22]
          read_y_dest[2] <= index_calculator.io.y_dest_2 @[AllToAllPE.scala 568:22]
          read_y_dest[3] <= index_calculator.io.y_dest_3 @[AllToAllPE.scala 569:22]
          read_pos[0] <= index_calculator.io.pos_0 @[AllToAllPE.scala 571:19]
          read_pos[1] <= index_calculator.io.pos_1 @[AllToAllPE.scala 572:19]
          read_pos[2] <= index_calculator.io.pos_2 @[AllToAllPE.scala 573:19]
          read_pos[3] <= index_calculator.io.pos_3 @[AllToAllPE.scala 574:19]
        else :
          index_calculator.io.enable <= UInt<1>("h0") @[AllToAllPE.scala 578:34]
          node _T_161 = eq(left_mux.io.out_val.selected, UInt<1>("h1")) @[AllToAllPE.scala 585:64]
          node _T_162 = and(_T_161, left_out_arbiter.io.in[0].ready) @[AllToAllPE.scala 585:79]
          node _T_163 = eq(right_mux.io.out_val.selected, UInt<1>("h1")) @[AllToAllPE.scala 586:65]
          node _T_164 = and(_T_163, right_out_arbiter.io.in[0].ready) @[AllToAllPE.scala 586:80]
          node _T_165 = or(_T_162, _T_164) @[AllToAllPE.scala 585:93]
          node _T_166 = eq(up_mux.io.out_val.selected, UInt<1>("h1")) @[AllToAllPE.scala 587:62]
          node _T_167 = and(_T_166, up_out_arbiter.io.in[0].ready) @[AllToAllPE.scala 587:77]
          node _T_168 = or(_T_165, _T_167) @[AllToAllPE.scala 586:95]
          node _T_169 = eq(bottom_mux.io.out_val.selected, UInt<1>("h1")) @[AllToAllPE.scala 588:66]
          node _T_170 = and(_T_169, bottom_out_arbiter.io.in[0].ready) @[AllToAllPE.scala 588:81]
          node _T_171 = or(_T_168, _T_170) @[AllToAllPE.scala 587:89]
          node _T_172 = or(_T_171, this_PE_generation_0) @[AllToAllPE.scala 588:97]
          node _T_173 = eq(_T_172, UInt<1>("h0")) @[AllToAllPE.scala 585:31]
          node _T_174 = and(_T_173, read_values_valid[0]) @[AllToAllPE.scala 589:56]
          read_values_valid[0] <= _T_174 @[AllToAllPE.scala 585:28]
          node _T_175 = eq(left_mux.io.out_val.selected, UInt<2>("h2")) @[AllToAllPE.scala 591:64]
          node _T_176 = and(_T_175, left_out_arbiter.io.in[0].ready) @[AllToAllPE.scala 591:79]
          node _T_177 = eq(right_mux.io.out_val.selected, UInt<2>("h2")) @[AllToAllPE.scala 592:65]
          node _T_178 = and(_T_177, right_out_arbiter.io.in[0].ready) @[AllToAllPE.scala 592:80]
          node _T_179 = or(_T_176, _T_178) @[AllToAllPE.scala 591:93]
          node _T_180 = eq(up_mux.io.out_val.selected, UInt<2>("h2")) @[AllToAllPE.scala 593:62]
          node _T_181 = and(_T_180, up_out_arbiter.io.in[0].ready) @[AllToAllPE.scala 593:77]
          node _T_182 = or(_T_179, _T_181) @[AllToAllPE.scala 592:95]
          node _T_183 = eq(bottom_mux.io.out_val.selected, UInt<2>("h2")) @[AllToAllPE.scala 594:66]
          node _T_184 = and(_T_183, bottom_out_arbiter.io.in[0].ready) @[AllToAllPE.scala 594:81]
          node _T_185 = or(_T_182, _T_184) @[AllToAllPE.scala 593:89]
          node _T_186 = or(_T_185, this_PE_generation_1) @[AllToAllPE.scala 594:97]
          node _T_187 = eq(_T_186, UInt<1>("h0")) @[AllToAllPE.scala 591:31]
          node _T_188 = and(_T_187, read_values_valid[1]) @[AllToAllPE.scala 595:56]
          read_values_valid[1] <= _T_188 @[AllToAllPE.scala 591:28]
          node _T_189 = eq(left_mux.io.out_val.selected, UInt<3>("h4")) @[AllToAllPE.scala 597:64]
          node _T_190 = and(_T_189, left_out_arbiter.io.in[0].ready) @[AllToAllPE.scala 597:79]
          node _T_191 = eq(right_mux.io.out_val.selected, UInt<3>("h4")) @[AllToAllPE.scala 598:65]
          node _T_192 = and(_T_191, right_out_arbiter.io.in[0].ready) @[AllToAllPE.scala 598:80]
          node _T_193 = or(_T_190, _T_192) @[AllToAllPE.scala 597:93]
          node _T_194 = eq(up_mux.io.out_val.selected, UInt<3>("h4")) @[AllToAllPE.scala 599:62]
          node _T_195 = and(_T_194, up_out_arbiter.io.in[0].ready) @[AllToAllPE.scala 599:77]
          node _T_196 = or(_T_193, _T_195) @[AllToAllPE.scala 598:95]
          node _T_197 = eq(bottom_mux.io.out_val.selected, UInt<3>("h4")) @[AllToAllPE.scala 600:66]
          node _T_198 = and(_T_197, bottom_out_arbiter.io.in[0].ready) @[AllToAllPE.scala 600:81]
          node _T_199 = or(_T_196, _T_198) @[AllToAllPE.scala 599:89]
          node _T_200 = or(_T_199, this_PE_generation_2) @[AllToAllPE.scala 600:97]
          node _T_201 = eq(_T_200, UInt<1>("h0")) @[AllToAllPE.scala 597:31]
          node _T_202 = and(_T_201, read_values_valid[2]) @[AllToAllPE.scala 601:56]
          read_values_valid[2] <= _T_202 @[AllToAllPE.scala 597:28]
          node _T_203 = eq(left_mux.io.out_val.selected, UInt<4>("h8")) @[AllToAllPE.scala 603:64]
          node _T_204 = and(_T_203, left_out_arbiter.io.in[0].ready) @[AllToAllPE.scala 603:79]
          node _T_205 = eq(right_mux.io.out_val.selected, UInt<4>("h8")) @[AllToAllPE.scala 604:65]
          node _T_206 = and(_T_205, right_out_arbiter.io.in[0].ready) @[AllToAllPE.scala 604:80]
          node _T_207 = or(_T_204, _T_206) @[AllToAllPE.scala 603:93]
          node _T_208 = eq(up_mux.io.out_val.selected, UInt<4>("h8")) @[AllToAllPE.scala 605:62]
          node _T_209 = and(_T_208, up_out_arbiter.io.in[0].ready) @[AllToAllPE.scala 605:77]
          node _T_210 = or(_T_207, _T_209) @[AllToAllPE.scala 604:95]
          node _T_211 = eq(bottom_mux.io.out_val.selected, UInt<4>("h8")) @[AllToAllPE.scala 606:66]
          node _T_212 = and(_T_211, bottom_out_arbiter.io.in[0].ready) @[AllToAllPE.scala 606:81]
          node _T_213 = or(_T_210, _T_212) @[AllToAllPE.scala 605:89]
          node _T_214 = or(_T_213, this_PE_generation_3) @[AllToAllPE.scala 606:97]
          node _T_215 = eq(_T_214, UInt<1>("h0")) @[AllToAllPE.scala 603:31]
          node _T_216 = and(_T_215, read_values_valid[3]) @[AllToAllPE.scala 607:56]
          read_values_valid[3] <= _T_216 @[AllToAllPE.scala 603:28]
          node _T_217 = and(this_PE_generation_0, read_values_valid[0]) @[AllToAllPE.scala 610:33]
          when _T_217 : @[AllToAllPE.scala 610:57]
            node _T_218 = add(index_write_this_PE, read_pos[0]) @[AllToAllPE.scala 611:35]
            node _T_219 = tail(_T_218, 1) @[AllToAllPE.scala 611:35]
            node _T_220 = bits(_T_219, 9, 0) @[AllToAllPE.scala 611:14]
            infer mport MPORT_10 = memPE[_T_220], clock @[AllToAllPE.scala 611:14]
            MPORT_10 <= read_values[0] @[AllToAllPE.scala 611:50]
          node _T_221 = and(this_PE_generation_1, read_values_valid[1]) @[AllToAllPE.scala 613:33]
          when _T_221 : @[AllToAllPE.scala 613:57]
            node _T_222 = add(index_write_this_PE, read_pos[1]) @[AllToAllPE.scala 614:35]
            node _T_223 = tail(_T_222, 1) @[AllToAllPE.scala 614:35]
            node _T_224 = bits(_T_223, 9, 0) @[AllToAllPE.scala 614:14]
            infer mport MPORT_11 = memPE[_T_224], clock @[AllToAllPE.scala 614:14]
            MPORT_11 <= read_values[1] @[AllToAllPE.scala 614:50]
          node _T_225 = and(this_PE_generation_2, read_values_valid[2]) @[AllToAllPE.scala 616:33]
          when _T_225 : @[AllToAllPE.scala 616:57]
            node _T_226 = add(index_write_this_PE, read_pos[2]) @[AllToAllPE.scala 617:35]
            node _T_227 = tail(_T_226, 1) @[AllToAllPE.scala 617:35]
            node _T_228 = bits(_T_227, 9, 0) @[AllToAllPE.scala 617:14]
            infer mport MPORT_12 = memPE[_T_228], clock @[AllToAllPE.scala 617:14]
            MPORT_12 <= read_values[2] @[AllToAllPE.scala 617:50]
          node _T_229 = and(this_PE_generation_3, read_values_valid[3]) @[AllToAllPE.scala 619:33]
          when _T_229 : @[AllToAllPE.scala 619:57]
            node _T_230 = add(index_write_this_PE, read_pos[3]) @[AllToAllPE.scala 620:35]
            node _T_231 = tail(_T_230, 1) @[AllToAllPE.scala 620:35]
            node _T_232 = bits(_T_231, 9, 0) @[AllToAllPE.scala 620:14]
            infer mport MPORT_13 = memPE[_T_232], clock @[AllToAllPE.scala 620:14]
            MPORT_13 <= read_values[3] @[AllToAllPE.scala 620:50]
        node _T_233 = and(index_calculator.io.last_iteration, do_read) @[AllToAllPE.scala 626:45]
        when _T_233 : @[AllToAllPE.scala 626:56]
          end_push_data <= UInt<1>("h1") @[AllToAllPE.scala 627:21]
          stateAction <= UInt<1>("h0") @[AllToAllPE.scala 628:19]
        else :
          stateAction <= UInt<1>("h1") @[AllToAllPE.scala 630:19]
      else :
        index_calculator.io.enable <= UInt<1>("h1") @[AllToAllPE.scala 635:32]
        index_calculator.io.reset <= UInt<1>("h1") @[AllToAllPE.scala 636:31]

