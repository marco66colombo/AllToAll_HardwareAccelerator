circuit AllToAllPE :
  module IndexCalculator :
    input clock : Clock
    input reset : Reset
    output io : { flip reset : UInt<1>, flip enable : UInt<1>, last_index : UInt<1>, index : UInt<5>}

    reg counter : UInt<5>, clock with :
      reset => (UInt<1>("h0"), counter) @[IndexCalculator.scala 26:22]
    when io.enable : @[IndexCalculator.scala 28:22]
      node _T = add(counter, UInt<1>("h1")) @[IndexCalculator.scala 30:47]
      node _T_1 = tail(_T, 1) @[IndexCalculator.scala 30:47]
      node _T_2 = mux(io.reset, UInt<1>("h0"), _T_1) @[IndexCalculator.scala 30:23]
      counter <= _T_2 @[IndexCalculator.scala 30:17]
    io.index <= counter @[IndexCalculator.scala 33:14]
    node _T_3 = eq(counter, UInt<2>("h3")) @[IndexCalculator.scala 36:30]
    io.last_index <= _T_3 @[IndexCalculator.scala 36:19]

  module Queue :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Dispatcher :
    input clock : Clock
    input reset : Reset
    output io : { flip x_PE : UInt<2>, flip y_PE : UInt<2>, flip x_0 : UInt<2>, flip y_0 : UInt<2>, flip x_dest : UInt<2>, flip y_dest : UInt<2>, left : UInt<1>, right : UInt<1>, up : UInt<1>, bottom : UInt<1>, this_PE : UInt<1>}

    wire out_selector : UInt<4> @[Dispatcher.scala 34:28]
    node _T = eq(out_selector, UInt<1>("h1")) @[Dispatcher.scala 36:29]
    node _T_1 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 36:46]
    node _T_2 = and(_T, _T_1) @[Dispatcher.scala 36:43]
    io.left <= _T_2 @[Dispatcher.scala 36:13]
    node _T_3 = eq(out_selector, UInt<2>("h2")) @[Dispatcher.scala 37:30]
    node _T_4 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 37:47]
    node _T_5 = and(_T_3, _T_4) @[Dispatcher.scala 37:44]
    io.right <= _T_5 @[Dispatcher.scala 37:14]
    node _T_6 = eq(out_selector, UInt<3>("h4")) @[Dispatcher.scala 38:27]
    node _T_7 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 38:44]
    node _T_8 = and(_T_6, _T_7) @[Dispatcher.scala 38:41]
    io.up <= _T_8 @[Dispatcher.scala 38:11]
    node _T_9 = eq(out_selector, UInt<4>("h8")) @[Dispatcher.scala 39:31]
    node _T_10 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 39:48]
    node _T_11 = and(_T_9, _T_10) @[Dispatcher.scala 39:45]
    io.bottom <= _T_11 @[Dispatcher.scala 39:15]
    node _T_12 = eq(io.x_dest, io.x_PE) @[Dispatcher.scala 44:20]
    node _T_13 = eq(io.y_dest, io.y_PE) @[Dispatcher.scala 44:45]
    node _T_14 = and(_T_12, _T_13) @[Dispatcher.scala 44:32]
    when _T_14 : @[Dispatcher.scala 44:57]
      io.this_PE <= UInt<1>("h1") @[Dispatcher.scala 45:20]
      out_selector <= UInt<1>("h0") @[Dispatcher.scala 46:22]
    else :
      io.this_PE <= UInt<1>("h0") @[Dispatcher.scala 48:20]
      out_selector <= UInt<1>("h0") @[Dispatcher.scala 49:22]
    node _T_15 = cvt(io.x_PE) @[Dispatcher.scala 52:31]
    node _T_16 = cvt(io.x_0) @[Dispatcher.scala 52:45]
    node _T_17 = sub(_T_15, _T_16) @[Dispatcher.scala 52:36]
    node _T_18 = tail(_T_17, 1) @[Dispatcher.scala 52:36]
    node x_PE_transl = asSInt(_T_18) @[Dispatcher.scala 52:36]
    node _T_19 = cvt(io.y_PE) @[Dispatcher.scala 53:31]
    node _T_20 = cvt(io.y_0) @[Dispatcher.scala 53:45]
    node _T_21 = sub(_T_19, _T_20) @[Dispatcher.scala 53:36]
    node _T_22 = tail(_T_21, 1) @[Dispatcher.scala 53:36]
    node y_PE_transl = asSInt(_T_22) @[Dispatcher.scala 53:36]
    node _T_23 = bits(x_PE_transl, 0, 0) @[Dispatcher.scala 54:38]
    node x_PE_transl_odd = eq(_T_23, UInt<1>("h1")) @[Dispatcher.scala 54:42]
    node _T_24 = bits(y_PE_transl, 0, 0) @[Dispatcher.scala 55:38]
    node y_PE_transl_odd = eq(_T_24, UInt<1>("h1")) @[Dispatcher.scala 55:42]
    node _T_25 = cvt(io.x_dest) @[Dispatcher.scala 56:35]
    node _T_26 = cvt(io.x_0) @[Dispatcher.scala 56:49]
    node _T_27 = sub(_T_25, _T_26) @[Dispatcher.scala 56:40]
    node _T_28 = tail(_T_27, 1) @[Dispatcher.scala 56:40]
    node x_dest_transl = asSInt(_T_28) @[Dispatcher.scala 56:40]
    node _T_29 = cvt(io.y_dest) @[Dispatcher.scala 57:35]
    node _T_30 = cvt(io.y_0) @[Dispatcher.scala 57:49]
    node _T_31 = sub(_T_29, _T_30) @[Dispatcher.scala 57:40]
    node _T_32 = tail(_T_31, 1) @[Dispatcher.scala 57:40]
    node y_dest_transl = asSInt(_T_32) @[Dispatcher.scala 57:40]
    node _T_33 = gt(io.x_PE, io.x_0) @[Dispatcher.scala 60:18]
    node _T_34 = eq(io.y_PE, io.y_0) @[Dispatcher.scala 60:38]
    node _T_35 = and(_T_33, _T_34) @[Dispatcher.scala 60:27]
    when _T_35 : @[Dispatcher.scala 60:49]
      when x_PE_transl_odd : @[Dispatcher.scala 62:30]
        node _T_36 = add(y_dest_transl, x_PE_transl) @[Dispatcher.scala 63:49]
        node _T_37 = tail(_T_36, 1) @[Dispatcher.scala 63:49]
        node _T_38 = asSInt(_T_37) @[Dispatcher.scala 63:49]
        node _T_39 = leq(x_dest_transl, _T_38) @[Dispatcher.scala 63:32]
        when _T_39 : @[Dispatcher.scala 63:63]
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 65:30]
        else :
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 68:30]
      else :
        node _T_40 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 71:35]
        node _T_41 = tail(_T_40, 1) @[Dispatcher.scala 71:35]
        node _T_42 = asSInt(_T_41) @[Dispatcher.scala 71:35]
        node _T_43 = add(_T_42, x_PE_transl) @[Dispatcher.scala 71:50]
        node _T_44 = tail(_T_43, 1) @[Dispatcher.scala 71:50]
        node _T_45 = asSInt(_T_44) @[Dispatcher.scala 71:50]
        node _T_46 = leq(x_dest_transl, _T_45) @[Dispatcher.scala 71:32]
        when _T_46 : @[Dispatcher.scala 71:64]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 73:30]
        else :
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 76:30]
    node _T_47 = eq(io.x_PE, io.x_0) @[Dispatcher.scala 82:18]
    node _T_48 = gt(io.y_PE, io.y_0) @[Dispatcher.scala 82:40]
    node _T_49 = and(_T_47, _T_48) @[Dispatcher.scala 82:29]
    when _T_49 : @[Dispatcher.scala 82:49]
      when y_PE_transl_odd : @[Dispatcher.scala 84:30]
        node _T_50 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 85:35]
        node _T_51 = tail(_T_50, 1) @[Dispatcher.scala 85:35]
        node _T_52 = asSInt(_T_51) @[Dispatcher.scala 85:35]
        node _T_53 = add(_T_52, y_PE_transl) @[Dispatcher.scala 85:50]
        node _T_54 = tail(_T_53, 1) @[Dispatcher.scala 85:50]
        node _T_55 = asSInt(_T_54) @[Dispatcher.scala 85:50]
        node _T_56 = leq(x_dest_transl, _T_55) @[Dispatcher.scala 85:32]
        when _T_56 : @[Dispatcher.scala 85:64]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 87:30]
        else :
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 90:30]
      else :
        node _T_57 = sub(y_dest_transl, y_PE_transl) @[Dispatcher.scala 93:49]
        node _T_58 = tail(_T_57, 1) @[Dispatcher.scala 93:49]
        node _T_59 = asSInt(_T_58) @[Dispatcher.scala 93:49]
        node _T_60 = geq(x_dest_transl, _T_59) @[Dispatcher.scala 93:32]
        when _T_60 : @[Dispatcher.scala 93:63]
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 95:30]
        else :
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 98:30]
    node _T_61 = lt(io.x_PE, io.x_0) @[Dispatcher.scala 104:18]
    node _T_62 = eq(io.y_PE, io.y_0) @[Dispatcher.scala 104:38]
    node _T_63 = and(_T_61, _T_62) @[Dispatcher.scala 104:27]
    when _T_63 : @[Dispatcher.scala 104:49]
      when x_PE_transl_odd : @[Dispatcher.scala 106:30]
        node _T_64 = add(y_dest_transl, x_PE_transl) @[Dispatcher.scala 107:49]
        node _T_65 = tail(_T_64, 1) @[Dispatcher.scala 107:49]
        node _T_66 = asSInt(_T_65) @[Dispatcher.scala 107:49]
        node _T_67 = geq(x_dest_transl, _T_66) @[Dispatcher.scala 107:32]
        when _T_67 : @[Dispatcher.scala 107:63]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 109:30]
        else :
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 112:30]
      else :
        node _T_68 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 115:35]
        node _T_69 = tail(_T_68, 1) @[Dispatcher.scala 115:35]
        node _T_70 = asSInt(_T_69) @[Dispatcher.scala 115:35]
        node _T_71 = add(_T_70, x_PE_transl) @[Dispatcher.scala 115:50]
        node _T_72 = tail(_T_71, 1) @[Dispatcher.scala 115:50]
        node _T_73 = asSInt(_T_72) @[Dispatcher.scala 115:50]
        node _T_74 = geq(x_dest_transl, _T_73) @[Dispatcher.scala 115:32]
        when _T_74 : @[Dispatcher.scala 115:64]
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 117:30]
        else :
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 120:30]
    node _T_75 = eq(io.x_PE, io.x_0) @[Dispatcher.scala 126:18]
    node _T_76 = lt(io.y_PE, io.y_0) @[Dispatcher.scala 126:40]
    node _T_77 = and(_T_75, _T_76) @[Dispatcher.scala 126:29]
    when _T_77 : @[Dispatcher.scala 126:49]
      when y_PE_transl_odd : @[Dispatcher.scala 128:30]
        node _T_78 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 129:35]
        node _T_79 = tail(_T_78, 1) @[Dispatcher.scala 129:35]
        node _T_80 = asSInt(_T_79) @[Dispatcher.scala 129:35]
        node _T_81 = add(_T_80, y_PE_transl) @[Dispatcher.scala 129:50]
        node _T_82 = tail(_T_81, 1) @[Dispatcher.scala 129:50]
        node _T_83 = asSInt(_T_82) @[Dispatcher.scala 129:50]
        node _T_84 = geq(x_dest_transl, _T_83) @[Dispatcher.scala 129:32]
        when _T_84 : @[Dispatcher.scala 129:64]
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 131:30]
        else :
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 134:30]
      else :
        node _T_85 = sub(y_dest_transl, y_PE_transl) @[Dispatcher.scala 137:49]
        node _T_86 = tail(_T_85, 1) @[Dispatcher.scala 137:49]
        node _T_87 = asSInt(_T_86) @[Dispatcher.scala 137:49]
        node _T_88 = leq(x_dest_transl, _T_87) @[Dispatcher.scala 137:32]
        when _T_88 : @[Dispatcher.scala 137:63]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 139:30]
        else :
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 142:30]
    node _T_89 = head(x_PE_transl, 1) @[Dispatcher.scala 148:40]
    node sign_delta_x = bits(_T_89, 0, 0) @[Dispatcher.scala 148:44]
    node _T_90 = head(y_PE_transl, 1) @[Dispatcher.scala 149:40]
    node sign_delta_y = bits(_T_90, 0, 0) @[Dispatcher.scala 149:44]
    node _T_91 = xor(sign_delta_x, sign_delta_y) @[Dispatcher.scala 151:36]
    node uFactor_x = eq(_T_91, UInt<1>("h0")) @[Dispatcher.scala 151:21]
    node _T_92 = xor(x_PE_transl_odd, y_PE_transl_odd) @[Dispatcher.scala 152:39]
    node oddResult_x = xor(_T_92, uFactor_x) @[Dispatcher.scala 152:57]
    node uFactor_y = xor(sign_delta_x, sign_delta_y) @[Dispatcher.scala 154:34]
    node _T_93 = xor(x_PE_transl_odd, y_PE_transl_odd) @[Dispatcher.scala 155:39]
    node oddResult_y = xor(_T_93, uFactor_y) @[Dispatcher.scala 155:57]
    node _T_94 = neq(io.x_PE, io.x_0) @[Dispatcher.scala 158:18]
    node _T_95 = neq(io.y_PE, io.y_0) @[Dispatcher.scala 158:39]
    node _T_96 = and(_T_94, _T_95) @[Dispatcher.scala 158:28]
    when _T_96 : @[Dispatcher.scala 158:49]
      node _T_97 = eq(sign_delta_x, UInt<1>("h0")) @[Dispatcher.scala 160:29]
      node _T_98 = and(oddResult_x, _T_97) @[Dispatcher.scala 160:26]
      when _T_98 : @[Dispatcher.scala 160:43]
        out_selector <= UInt<2>("h2") @[Dispatcher.scala 162:26]
      else :
        node _T_99 = and(oddResult_x, sign_delta_x) @[Dispatcher.scala 164:32]
        when _T_99 : @[Dispatcher.scala 164:48]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 166:26]
      node _T_100 = eq(sign_delta_y, UInt<1>("h0")) @[Dispatcher.scala 169:29]
      node _T_101 = and(oddResult_y, _T_100) @[Dispatcher.scala 169:26]
      when _T_101 : @[Dispatcher.scala 169:43]
        out_selector <= UInt<3>("h4") @[Dispatcher.scala 171:26]
      else :
        node _T_102 = and(oddResult_y, sign_delta_y) @[Dispatcher.scala 173:32]
        when _T_102 : @[Dispatcher.scala 173:48]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 175:26]

  module Dispatcher_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip x_PE : UInt<2>, flip y_PE : UInt<2>, flip x_0 : UInt<2>, flip y_0 : UInt<2>, flip x_dest : UInt<2>, flip y_dest : UInt<2>, left : UInt<1>, right : UInt<1>, up : UInt<1>, bottom : UInt<1>, this_PE : UInt<1>}

    wire out_selector : UInt<4> @[Dispatcher.scala 34:28]
    node _T = eq(out_selector, UInt<1>("h1")) @[Dispatcher.scala 36:29]
    node _T_1 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 36:46]
    node _T_2 = and(_T, _T_1) @[Dispatcher.scala 36:43]
    io.left <= _T_2 @[Dispatcher.scala 36:13]
    node _T_3 = eq(out_selector, UInt<2>("h2")) @[Dispatcher.scala 37:30]
    node _T_4 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 37:47]
    node _T_5 = and(_T_3, _T_4) @[Dispatcher.scala 37:44]
    io.right <= _T_5 @[Dispatcher.scala 37:14]
    node _T_6 = eq(out_selector, UInt<3>("h4")) @[Dispatcher.scala 38:27]
    node _T_7 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 38:44]
    node _T_8 = and(_T_6, _T_7) @[Dispatcher.scala 38:41]
    io.up <= _T_8 @[Dispatcher.scala 38:11]
    node _T_9 = eq(out_selector, UInt<4>("h8")) @[Dispatcher.scala 39:31]
    node _T_10 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 39:48]
    node _T_11 = and(_T_9, _T_10) @[Dispatcher.scala 39:45]
    io.bottom <= _T_11 @[Dispatcher.scala 39:15]
    node _T_12 = eq(io.x_dest, io.x_PE) @[Dispatcher.scala 44:20]
    node _T_13 = eq(io.y_dest, io.y_PE) @[Dispatcher.scala 44:45]
    node _T_14 = and(_T_12, _T_13) @[Dispatcher.scala 44:32]
    when _T_14 : @[Dispatcher.scala 44:57]
      io.this_PE <= UInt<1>("h1") @[Dispatcher.scala 45:20]
      out_selector <= UInt<1>("h0") @[Dispatcher.scala 46:22]
    else :
      io.this_PE <= UInt<1>("h0") @[Dispatcher.scala 48:20]
      out_selector <= UInt<1>("h0") @[Dispatcher.scala 49:22]
    node _T_15 = cvt(io.x_PE) @[Dispatcher.scala 52:31]
    node _T_16 = cvt(io.x_0) @[Dispatcher.scala 52:45]
    node _T_17 = sub(_T_15, _T_16) @[Dispatcher.scala 52:36]
    node _T_18 = tail(_T_17, 1) @[Dispatcher.scala 52:36]
    node x_PE_transl = asSInt(_T_18) @[Dispatcher.scala 52:36]
    node _T_19 = cvt(io.y_PE) @[Dispatcher.scala 53:31]
    node _T_20 = cvt(io.y_0) @[Dispatcher.scala 53:45]
    node _T_21 = sub(_T_19, _T_20) @[Dispatcher.scala 53:36]
    node _T_22 = tail(_T_21, 1) @[Dispatcher.scala 53:36]
    node y_PE_transl = asSInt(_T_22) @[Dispatcher.scala 53:36]
    node _T_23 = bits(x_PE_transl, 0, 0) @[Dispatcher.scala 54:38]
    node x_PE_transl_odd = eq(_T_23, UInt<1>("h1")) @[Dispatcher.scala 54:42]
    node _T_24 = bits(y_PE_transl, 0, 0) @[Dispatcher.scala 55:38]
    node y_PE_transl_odd = eq(_T_24, UInt<1>("h1")) @[Dispatcher.scala 55:42]
    node _T_25 = cvt(io.x_dest) @[Dispatcher.scala 56:35]
    node _T_26 = cvt(io.x_0) @[Dispatcher.scala 56:49]
    node _T_27 = sub(_T_25, _T_26) @[Dispatcher.scala 56:40]
    node _T_28 = tail(_T_27, 1) @[Dispatcher.scala 56:40]
    node x_dest_transl = asSInt(_T_28) @[Dispatcher.scala 56:40]
    node _T_29 = cvt(io.y_dest) @[Dispatcher.scala 57:35]
    node _T_30 = cvt(io.y_0) @[Dispatcher.scala 57:49]
    node _T_31 = sub(_T_29, _T_30) @[Dispatcher.scala 57:40]
    node _T_32 = tail(_T_31, 1) @[Dispatcher.scala 57:40]
    node y_dest_transl = asSInt(_T_32) @[Dispatcher.scala 57:40]
    node _T_33 = gt(io.x_PE, io.x_0) @[Dispatcher.scala 60:18]
    node _T_34 = eq(io.y_PE, io.y_0) @[Dispatcher.scala 60:38]
    node _T_35 = and(_T_33, _T_34) @[Dispatcher.scala 60:27]
    when _T_35 : @[Dispatcher.scala 60:49]
      when x_PE_transl_odd : @[Dispatcher.scala 62:30]
        node _T_36 = add(y_dest_transl, x_PE_transl) @[Dispatcher.scala 63:49]
        node _T_37 = tail(_T_36, 1) @[Dispatcher.scala 63:49]
        node _T_38 = asSInt(_T_37) @[Dispatcher.scala 63:49]
        node _T_39 = leq(x_dest_transl, _T_38) @[Dispatcher.scala 63:32]
        when _T_39 : @[Dispatcher.scala 63:63]
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 65:30]
        else :
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 68:30]
      else :
        node _T_40 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 71:35]
        node _T_41 = tail(_T_40, 1) @[Dispatcher.scala 71:35]
        node _T_42 = asSInt(_T_41) @[Dispatcher.scala 71:35]
        node _T_43 = add(_T_42, x_PE_transl) @[Dispatcher.scala 71:50]
        node _T_44 = tail(_T_43, 1) @[Dispatcher.scala 71:50]
        node _T_45 = asSInt(_T_44) @[Dispatcher.scala 71:50]
        node _T_46 = leq(x_dest_transl, _T_45) @[Dispatcher.scala 71:32]
        when _T_46 : @[Dispatcher.scala 71:64]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 73:30]
        else :
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 76:30]
    node _T_47 = eq(io.x_PE, io.x_0) @[Dispatcher.scala 82:18]
    node _T_48 = gt(io.y_PE, io.y_0) @[Dispatcher.scala 82:40]
    node _T_49 = and(_T_47, _T_48) @[Dispatcher.scala 82:29]
    when _T_49 : @[Dispatcher.scala 82:49]
      when y_PE_transl_odd : @[Dispatcher.scala 84:30]
        node _T_50 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 85:35]
        node _T_51 = tail(_T_50, 1) @[Dispatcher.scala 85:35]
        node _T_52 = asSInt(_T_51) @[Dispatcher.scala 85:35]
        node _T_53 = add(_T_52, y_PE_transl) @[Dispatcher.scala 85:50]
        node _T_54 = tail(_T_53, 1) @[Dispatcher.scala 85:50]
        node _T_55 = asSInt(_T_54) @[Dispatcher.scala 85:50]
        node _T_56 = leq(x_dest_transl, _T_55) @[Dispatcher.scala 85:32]
        when _T_56 : @[Dispatcher.scala 85:64]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 87:30]
        else :
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 90:30]
      else :
        node _T_57 = sub(y_dest_transl, y_PE_transl) @[Dispatcher.scala 93:49]
        node _T_58 = tail(_T_57, 1) @[Dispatcher.scala 93:49]
        node _T_59 = asSInt(_T_58) @[Dispatcher.scala 93:49]
        node _T_60 = geq(x_dest_transl, _T_59) @[Dispatcher.scala 93:32]
        when _T_60 : @[Dispatcher.scala 93:63]
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 95:30]
        else :
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 98:30]
    node _T_61 = lt(io.x_PE, io.x_0) @[Dispatcher.scala 104:18]
    node _T_62 = eq(io.y_PE, io.y_0) @[Dispatcher.scala 104:38]
    node _T_63 = and(_T_61, _T_62) @[Dispatcher.scala 104:27]
    when _T_63 : @[Dispatcher.scala 104:49]
      when x_PE_transl_odd : @[Dispatcher.scala 106:30]
        node _T_64 = add(y_dest_transl, x_PE_transl) @[Dispatcher.scala 107:49]
        node _T_65 = tail(_T_64, 1) @[Dispatcher.scala 107:49]
        node _T_66 = asSInt(_T_65) @[Dispatcher.scala 107:49]
        node _T_67 = geq(x_dest_transl, _T_66) @[Dispatcher.scala 107:32]
        when _T_67 : @[Dispatcher.scala 107:63]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 109:30]
        else :
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 112:30]
      else :
        node _T_68 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 115:35]
        node _T_69 = tail(_T_68, 1) @[Dispatcher.scala 115:35]
        node _T_70 = asSInt(_T_69) @[Dispatcher.scala 115:35]
        node _T_71 = add(_T_70, x_PE_transl) @[Dispatcher.scala 115:50]
        node _T_72 = tail(_T_71, 1) @[Dispatcher.scala 115:50]
        node _T_73 = asSInt(_T_72) @[Dispatcher.scala 115:50]
        node _T_74 = geq(x_dest_transl, _T_73) @[Dispatcher.scala 115:32]
        when _T_74 : @[Dispatcher.scala 115:64]
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 117:30]
        else :
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 120:30]
    node _T_75 = eq(io.x_PE, io.x_0) @[Dispatcher.scala 126:18]
    node _T_76 = lt(io.y_PE, io.y_0) @[Dispatcher.scala 126:40]
    node _T_77 = and(_T_75, _T_76) @[Dispatcher.scala 126:29]
    when _T_77 : @[Dispatcher.scala 126:49]
      when y_PE_transl_odd : @[Dispatcher.scala 128:30]
        node _T_78 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 129:35]
        node _T_79 = tail(_T_78, 1) @[Dispatcher.scala 129:35]
        node _T_80 = asSInt(_T_79) @[Dispatcher.scala 129:35]
        node _T_81 = add(_T_80, y_PE_transl) @[Dispatcher.scala 129:50]
        node _T_82 = tail(_T_81, 1) @[Dispatcher.scala 129:50]
        node _T_83 = asSInt(_T_82) @[Dispatcher.scala 129:50]
        node _T_84 = geq(x_dest_transl, _T_83) @[Dispatcher.scala 129:32]
        when _T_84 : @[Dispatcher.scala 129:64]
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 131:30]
        else :
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 134:30]
      else :
        node _T_85 = sub(y_dest_transl, y_PE_transl) @[Dispatcher.scala 137:49]
        node _T_86 = tail(_T_85, 1) @[Dispatcher.scala 137:49]
        node _T_87 = asSInt(_T_86) @[Dispatcher.scala 137:49]
        node _T_88 = leq(x_dest_transl, _T_87) @[Dispatcher.scala 137:32]
        when _T_88 : @[Dispatcher.scala 137:63]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 139:30]
        else :
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 142:30]
    node _T_89 = head(x_PE_transl, 1) @[Dispatcher.scala 148:40]
    node sign_delta_x = bits(_T_89, 0, 0) @[Dispatcher.scala 148:44]
    node _T_90 = head(y_PE_transl, 1) @[Dispatcher.scala 149:40]
    node sign_delta_y = bits(_T_90, 0, 0) @[Dispatcher.scala 149:44]
    node _T_91 = xor(sign_delta_x, sign_delta_y) @[Dispatcher.scala 151:36]
    node uFactor_x = eq(_T_91, UInt<1>("h0")) @[Dispatcher.scala 151:21]
    node _T_92 = xor(x_PE_transl_odd, y_PE_transl_odd) @[Dispatcher.scala 152:39]
    node oddResult_x = xor(_T_92, uFactor_x) @[Dispatcher.scala 152:57]
    node uFactor_y = xor(sign_delta_x, sign_delta_y) @[Dispatcher.scala 154:34]
    node _T_93 = xor(x_PE_transl_odd, y_PE_transl_odd) @[Dispatcher.scala 155:39]
    node oddResult_y = xor(_T_93, uFactor_y) @[Dispatcher.scala 155:57]
    node _T_94 = neq(io.x_PE, io.x_0) @[Dispatcher.scala 158:18]
    node _T_95 = neq(io.y_PE, io.y_0) @[Dispatcher.scala 158:39]
    node _T_96 = and(_T_94, _T_95) @[Dispatcher.scala 158:28]
    when _T_96 : @[Dispatcher.scala 158:49]
      node _T_97 = eq(sign_delta_x, UInt<1>("h0")) @[Dispatcher.scala 160:29]
      node _T_98 = and(oddResult_x, _T_97) @[Dispatcher.scala 160:26]
      when _T_98 : @[Dispatcher.scala 160:43]
        out_selector <= UInt<2>("h2") @[Dispatcher.scala 162:26]
      else :
        node _T_99 = and(oddResult_x, sign_delta_x) @[Dispatcher.scala 164:32]
        when _T_99 : @[Dispatcher.scala 164:48]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 166:26]
      node _T_100 = eq(sign_delta_y, UInt<1>("h0")) @[Dispatcher.scala 169:29]
      node _T_101 = and(oddResult_y, _T_100) @[Dispatcher.scala 169:26]
      when _T_101 : @[Dispatcher.scala 169:43]
        out_selector <= UInt<3>("h4") @[Dispatcher.scala 171:26]
      else :
        node _T_102 = and(oddResult_y, sign_delta_y) @[Dispatcher.scala 173:32]
        when _T_102 : @[Dispatcher.scala 173:48]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 175:26]

  module Dispatcher_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip x_PE : UInt<2>, flip y_PE : UInt<2>, flip x_0 : UInt<2>, flip y_0 : UInt<2>, flip x_dest : UInt<2>, flip y_dest : UInt<2>, left : UInt<1>, right : UInt<1>, up : UInt<1>, bottom : UInt<1>, this_PE : UInt<1>}

    wire out_selector : UInt<4> @[Dispatcher.scala 34:28]
    node _T = eq(out_selector, UInt<1>("h1")) @[Dispatcher.scala 36:29]
    node _T_1 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 36:46]
    node _T_2 = and(_T, _T_1) @[Dispatcher.scala 36:43]
    io.left <= _T_2 @[Dispatcher.scala 36:13]
    node _T_3 = eq(out_selector, UInt<2>("h2")) @[Dispatcher.scala 37:30]
    node _T_4 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 37:47]
    node _T_5 = and(_T_3, _T_4) @[Dispatcher.scala 37:44]
    io.right <= _T_5 @[Dispatcher.scala 37:14]
    node _T_6 = eq(out_selector, UInt<3>("h4")) @[Dispatcher.scala 38:27]
    node _T_7 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 38:44]
    node _T_8 = and(_T_6, _T_7) @[Dispatcher.scala 38:41]
    io.up <= _T_8 @[Dispatcher.scala 38:11]
    node _T_9 = eq(out_selector, UInt<4>("h8")) @[Dispatcher.scala 39:31]
    node _T_10 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 39:48]
    node _T_11 = and(_T_9, _T_10) @[Dispatcher.scala 39:45]
    io.bottom <= _T_11 @[Dispatcher.scala 39:15]
    node _T_12 = eq(io.x_dest, io.x_PE) @[Dispatcher.scala 44:20]
    node _T_13 = eq(io.y_dest, io.y_PE) @[Dispatcher.scala 44:45]
    node _T_14 = and(_T_12, _T_13) @[Dispatcher.scala 44:32]
    when _T_14 : @[Dispatcher.scala 44:57]
      io.this_PE <= UInt<1>("h1") @[Dispatcher.scala 45:20]
      out_selector <= UInt<1>("h0") @[Dispatcher.scala 46:22]
    else :
      io.this_PE <= UInt<1>("h0") @[Dispatcher.scala 48:20]
      out_selector <= UInt<1>("h0") @[Dispatcher.scala 49:22]
    node _T_15 = cvt(io.x_PE) @[Dispatcher.scala 52:31]
    node _T_16 = cvt(io.x_0) @[Dispatcher.scala 52:45]
    node _T_17 = sub(_T_15, _T_16) @[Dispatcher.scala 52:36]
    node _T_18 = tail(_T_17, 1) @[Dispatcher.scala 52:36]
    node x_PE_transl = asSInt(_T_18) @[Dispatcher.scala 52:36]
    node _T_19 = cvt(io.y_PE) @[Dispatcher.scala 53:31]
    node _T_20 = cvt(io.y_0) @[Dispatcher.scala 53:45]
    node _T_21 = sub(_T_19, _T_20) @[Dispatcher.scala 53:36]
    node _T_22 = tail(_T_21, 1) @[Dispatcher.scala 53:36]
    node y_PE_transl = asSInt(_T_22) @[Dispatcher.scala 53:36]
    node _T_23 = bits(x_PE_transl, 0, 0) @[Dispatcher.scala 54:38]
    node x_PE_transl_odd = eq(_T_23, UInt<1>("h1")) @[Dispatcher.scala 54:42]
    node _T_24 = bits(y_PE_transl, 0, 0) @[Dispatcher.scala 55:38]
    node y_PE_transl_odd = eq(_T_24, UInt<1>("h1")) @[Dispatcher.scala 55:42]
    node _T_25 = cvt(io.x_dest) @[Dispatcher.scala 56:35]
    node _T_26 = cvt(io.x_0) @[Dispatcher.scala 56:49]
    node _T_27 = sub(_T_25, _T_26) @[Dispatcher.scala 56:40]
    node _T_28 = tail(_T_27, 1) @[Dispatcher.scala 56:40]
    node x_dest_transl = asSInt(_T_28) @[Dispatcher.scala 56:40]
    node _T_29 = cvt(io.y_dest) @[Dispatcher.scala 57:35]
    node _T_30 = cvt(io.y_0) @[Dispatcher.scala 57:49]
    node _T_31 = sub(_T_29, _T_30) @[Dispatcher.scala 57:40]
    node _T_32 = tail(_T_31, 1) @[Dispatcher.scala 57:40]
    node y_dest_transl = asSInt(_T_32) @[Dispatcher.scala 57:40]
    node _T_33 = gt(io.x_PE, io.x_0) @[Dispatcher.scala 60:18]
    node _T_34 = eq(io.y_PE, io.y_0) @[Dispatcher.scala 60:38]
    node _T_35 = and(_T_33, _T_34) @[Dispatcher.scala 60:27]
    when _T_35 : @[Dispatcher.scala 60:49]
      when x_PE_transl_odd : @[Dispatcher.scala 62:30]
        node _T_36 = add(y_dest_transl, x_PE_transl) @[Dispatcher.scala 63:49]
        node _T_37 = tail(_T_36, 1) @[Dispatcher.scala 63:49]
        node _T_38 = asSInt(_T_37) @[Dispatcher.scala 63:49]
        node _T_39 = leq(x_dest_transl, _T_38) @[Dispatcher.scala 63:32]
        when _T_39 : @[Dispatcher.scala 63:63]
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 65:30]
        else :
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 68:30]
      else :
        node _T_40 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 71:35]
        node _T_41 = tail(_T_40, 1) @[Dispatcher.scala 71:35]
        node _T_42 = asSInt(_T_41) @[Dispatcher.scala 71:35]
        node _T_43 = add(_T_42, x_PE_transl) @[Dispatcher.scala 71:50]
        node _T_44 = tail(_T_43, 1) @[Dispatcher.scala 71:50]
        node _T_45 = asSInt(_T_44) @[Dispatcher.scala 71:50]
        node _T_46 = leq(x_dest_transl, _T_45) @[Dispatcher.scala 71:32]
        when _T_46 : @[Dispatcher.scala 71:64]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 73:30]
        else :
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 76:30]
    node _T_47 = eq(io.x_PE, io.x_0) @[Dispatcher.scala 82:18]
    node _T_48 = gt(io.y_PE, io.y_0) @[Dispatcher.scala 82:40]
    node _T_49 = and(_T_47, _T_48) @[Dispatcher.scala 82:29]
    when _T_49 : @[Dispatcher.scala 82:49]
      when y_PE_transl_odd : @[Dispatcher.scala 84:30]
        node _T_50 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 85:35]
        node _T_51 = tail(_T_50, 1) @[Dispatcher.scala 85:35]
        node _T_52 = asSInt(_T_51) @[Dispatcher.scala 85:35]
        node _T_53 = add(_T_52, y_PE_transl) @[Dispatcher.scala 85:50]
        node _T_54 = tail(_T_53, 1) @[Dispatcher.scala 85:50]
        node _T_55 = asSInt(_T_54) @[Dispatcher.scala 85:50]
        node _T_56 = leq(x_dest_transl, _T_55) @[Dispatcher.scala 85:32]
        when _T_56 : @[Dispatcher.scala 85:64]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 87:30]
        else :
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 90:30]
      else :
        node _T_57 = sub(y_dest_transl, y_PE_transl) @[Dispatcher.scala 93:49]
        node _T_58 = tail(_T_57, 1) @[Dispatcher.scala 93:49]
        node _T_59 = asSInt(_T_58) @[Dispatcher.scala 93:49]
        node _T_60 = geq(x_dest_transl, _T_59) @[Dispatcher.scala 93:32]
        when _T_60 : @[Dispatcher.scala 93:63]
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 95:30]
        else :
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 98:30]
    node _T_61 = lt(io.x_PE, io.x_0) @[Dispatcher.scala 104:18]
    node _T_62 = eq(io.y_PE, io.y_0) @[Dispatcher.scala 104:38]
    node _T_63 = and(_T_61, _T_62) @[Dispatcher.scala 104:27]
    when _T_63 : @[Dispatcher.scala 104:49]
      when x_PE_transl_odd : @[Dispatcher.scala 106:30]
        node _T_64 = add(y_dest_transl, x_PE_transl) @[Dispatcher.scala 107:49]
        node _T_65 = tail(_T_64, 1) @[Dispatcher.scala 107:49]
        node _T_66 = asSInt(_T_65) @[Dispatcher.scala 107:49]
        node _T_67 = geq(x_dest_transl, _T_66) @[Dispatcher.scala 107:32]
        when _T_67 : @[Dispatcher.scala 107:63]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 109:30]
        else :
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 112:30]
      else :
        node _T_68 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 115:35]
        node _T_69 = tail(_T_68, 1) @[Dispatcher.scala 115:35]
        node _T_70 = asSInt(_T_69) @[Dispatcher.scala 115:35]
        node _T_71 = add(_T_70, x_PE_transl) @[Dispatcher.scala 115:50]
        node _T_72 = tail(_T_71, 1) @[Dispatcher.scala 115:50]
        node _T_73 = asSInt(_T_72) @[Dispatcher.scala 115:50]
        node _T_74 = geq(x_dest_transl, _T_73) @[Dispatcher.scala 115:32]
        when _T_74 : @[Dispatcher.scala 115:64]
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 117:30]
        else :
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 120:30]
    node _T_75 = eq(io.x_PE, io.x_0) @[Dispatcher.scala 126:18]
    node _T_76 = lt(io.y_PE, io.y_0) @[Dispatcher.scala 126:40]
    node _T_77 = and(_T_75, _T_76) @[Dispatcher.scala 126:29]
    when _T_77 : @[Dispatcher.scala 126:49]
      when y_PE_transl_odd : @[Dispatcher.scala 128:30]
        node _T_78 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 129:35]
        node _T_79 = tail(_T_78, 1) @[Dispatcher.scala 129:35]
        node _T_80 = asSInt(_T_79) @[Dispatcher.scala 129:35]
        node _T_81 = add(_T_80, y_PE_transl) @[Dispatcher.scala 129:50]
        node _T_82 = tail(_T_81, 1) @[Dispatcher.scala 129:50]
        node _T_83 = asSInt(_T_82) @[Dispatcher.scala 129:50]
        node _T_84 = geq(x_dest_transl, _T_83) @[Dispatcher.scala 129:32]
        when _T_84 : @[Dispatcher.scala 129:64]
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 131:30]
        else :
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 134:30]
      else :
        node _T_85 = sub(y_dest_transl, y_PE_transl) @[Dispatcher.scala 137:49]
        node _T_86 = tail(_T_85, 1) @[Dispatcher.scala 137:49]
        node _T_87 = asSInt(_T_86) @[Dispatcher.scala 137:49]
        node _T_88 = leq(x_dest_transl, _T_87) @[Dispatcher.scala 137:32]
        when _T_88 : @[Dispatcher.scala 137:63]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 139:30]
        else :
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 142:30]
    node _T_89 = head(x_PE_transl, 1) @[Dispatcher.scala 148:40]
    node sign_delta_x = bits(_T_89, 0, 0) @[Dispatcher.scala 148:44]
    node _T_90 = head(y_PE_transl, 1) @[Dispatcher.scala 149:40]
    node sign_delta_y = bits(_T_90, 0, 0) @[Dispatcher.scala 149:44]
    node _T_91 = xor(sign_delta_x, sign_delta_y) @[Dispatcher.scala 151:36]
    node uFactor_x = eq(_T_91, UInt<1>("h0")) @[Dispatcher.scala 151:21]
    node _T_92 = xor(x_PE_transl_odd, y_PE_transl_odd) @[Dispatcher.scala 152:39]
    node oddResult_x = xor(_T_92, uFactor_x) @[Dispatcher.scala 152:57]
    node uFactor_y = xor(sign_delta_x, sign_delta_y) @[Dispatcher.scala 154:34]
    node _T_93 = xor(x_PE_transl_odd, y_PE_transl_odd) @[Dispatcher.scala 155:39]
    node oddResult_y = xor(_T_93, uFactor_y) @[Dispatcher.scala 155:57]
    node _T_94 = neq(io.x_PE, io.x_0) @[Dispatcher.scala 158:18]
    node _T_95 = neq(io.y_PE, io.y_0) @[Dispatcher.scala 158:39]
    node _T_96 = and(_T_94, _T_95) @[Dispatcher.scala 158:28]
    when _T_96 : @[Dispatcher.scala 158:49]
      node _T_97 = eq(sign_delta_x, UInt<1>("h0")) @[Dispatcher.scala 160:29]
      node _T_98 = and(oddResult_x, _T_97) @[Dispatcher.scala 160:26]
      when _T_98 : @[Dispatcher.scala 160:43]
        out_selector <= UInt<2>("h2") @[Dispatcher.scala 162:26]
      else :
        node _T_99 = and(oddResult_x, sign_delta_x) @[Dispatcher.scala 164:32]
        when _T_99 : @[Dispatcher.scala 164:48]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 166:26]
      node _T_100 = eq(sign_delta_y, UInt<1>("h0")) @[Dispatcher.scala 169:29]
      node _T_101 = and(oddResult_y, _T_100) @[Dispatcher.scala 169:26]
      when _T_101 : @[Dispatcher.scala 169:43]
        out_selector <= UInt<3>("h4") @[Dispatcher.scala 171:26]
      else :
        node _T_102 = and(oddResult_y, sign_delta_y) @[Dispatcher.scala 173:32]
        when _T_102 : @[Dispatcher.scala 173:48]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 175:26]

  module Dispatcher_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip x_PE : UInt<2>, flip y_PE : UInt<2>, flip x_0 : UInt<2>, flip y_0 : UInt<2>, flip x_dest : UInt<2>, flip y_dest : UInt<2>, left : UInt<1>, right : UInt<1>, up : UInt<1>, bottom : UInt<1>, this_PE : UInt<1>}

    wire out_selector : UInt<4> @[Dispatcher.scala 34:28]
    node _T = eq(out_selector, UInt<1>("h1")) @[Dispatcher.scala 36:29]
    node _T_1 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 36:46]
    node _T_2 = and(_T, _T_1) @[Dispatcher.scala 36:43]
    io.left <= _T_2 @[Dispatcher.scala 36:13]
    node _T_3 = eq(out_selector, UInt<2>("h2")) @[Dispatcher.scala 37:30]
    node _T_4 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 37:47]
    node _T_5 = and(_T_3, _T_4) @[Dispatcher.scala 37:44]
    io.right <= _T_5 @[Dispatcher.scala 37:14]
    node _T_6 = eq(out_selector, UInt<3>("h4")) @[Dispatcher.scala 38:27]
    node _T_7 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 38:44]
    node _T_8 = and(_T_6, _T_7) @[Dispatcher.scala 38:41]
    io.up <= _T_8 @[Dispatcher.scala 38:11]
    node _T_9 = eq(out_selector, UInt<4>("h8")) @[Dispatcher.scala 39:31]
    node _T_10 = eq(io.this_PE, UInt<1>("h0")) @[Dispatcher.scala 39:48]
    node _T_11 = and(_T_9, _T_10) @[Dispatcher.scala 39:45]
    io.bottom <= _T_11 @[Dispatcher.scala 39:15]
    node _T_12 = eq(io.x_dest, io.x_PE) @[Dispatcher.scala 44:20]
    node _T_13 = eq(io.y_dest, io.y_PE) @[Dispatcher.scala 44:45]
    node _T_14 = and(_T_12, _T_13) @[Dispatcher.scala 44:32]
    when _T_14 : @[Dispatcher.scala 44:57]
      io.this_PE <= UInt<1>("h1") @[Dispatcher.scala 45:20]
      out_selector <= UInt<1>("h0") @[Dispatcher.scala 46:22]
    else :
      io.this_PE <= UInt<1>("h0") @[Dispatcher.scala 48:20]
      out_selector <= UInt<1>("h0") @[Dispatcher.scala 49:22]
    node _T_15 = cvt(io.x_PE) @[Dispatcher.scala 52:31]
    node _T_16 = cvt(io.x_0) @[Dispatcher.scala 52:45]
    node _T_17 = sub(_T_15, _T_16) @[Dispatcher.scala 52:36]
    node _T_18 = tail(_T_17, 1) @[Dispatcher.scala 52:36]
    node x_PE_transl = asSInt(_T_18) @[Dispatcher.scala 52:36]
    node _T_19 = cvt(io.y_PE) @[Dispatcher.scala 53:31]
    node _T_20 = cvt(io.y_0) @[Dispatcher.scala 53:45]
    node _T_21 = sub(_T_19, _T_20) @[Dispatcher.scala 53:36]
    node _T_22 = tail(_T_21, 1) @[Dispatcher.scala 53:36]
    node y_PE_transl = asSInt(_T_22) @[Dispatcher.scala 53:36]
    node _T_23 = bits(x_PE_transl, 0, 0) @[Dispatcher.scala 54:38]
    node x_PE_transl_odd = eq(_T_23, UInt<1>("h1")) @[Dispatcher.scala 54:42]
    node _T_24 = bits(y_PE_transl, 0, 0) @[Dispatcher.scala 55:38]
    node y_PE_transl_odd = eq(_T_24, UInt<1>("h1")) @[Dispatcher.scala 55:42]
    node _T_25 = cvt(io.x_dest) @[Dispatcher.scala 56:35]
    node _T_26 = cvt(io.x_0) @[Dispatcher.scala 56:49]
    node _T_27 = sub(_T_25, _T_26) @[Dispatcher.scala 56:40]
    node _T_28 = tail(_T_27, 1) @[Dispatcher.scala 56:40]
    node x_dest_transl = asSInt(_T_28) @[Dispatcher.scala 56:40]
    node _T_29 = cvt(io.y_dest) @[Dispatcher.scala 57:35]
    node _T_30 = cvt(io.y_0) @[Dispatcher.scala 57:49]
    node _T_31 = sub(_T_29, _T_30) @[Dispatcher.scala 57:40]
    node _T_32 = tail(_T_31, 1) @[Dispatcher.scala 57:40]
    node y_dest_transl = asSInt(_T_32) @[Dispatcher.scala 57:40]
    node _T_33 = gt(io.x_PE, io.x_0) @[Dispatcher.scala 60:18]
    node _T_34 = eq(io.y_PE, io.y_0) @[Dispatcher.scala 60:38]
    node _T_35 = and(_T_33, _T_34) @[Dispatcher.scala 60:27]
    when _T_35 : @[Dispatcher.scala 60:49]
      when x_PE_transl_odd : @[Dispatcher.scala 62:30]
        node _T_36 = add(y_dest_transl, x_PE_transl) @[Dispatcher.scala 63:49]
        node _T_37 = tail(_T_36, 1) @[Dispatcher.scala 63:49]
        node _T_38 = asSInt(_T_37) @[Dispatcher.scala 63:49]
        node _T_39 = leq(x_dest_transl, _T_38) @[Dispatcher.scala 63:32]
        when _T_39 : @[Dispatcher.scala 63:63]
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 65:30]
        else :
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 68:30]
      else :
        node _T_40 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 71:35]
        node _T_41 = tail(_T_40, 1) @[Dispatcher.scala 71:35]
        node _T_42 = asSInt(_T_41) @[Dispatcher.scala 71:35]
        node _T_43 = add(_T_42, x_PE_transl) @[Dispatcher.scala 71:50]
        node _T_44 = tail(_T_43, 1) @[Dispatcher.scala 71:50]
        node _T_45 = asSInt(_T_44) @[Dispatcher.scala 71:50]
        node _T_46 = leq(x_dest_transl, _T_45) @[Dispatcher.scala 71:32]
        when _T_46 : @[Dispatcher.scala 71:64]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 73:30]
        else :
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 76:30]
    node _T_47 = eq(io.x_PE, io.x_0) @[Dispatcher.scala 82:18]
    node _T_48 = gt(io.y_PE, io.y_0) @[Dispatcher.scala 82:40]
    node _T_49 = and(_T_47, _T_48) @[Dispatcher.scala 82:29]
    when _T_49 : @[Dispatcher.scala 82:49]
      when y_PE_transl_odd : @[Dispatcher.scala 84:30]
        node _T_50 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 85:35]
        node _T_51 = tail(_T_50, 1) @[Dispatcher.scala 85:35]
        node _T_52 = asSInt(_T_51) @[Dispatcher.scala 85:35]
        node _T_53 = add(_T_52, y_PE_transl) @[Dispatcher.scala 85:50]
        node _T_54 = tail(_T_53, 1) @[Dispatcher.scala 85:50]
        node _T_55 = asSInt(_T_54) @[Dispatcher.scala 85:50]
        node _T_56 = leq(x_dest_transl, _T_55) @[Dispatcher.scala 85:32]
        when _T_56 : @[Dispatcher.scala 85:64]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 87:30]
        else :
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 90:30]
      else :
        node _T_57 = sub(y_dest_transl, y_PE_transl) @[Dispatcher.scala 93:49]
        node _T_58 = tail(_T_57, 1) @[Dispatcher.scala 93:49]
        node _T_59 = asSInt(_T_58) @[Dispatcher.scala 93:49]
        node _T_60 = geq(x_dest_transl, _T_59) @[Dispatcher.scala 93:32]
        when _T_60 : @[Dispatcher.scala 93:63]
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 95:30]
        else :
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 98:30]
    node _T_61 = lt(io.x_PE, io.x_0) @[Dispatcher.scala 104:18]
    node _T_62 = eq(io.y_PE, io.y_0) @[Dispatcher.scala 104:38]
    node _T_63 = and(_T_61, _T_62) @[Dispatcher.scala 104:27]
    when _T_63 : @[Dispatcher.scala 104:49]
      when x_PE_transl_odd : @[Dispatcher.scala 106:30]
        node _T_64 = add(y_dest_transl, x_PE_transl) @[Dispatcher.scala 107:49]
        node _T_65 = tail(_T_64, 1) @[Dispatcher.scala 107:49]
        node _T_66 = asSInt(_T_65) @[Dispatcher.scala 107:49]
        node _T_67 = geq(x_dest_transl, _T_66) @[Dispatcher.scala 107:32]
        when _T_67 : @[Dispatcher.scala 107:63]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 109:30]
        else :
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 112:30]
      else :
        node _T_68 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 115:35]
        node _T_69 = tail(_T_68, 1) @[Dispatcher.scala 115:35]
        node _T_70 = asSInt(_T_69) @[Dispatcher.scala 115:35]
        node _T_71 = add(_T_70, x_PE_transl) @[Dispatcher.scala 115:50]
        node _T_72 = tail(_T_71, 1) @[Dispatcher.scala 115:50]
        node _T_73 = asSInt(_T_72) @[Dispatcher.scala 115:50]
        node _T_74 = geq(x_dest_transl, _T_73) @[Dispatcher.scala 115:32]
        when _T_74 : @[Dispatcher.scala 115:64]
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 117:30]
        else :
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 120:30]
    node _T_75 = eq(io.x_PE, io.x_0) @[Dispatcher.scala 126:18]
    node _T_76 = lt(io.y_PE, io.y_0) @[Dispatcher.scala 126:40]
    node _T_77 = and(_T_75, _T_76) @[Dispatcher.scala 126:29]
    when _T_77 : @[Dispatcher.scala 126:49]
      when y_PE_transl_odd : @[Dispatcher.scala 128:30]
        node _T_78 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 129:35]
        node _T_79 = tail(_T_78, 1) @[Dispatcher.scala 129:35]
        node _T_80 = asSInt(_T_79) @[Dispatcher.scala 129:35]
        node _T_81 = add(_T_80, y_PE_transl) @[Dispatcher.scala 129:50]
        node _T_82 = tail(_T_81, 1) @[Dispatcher.scala 129:50]
        node _T_83 = asSInt(_T_82) @[Dispatcher.scala 129:50]
        node _T_84 = geq(x_dest_transl, _T_83) @[Dispatcher.scala 129:32]
        when _T_84 : @[Dispatcher.scala 129:64]
          out_selector <= UInt<2>("h2") @[Dispatcher.scala 131:30]
        else :
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 134:30]
      else :
        node _T_85 = sub(y_dest_transl, y_PE_transl) @[Dispatcher.scala 137:49]
        node _T_86 = tail(_T_85, 1) @[Dispatcher.scala 137:49]
        node _T_87 = asSInt(_T_86) @[Dispatcher.scala 137:49]
        node _T_88 = leq(x_dest_transl, _T_87) @[Dispatcher.scala 137:32]
        when _T_88 : @[Dispatcher.scala 137:63]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 139:30]
        else :
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 142:30]
    node _T_89 = head(x_PE_transl, 1) @[Dispatcher.scala 148:40]
    node sign_delta_x = bits(_T_89, 0, 0) @[Dispatcher.scala 148:44]
    node _T_90 = head(y_PE_transl, 1) @[Dispatcher.scala 149:40]
    node sign_delta_y = bits(_T_90, 0, 0) @[Dispatcher.scala 149:44]
    node _T_91 = xor(sign_delta_x, sign_delta_y) @[Dispatcher.scala 151:36]
    node uFactor_x = eq(_T_91, UInt<1>("h0")) @[Dispatcher.scala 151:21]
    node _T_92 = xor(x_PE_transl_odd, y_PE_transl_odd) @[Dispatcher.scala 152:39]
    node oddResult_x = xor(_T_92, uFactor_x) @[Dispatcher.scala 152:57]
    node uFactor_y = xor(sign_delta_x, sign_delta_y) @[Dispatcher.scala 154:34]
    node _T_93 = xor(x_PE_transl_odd, y_PE_transl_odd) @[Dispatcher.scala 155:39]
    node oddResult_y = xor(_T_93, uFactor_y) @[Dispatcher.scala 155:57]
    node _T_94 = neq(io.x_PE, io.x_0) @[Dispatcher.scala 158:18]
    node _T_95 = neq(io.y_PE, io.y_0) @[Dispatcher.scala 158:39]
    node _T_96 = and(_T_94, _T_95) @[Dispatcher.scala 158:28]
    when _T_96 : @[Dispatcher.scala 158:49]
      node _T_97 = eq(sign_delta_x, UInt<1>("h0")) @[Dispatcher.scala 160:29]
      node _T_98 = and(oddResult_x, _T_97) @[Dispatcher.scala 160:26]
      when _T_98 : @[Dispatcher.scala 160:43]
        out_selector <= UInt<2>("h2") @[Dispatcher.scala 162:26]
      else :
        node _T_99 = and(oddResult_x, sign_delta_x) @[Dispatcher.scala 164:32]
        when _T_99 : @[Dispatcher.scala 164:48]
          out_selector <= UInt<1>("h1") @[Dispatcher.scala 166:26]
      node _T_100 = eq(sign_delta_y, UInt<1>("h0")) @[Dispatcher.scala 169:29]
      node _T_101 = and(oddResult_y, _T_100) @[Dispatcher.scala 169:26]
      when _T_101 : @[Dispatcher.scala 169:43]
        out_selector <= UInt<3>("h4") @[Dispatcher.scala 171:26]
      else :
        node _T_102 = and(oddResult_y, sign_delta_y) @[Dispatcher.scala 173:32]
        when _T_102 : @[Dispatcher.scala 173:48]
          out_selector <= UInt<4>("h8") @[Dispatcher.scala 175:26]

  module GenerationDispatcher :
    input clock : Clock
    input reset : Reset
    output io : { flip x_PE : UInt<2>, flip y_PE : UInt<2>, flip x_dest : UInt<2>, flip y_dest : UInt<2>, left : UInt<1>, right : UInt<1>, up : UInt<1>, bottom : UInt<1>}

    wire out_selector : UInt<4> @[Dispatcher.scala 201:28]
    node _T = eq(out_selector, UInt<1>("h1")) @[Dispatcher.scala 205:29]
    io.left <= _T @[Dispatcher.scala 205:13]
    node _T_1 = eq(out_selector, UInt<2>("h2")) @[Dispatcher.scala 206:30]
    io.right <= _T_1 @[Dispatcher.scala 206:14]
    node _T_2 = eq(out_selector, UInt<3>("h4")) @[Dispatcher.scala 207:27]
    io.up <= _T_2 @[Dispatcher.scala 207:11]
    node _T_3 = eq(out_selector, UInt<4>("h8")) @[Dispatcher.scala 208:31]
    io.bottom <= _T_3 @[Dispatcher.scala 208:15]
    node _T_4 = cvt(io.x_dest) @[Dispatcher.scala 210:35]
    node _T_5 = cvt(io.x_PE) @[Dispatcher.scala 210:50]
    node _T_6 = sub(_T_4, _T_5) @[Dispatcher.scala 210:40]
    node _T_7 = tail(_T_6, 1) @[Dispatcher.scala 210:40]
    node x_dest_transl = asSInt(_T_7) @[Dispatcher.scala 210:40]
    node _T_8 = cvt(io.y_dest) @[Dispatcher.scala 211:35]
    node _T_9 = cvt(io.y_PE) @[Dispatcher.scala 211:50]
    node _T_10 = sub(_T_8, _T_9) @[Dispatcher.scala 211:40]
    node _T_11 = tail(_T_10, 1) @[Dispatcher.scala 211:40]
    node y_dest_transl = asSInt(_T_11) @[Dispatcher.scala 211:40]
    node _T_12 = leq(x_dest_transl, y_dest_transl) @[Dispatcher.scala 213:24]
    node _T_13 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 213:60]
    node _T_14 = tail(_T_13, 1) @[Dispatcher.scala 213:60]
    node _T_15 = asSInt(_T_14) @[Dispatcher.scala 213:60]
    node _T_16 = lt(x_dest_transl, _T_15) @[Dispatcher.scala 213:58]
    node _T_17 = and(_T_12, _T_16) @[Dispatcher.scala 213:41]
    when _T_17 : @[Dispatcher.scala 213:75]
      out_selector <= UInt<1>("h1") @[Dispatcher.scala 215:22]
    else :
      node _T_18 = geq(x_dest_transl, y_dest_transl) @[Dispatcher.scala 217:30]
      node _T_19 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 217:66]
      node _T_20 = tail(_T_19, 1) @[Dispatcher.scala 217:66]
      node _T_21 = asSInt(_T_20) @[Dispatcher.scala 217:66]
      node _T_22 = gt(x_dest_transl, _T_21) @[Dispatcher.scala 217:64]
      node _T_23 = and(_T_18, _T_22) @[Dispatcher.scala 217:47]
      when _T_23 : @[Dispatcher.scala 217:81]
        out_selector <= UInt<2>("h2") @[Dispatcher.scala 219:22]
      else :
        node _T_24 = lt(x_dest_transl, y_dest_transl) @[Dispatcher.scala 221:30]
        node _T_25 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 221:66]
        node _T_26 = tail(_T_25, 1) @[Dispatcher.scala 221:66]
        node _T_27 = asSInt(_T_26) @[Dispatcher.scala 221:66]
        node _T_28 = geq(x_dest_transl, _T_27) @[Dispatcher.scala 221:63]
        node _T_29 = and(_T_24, _T_28) @[Dispatcher.scala 221:46]
        when _T_29 : @[Dispatcher.scala 221:81]
          out_selector <= UInt<3>("h4") @[Dispatcher.scala 223:22]
        else :
          node _T_30 = gt(x_dest_transl, y_dest_transl) @[Dispatcher.scala 225:30]
          node _T_31 = sub(asSInt(UInt<1>("h0")), y_dest_transl) @[Dispatcher.scala 225:66]
          node _T_32 = tail(_T_31, 1) @[Dispatcher.scala 225:66]
          node _T_33 = asSInt(_T_32) @[Dispatcher.scala 225:66]
          node _T_34 = leq(x_dest_transl, _T_33) @[Dispatcher.scala 225:63]
          node _T_35 = and(_T_30, _T_34) @[Dispatcher.scala 225:46]
          when _T_35 : @[Dispatcher.scala 225:81]
            out_selector <= UInt<4>("h8") @[Dispatcher.scala 227:22]
          else :
            out_selector <= UInt<1>("h0") @[Dispatcher.scala 231:22]

  module RRArbiter :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}[4], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, chosen : UInt<2>}

    wire choice : UInt
    choice <= UInt<2>("h3")
    io.chosen <= choice @[Arbiter.scala 40:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 41:16]
    io.out.bits.y_dest <= io.in[io.chosen].bits.y_dest @[Arbiter.scala 42:15]
    io.out.bits.x_dest <= io.in[io.chosen].bits.x_dest @[Arbiter.scala 42:15]
    io.out.bits.y_0 <= io.in[io.chosen].bits.y_0 @[Arbiter.scala 42:15]
    io.out.bits.x_0 <= io.in[io.chosen].bits.x_0 @[Arbiter.scala 42:15]
    io.out.bits.data <= io.in[io.chosen].bits.data @[Arbiter.scala 42:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg lastGrant : UInt<2>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 15:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 16:19]
      lastGrant <= io.chosen @[Reg.scala 16:23]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_1 = gt(UInt<1>("h1"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_2 = gt(UInt<2>("h2"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_3 = gt(UInt<2>("h3"), lastGrant) @[Arbiter.scala 67:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 68:75]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 68:75]
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 68:75]
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 68:75]
    node _ctrl_T = or(validMask_0, validMask_1) @[Arbiter.scala 31:68]
    node _ctrl_T_1 = or(_ctrl_T, validMask_2) @[Arbiter.scala 31:68]
    node _ctrl_T_2 = or(_ctrl_T_1, validMask_3) @[Arbiter.scala 31:68]
    node _ctrl_T_3 = or(_ctrl_T_2, io.in[0].valid) @[Arbiter.scala 31:68]
    node _ctrl_T_4 = or(_ctrl_T_3, io.in[1].valid) @[Arbiter.scala 31:68]
    node _ctrl_T_5 = or(_ctrl_T_4, io.in[2].valid) @[Arbiter.scala 31:68]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_2 = eq(_ctrl_T, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_3 = eq(_ctrl_T_1, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_4 = eq(_ctrl_T_2, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_5 = eq(_ctrl_T_3, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_6 = eq(_ctrl_T_4, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_7 = eq(_ctrl_T_5, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 72:34]
    node _T_1 = or(_T, ctrl_4) @[Arbiter.scala 72:50]
    node _T_2 = and(ctrl_1, grantMask_1) @[Arbiter.scala 72:34]
    node _T_3 = or(_T_2, ctrl_5) @[Arbiter.scala 72:50]
    node _T_4 = and(ctrl_2, grantMask_2) @[Arbiter.scala 72:34]
    node _T_5 = or(_T_4, ctrl_6) @[Arbiter.scala 72:50]
    node _T_6 = and(ctrl_3, grantMask_3) @[Arbiter.scala 72:34]
    node _T_7 = or(_T_6, ctrl_7) @[Arbiter.scala 72:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 60:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 60:16]
    node _io_in_1_ready_T = and(_T_3, io.out.ready) @[Arbiter.scala 60:21]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 60:16]
    node _io_in_2_ready_T = and(_T_5, io.out.ready) @[Arbiter.scala 60:21]
    io.in[2].ready <= _io_in_2_ready_T @[Arbiter.scala 60:16]
    node _io_in_3_ready_T = and(_T_7, io.out.ready) @[Arbiter.scala 60:21]
    io.in[3].ready <= _io_in_3_ready_T @[Arbiter.scala 60:16]
    when io.in[2].valid : @[Arbiter.scala 77:27]
      choice <= UInt<2>("h2") @[Arbiter.scala 77:36]
    when io.in[1].valid : @[Arbiter.scala 77:27]
      choice <= UInt<1>("h1") @[Arbiter.scala 77:36]
    when io.in[0].valid : @[Arbiter.scala 77:27]
      choice <= UInt<1>("h0") @[Arbiter.scala 77:36]
    when validMask_3 : @[Arbiter.scala 79:25]
      choice <= UInt<2>("h3") @[Arbiter.scala 79:34]
    when validMask_2 : @[Arbiter.scala 79:25]
      choice <= UInt<2>("h2") @[Arbiter.scala 79:34]
    when validMask_1 : @[Arbiter.scala 79:25]
      choice <= UInt<1>("h1") @[Arbiter.scala 79:34]

  module RRArbiter_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}[4], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, chosen : UInt<2>}

    wire choice : UInt
    choice <= UInt<2>("h3")
    io.chosen <= choice @[Arbiter.scala 40:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 41:16]
    io.out.bits.y_dest <= io.in[io.chosen].bits.y_dest @[Arbiter.scala 42:15]
    io.out.bits.x_dest <= io.in[io.chosen].bits.x_dest @[Arbiter.scala 42:15]
    io.out.bits.y_0 <= io.in[io.chosen].bits.y_0 @[Arbiter.scala 42:15]
    io.out.bits.x_0 <= io.in[io.chosen].bits.x_0 @[Arbiter.scala 42:15]
    io.out.bits.data <= io.in[io.chosen].bits.data @[Arbiter.scala 42:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg lastGrant : UInt<2>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 15:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 16:19]
      lastGrant <= io.chosen @[Reg.scala 16:23]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_1 = gt(UInt<1>("h1"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_2 = gt(UInt<2>("h2"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_3 = gt(UInt<2>("h3"), lastGrant) @[Arbiter.scala 67:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 68:75]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 68:75]
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 68:75]
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 68:75]
    node _ctrl_T = or(validMask_0, validMask_1) @[Arbiter.scala 31:68]
    node _ctrl_T_1 = or(_ctrl_T, validMask_2) @[Arbiter.scala 31:68]
    node _ctrl_T_2 = or(_ctrl_T_1, validMask_3) @[Arbiter.scala 31:68]
    node _ctrl_T_3 = or(_ctrl_T_2, io.in[0].valid) @[Arbiter.scala 31:68]
    node _ctrl_T_4 = or(_ctrl_T_3, io.in[1].valid) @[Arbiter.scala 31:68]
    node _ctrl_T_5 = or(_ctrl_T_4, io.in[2].valid) @[Arbiter.scala 31:68]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_2 = eq(_ctrl_T, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_3 = eq(_ctrl_T_1, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_4 = eq(_ctrl_T_2, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_5 = eq(_ctrl_T_3, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_6 = eq(_ctrl_T_4, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_7 = eq(_ctrl_T_5, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 72:34]
    node _T_1 = or(_T, ctrl_4) @[Arbiter.scala 72:50]
    node _T_2 = and(ctrl_1, grantMask_1) @[Arbiter.scala 72:34]
    node _T_3 = or(_T_2, ctrl_5) @[Arbiter.scala 72:50]
    node _T_4 = and(ctrl_2, grantMask_2) @[Arbiter.scala 72:34]
    node _T_5 = or(_T_4, ctrl_6) @[Arbiter.scala 72:50]
    node _T_6 = and(ctrl_3, grantMask_3) @[Arbiter.scala 72:34]
    node _T_7 = or(_T_6, ctrl_7) @[Arbiter.scala 72:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 60:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 60:16]
    node _io_in_1_ready_T = and(_T_3, io.out.ready) @[Arbiter.scala 60:21]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 60:16]
    node _io_in_2_ready_T = and(_T_5, io.out.ready) @[Arbiter.scala 60:21]
    io.in[2].ready <= _io_in_2_ready_T @[Arbiter.scala 60:16]
    node _io_in_3_ready_T = and(_T_7, io.out.ready) @[Arbiter.scala 60:21]
    io.in[3].ready <= _io_in_3_ready_T @[Arbiter.scala 60:16]
    when io.in[2].valid : @[Arbiter.scala 77:27]
      choice <= UInt<2>("h2") @[Arbiter.scala 77:36]
    when io.in[1].valid : @[Arbiter.scala 77:27]
      choice <= UInt<1>("h1") @[Arbiter.scala 77:36]
    when io.in[0].valid : @[Arbiter.scala 77:27]
      choice <= UInt<1>("h0") @[Arbiter.scala 77:36]
    when validMask_3 : @[Arbiter.scala 79:25]
      choice <= UInt<2>("h3") @[Arbiter.scala 79:34]
    when validMask_2 : @[Arbiter.scala 79:25]
      choice <= UInt<2>("h2") @[Arbiter.scala 79:34]
    when validMask_1 : @[Arbiter.scala 79:25]
      choice <= UInt<1>("h1") @[Arbiter.scala 79:34]

  module RRArbiter_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}[4], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, chosen : UInt<2>}

    wire choice : UInt
    choice <= UInt<2>("h3")
    io.chosen <= choice @[Arbiter.scala 40:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 41:16]
    io.out.bits.y_dest <= io.in[io.chosen].bits.y_dest @[Arbiter.scala 42:15]
    io.out.bits.x_dest <= io.in[io.chosen].bits.x_dest @[Arbiter.scala 42:15]
    io.out.bits.y_0 <= io.in[io.chosen].bits.y_0 @[Arbiter.scala 42:15]
    io.out.bits.x_0 <= io.in[io.chosen].bits.x_0 @[Arbiter.scala 42:15]
    io.out.bits.data <= io.in[io.chosen].bits.data @[Arbiter.scala 42:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg lastGrant : UInt<2>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 15:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 16:19]
      lastGrant <= io.chosen @[Reg.scala 16:23]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_1 = gt(UInt<1>("h1"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_2 = gt(UInt<2>("h2"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_3 = gt(UInt<2>("h3"), lastGrant) @[Arbiter.scala 67:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 68:75]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 68:75]
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 68:75]
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 68:75]
    node _ctrl_T = or(validMask_0, validMask_1) @[Arbiter.scala 31:68]
    node _ctrl_T_1 = or(_ctrl_T, validMask_2) @[Arbiter.scala 31:68]
    node _ctrl_T_2 = or(_ctrl_T_1, validMask_3) @[Arbiter.scala 31:68]
    node _ctrl_T_3 = or(_ctrl_T_2, io.in[0].valid) @[Arbiter.scala 31:68]
    node _ctrl_T_4 = or(_ctrl_T_3, io.in[1].valid) @[Arbiter.scala 31:68]
    node _ctrl_T_5 = or(_ctrl_T_4, io.in[2].valid) @[Arbiter.scala 31:68]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_2 = eq(_ctrl_T, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_3 = eq(_ctrl_T_1, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_4 = eq(_ctrl_T_2, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_5 = eq(_ctrl_T_3, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_6 = eq(_ctrl_T_4, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_7 = eq(_ctrl_T_5, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 72:34]
    node _T_1 = or(_T, ctrl_4) @[Arbiter.scala 72:50]
    node _T_2 = and(ctrl_1, grantMask_1) @[Arbiter.scala 72:34]
    node _T_3 = or(_T_2, ctrl_5) @[Arbiter.scala 72:50]
    node _T_4 = and(ctrl_2, grantMask_2) @[Arbiter.scala 72:34]
    node _T_5 = or(_T_4, ctrl_6) @[Arbiter.scala 72:50]
    node _T_6 = and(ctrl_3, grantMask_3) @[Arbiter.scala 72:34]
    node _T_7 = or(_T_6, ctrl_7) @[Arbiter.scala 72:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 60:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 60:16]
    node _io_in_1_ready_T = and(_T_3, io.out.ready) @[Arbiter.scala 60:21]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 60:16]
    node _io_in_2_ready_T = and(_T_5, io.out.ready) @[Arbiter.scala 60:21]
    io.in[2].ready <= _io_in_2_ready_T @[Arbiter.scala 60:16]
    node _io_in_3_ready_T = and(_T_7, io.out.ready) @[Arbiter.scala 60:21]
    io.in[3].ready <= _io_in_3_ready_T @[Arbiter.scala 60:16]
    when io.in[2].valid : @[Arbiter.scala 77:27]
      choice <= UInt<2>("h2") @[Arbiter.scala 77:36]
    when io.in[1].valid : @[Arbiter.scala 77:27]
      choice <= UInt<1>("h1") @[Arbiter.scala 77:36]
    when io.in[0].valid : @[Arbiter.scala 77:27]
      choice <= UInt<1>("h0") @[Arbiter.scala 77:36]
    when validMask_3 : @[Arbiter.scala 79:25]
      choice <= UInt<2>("h3") @[Arbiter.scala 79:34]
    when validMask_2 : @[Arbiter.scala 79:25]
      choice <= UInt<2>("h2") @[Arbiter.scala 79:34]
    when validMask_1 : @[Arbiter.scala 79:25]
      choice <= UInt<1>("h1") @[Arbiter.scala 79:34]

  module RRArbiter_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}[4], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, chosen : UInt<2>}

    wire choice : UInt
    choice <= UInt<2>("h3")
    io.chosen <= choice @[Arbiter.scala 40:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 41:16]
    io.out.bits.y_dest <= io.in[io.chosen].bits.y_dest @[Arbiter.scala 42:15]
    io.out.bits.x_dest <= io.in[io.chosen].bits.x_dest @[Arbiter.scala 42:15]
    io.out.bits.y_0 <= io.in[io.chosen].bits.y_0 @[Arbiter.scala 42:15]
    io.out.bits.x_0 <= io.in[io.chosen].bits.x_0 @[Arbiter.scala 42:15]
    io.out.bits.data <= io.in[io.chosen].bits.data @[Arbiter.scala 42:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg lastGrant : UInt<2>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 15:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 16:19]
      lastGrant <= io.chosen @[Reg.scala 16:23]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_1 = gt(UInt<1>("h1"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_2 = gt(UInt<2>("h2"), lastGrant) @[Arbiter.scala 67:49]
    node grantMask_3 = gt(UInt<2>("h3"), lastGrant) @[Arbiter.scala 67:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 68:75]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 68:75]
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 68:75]
    node validMask_3 = and(io.in[3].valid, grantMask_3) @[Arbiter.scala 68:75]
    node _ctrl_T = or(validMask_0, validMask_1) @[Arbiter.scala 31:68]
    node _ctrl_T_1 = or(_ctrl_T, validMask_2) @[Arbiter.scala 31:68]
    node _ctrl_T_2 = or(_ctrl_T_1, validMask_3) @[Arbiter.scala 31:68]
    node _ctrl_T_3 = or(_ctrl_T_2, io.in[0].valid) @[Arbiter.scala 31:68]
    node _ctrl_T_4 = or(_ctrl_T_3, io.in[1].valid) @[Arbiter.scala 31:68]
    node _ctrl_T_5 = or(_ctrl_T_4, io.in[2].valid) @[Arbiter.scala 31:68]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_2 = eq(_ctrl_T, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_3 = eq(_ctrl_T_1, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_4 = eq(_ctrl_T_2, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_5 = eq(_ctrl_T_3, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_6 = eq(_ctrl_T_4, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node ctrl_7 = eq(_ctrl_T_5, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 72:34]
    node _T_1 = or(_T, ctrl_4) @[Arbiter.scala 72:50]
    node _T_2 = and(ctrl_1, grantMask_1) @[Arbiter.scala 72:34]
    node _T_3 = or(_T_2, ctrl_5) @[Arbiter.scala 72:50]
    node _T_4 = and(ctrl_2, grantMask_2) @[Arbiter.scala 72:34]
    node _T_5 = or(_T_4, ctrl_6) @[Arbiter.scala 72:50]
    node _T_6 = and(ctrl_3, grantMask_3) @[Arbiter.scala 72:34]
    node _T_7 = or(_T_6, ctrl_7) @[Arbiter.scala 72:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 60:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 60:16]
    node _io_in_1_ready_T = and(_T_3, io.out.ready) @[Arbiter.scala 60:21]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 60:16]
    node _io_in_2_ready_T = and(_T_5, io.out.ready) @[Arbiter.scala 60:21]
    io.in[2].ready <= _io_in_2_ready_T @[Arbiter.scala 60:16]
    node _io_in_3_ready_T = and(_T_7, io.out.ready) @[Arbiter.scala 60:21]
    io.in[3].ready <= _io_in_3_ready_T @[Arbiter.scala 60:16]
    when io.in[2].valid : @[Arbiter.scala 77:27]
      choice <= UInt<2>("h2") @[Arbiter.scala 77:36]
    when io.in[1].valid : @[Arbiter.scala 77:27]
      choice <= UInt<1>("h1") @[Arbiter.scala 77:36]
    when io.in[0].valid : @[Arbiter.scala 77:27]
      choice <= UInt<1>("h0") @[Arbiter.scala 77:36]
    when validMask_3 : @[Arbiter.scala 79:25]
      choice <= UInt<2>("h3") @[Arbiter.scala 79:34]
    when validMask_2 : @[Arbiter.scala 79:25]
      choice <= UInt<2>("h2") @[Arbiter.scala 79:34]
    when validMask_1 : @[Arbiter.scala 79:25]
      choice <= UInt<1>("h1") @[Arbiter.scala 79:34]

  module Queue_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_6 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module Queue_7 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, count : UInt<7>}

    cmem ram : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>} [81] @[Decoupled.scala 218:16]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT.y_dest <= io.enq.bits.y_dest @[Decoupled.scala 230:24]
      MPORT.x_dest <= io.enq.bits.x_dest @[Decoupled.scala 230:24]
      MPORT.y_0 <= io.enq.bits.y_0 @[Decoupled.scala 230:24]
      MPORT.x_0 <= io.enq.bits.x_0 @[Decoupled.scala 230:24]
      MPORT.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<7>("h50")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.y_dest <= io_deq_bits_MPORT.y_dest @[Decoupled.scala 242:15]
    io.deq.bits.x_dest <= io_deq_bits_MPORT.x_dest @[Decoupled.scala 242:15]
    io.deq.bits.y_0 <= io_deq_bits_MPORT.y_0 @[Decoupled.scala 242:15]
    io.deq.bits.x_0 <= io_deq_bits_MPORT.x_0 @[Decoupled.scala 242:15]
    io.deq.bits.data <= io_deq_bits_MPORT.data @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<7>("h51"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(value_1, value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<7>("h51"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module AllToAllPE :
    input clock : Clock
    input reset : UInt<1>
    output io : { busy : UInt<1>, flip end_AllToAll : UInt<1>, flip cmd : { flip ready : UInt<1>, valid : UInt<1>, bits : { load : UInt<1>, store : UInt<1>, doAllToAll : UInt<1>, rs1 : UInt<64>, rs2 : UInt<64>}}, resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, write_enable : UInt<1>}}, left : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, right : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, up : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}, bottom : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, x_0 : UInt<2>, y_0 : UInt<2>, x_dest : UInt<2>, y_dest : UInt<2>}}}}

    cmem memPE : UInt<64> [1024] @[AllToAllPE.scala 72:18]
    reg x_coord : UInt<2>, clock with :
      reset => (reset, UInt<2>("h2")) @[AllToAllPE.scala 75:24]
    reg y_coord : UInt<2>, clock with :
      reset => (reset, UInt<1>("h1")) @[AllToAllPE.scala 76:24]
    reg offset : UInt, clock with :
      reset => (reset, UInt<4>("h9")) @[AllToAllPE.scala 77:23]
    reg index_write_this_PE : UInt, clock with :
      reset => (reset, UInt<4>("he")) @[AllToAllPE.scala 78:36]
    reg rs1 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), rs1) @[AllToAllPE.scala 81:16]
    reg rs2 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), rs2) @[AllToAllPE.scala 82:16]
    rs1 <= io.cmd.bits.rs1 @[AllToAllPE.scala 84:7]
    rs2 <= io.cmd.bits.rs2 @[AllToAllPE.scala 85:7]
    inst read_index of IndexCalculator @[AllToAllPE.scala 87:26]
    read_index.clock <= clock
    read_index.reset <= reset
    wire signal_enable_counter : UInt<1> @[AllToAllPE.scala 88:35]
    wire signal_reset_counter : UInt<1> @[AllToAllPE.scala 89:34]
    signal_enable_counter <= UInt<1>("h0") @[AllToAllPE.scala 90:25]
    signal_reset_counter <= UInt<1>("h0") @[AllToAllPE.scala 91:24]
    reg read_value : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 92:27]
    reg read_x : UInt<2>, clock with :
      reset => (UInt<1>("h0"), read_x) @[AllToAllPE.scala 93:19]
    reg read_y : UInt<2>, clock with :
      reset => (UInt<1>("h0"), read_y) @[AllToAllPE.scala 94:19]
    node _T = eq(read_x, x_coord) @[AllToAllPE.scala 95:39]
    node _T_1 = eq(read_y, y_coord) @[AllToAllPE.scala 95:63]
    node is_this_PE_generation = and(_T, _T_1) @[AllToAllPE.scala 95:52]
    reg w_en : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 102:21]
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AllToAllPE.scala 107:22]
    reg resp_value : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[AllToAllPE.scala 108:27]
    node x_value = bits(rs2, 15, 0) @[AllToAllPE.scala 110:20]
    node y_value = bits(rs2, 31, 16) @[AllToAllPE.scala 111:20]
    node memIndex = bits(rs2, 63, 32) @[AllToAllPE.scala 112:21]
    node _T_2 = eq(x_value, x_coord) @[AllToAllPE.scala 120:29]
    node _T_3 = eq(y_value, y_coord) @[AllToAllPE.scala 120:54]
    node is_this_PE = and(_T_2, _T_3) @[AllToAllPE.scala 120:42]
    node load_signal = and(io.cmd.valid, io.cmd.bits.load) @[AllToAllPE.scala 121:34]
    node store_signal = and(io.cmd.valid, io.cmd.bits.store) @[AllToAllPE.scala 122:35]
    node allToAll_signal = and(io.cmd.valid, io.cmd.bits.doAllToAll) @[AllToAllPE.scala 123:38]
    node _T_4 = eq(io.resp.ready, UInt<1>("h0")) @[AllToAllPE.scala 125:20]
    node stall_resp = and(_T_4, io.resp.valid) @[AllToAllPE.scala 125:35]
    node start_AllToAll = eq(state, UInt<3>("h1")) @[AllToAllPE.scala 126:30]
    node _T_5 = eq(state, UInt<3>("h0")) @[AllToAllPE.scala 144:14]
    when _T_5 : @[AllToAllPE.scala 144:23]
      io.busy <= UInt<1>("h0") @[AllToAllPE.scala 145:13]
      io.cmd.ready <= UInt<1>("h1") @[AllToAllPE.scala 146:18]
      io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 147:19]
      io.resp.bits.data <= UInt<1>("h0") @[AllToAllPE.scala 148:23]
      io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 150:31]
      w_en <= UInt<1>("h0") @[AllToAllPE.scala 151:10]
      read_index.io.enable <= UInt<1>("h1") @[AllToAllPE.scala 153:26]
      read_index.io.reset <= UInt<1>("h1") @[AllToAllPE.scala 154:25]
      when load_signal : @[AllToAllPE.scala 156:22]
        state <= UInt<3>("h4") @[AllToAllPE.scala 157:13]
      else :
        when store_signal : @[AllToAllPE.scala 158:29]
          state <= UInt<3>("h5") @[AllToAllPE.scala 159:13]
        else :
          when allToAll_signal : @[AllToAllPE.scala 160:32]
            state <= UInt<3>("h1") @[AllToAllPE.scala 161:13]
          else :
            state <= UInt<3>("h0") @[AllToAllPE.scala 163:13]
    else :
      node _T_6 = eq(state, UInt<3>("h4")) @[AllToAllPE.scala 166:20]
      when _T_6 : @[AllToAllPE.scala 166:32]
        io.busy <= stall_resp @[AllToAllPE.scala 167:13]
        node _T_7 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 168:21]
        io.cmd.ready <= _T_7 @[AllToAllPE.scala 168:18]
        io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 169:19]
        io.resp.bits.data <= UInt<6>("h20") @[AllToAllPE.scala 170:23]
        resp_value <= UInt<6>("h20") @[AllToAllPE.scala 171:16]
        read_index.io.enable <= UInt<1>("h1") @[AllToAllPE.scala 173:26]
        read_index.io.reset <= UInt<1>("h1") @[AllToAllPE.scala 174:25]
        when is_this_PE : @[AllToAllPE.scala 176:21]
          node _T_8 = bits(memIndex, 9, 0) @[AllToAllPE.scala 177:12]
          infer mport MPORT = memPE[_T_8], clock @[AllToAllPE.scala 177:12]
          MPORT <= rs1 @[AllToAllPE.scala 177:23]
          io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 178:33]
          w_en <= UInt<1>("h1") @[AllToAllPE.scala 179:12]
        else :
          io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 181:33]
          w_en <= UInt<1>("h0") @[AllToAllPE.scala 182:12]
        node _T_9 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 185:25]
        node _T_10 = and(load_signal, _T_9) @[AllToAllPE.scala 185:22]
        when _T_10 : @[AllToAllPE.scala 185:37]
          state <= UInt<3>("h4") @[AllToAllPE.scala 186:13]
        else :
          node _T_11 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 187:32]
          node _T_12 = and(store_signal, _T_11) @[AllToAllPE.scala 187:29]
          when _T_12 : @[AllToAllPE.scala 187:44]
            state <= UInt<3>("h5") @[AllToAllPE.scala 188:13]
          else :
            node _T_13 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 189:35]
            node _T_14 = and(allToAll_signal, _T_13) @[AllToAllPE.scala 189:32]
            when _T_14 : @[AllToAllPE.scala 189:47]
              state <= UInt<3>("h1") @[AllToAllPE.scala 190:13]
            else :
              when stall_resp : @[AllToAllPE.scala 191:27]
                state <= UInt<3>("h7") @[AllToAllPE.scala 192:13]
              else :
                state <= UInt<3>("h0") @[AllToAllPE.scala 194:13]
      else :
        node _T_15 = eq(state, UInt<3>("h5")) @[AllToAllPE.scala 197:20]
        when _T_15 : @[AllToAllPE.scala 197:33]
          io.busy <= UInt<1>("h1") @[AllToAllPE.scala 199:13]
          io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 200:18]
          io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 201:19]
          io.resp.bits.data <= UInt<6>("h21") @[AllToAllPE.scala 202:23]
          when is_this_PE : @[AllToAllPE.scala 204:21]
            node _T_16 = bits(memIndex, 9, 0) @[AllToAllPE.scala 205:26]
            infer mport MPORT_1 = memPE[_T_16], clock @[AllToAllPE.scala 205:26]
            resp_value <= MPORT_1 @[AllToAllPE.scala 205:18]
            w_en <= UInt<1>("h1") @[AllToAllPE.scala 206:12]
          else :
            w_en <= UInt<1>("h0") @[AllToAllPE.scala 208:12]
          io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 211:31]
          read_index.io.enable <= UInt<1>("h0") @[AllToAllPE.scala 213:26]
          read_index.io.reset <= UInt<1>("h0") @[AllToAllPE.scala 214:25]
          state <= UInt<3>("h6") @[AllToAllPE.scala 216:11]
        else :
          node _T_17 = eq(state, UInt<3>("h6")) @[AllToAllPE.scala 218:20]
          when _T_17 : @[AllToAllPE.scala 218:35]
            io.busy <= stall_resp @[AllToAllPE.scala 220:13]
            node _T_18 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 221:21]
            io.cmd.ready <= _T_18 @[AllToAllPE.scala 221:18]
            io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 222:19]
            io.resp.bits.data <= resp_value @[AllToAllPE.scala 223:23]
            io.resp.bits.write_enable <= w_en @[AllToAllPE.scala 224:31]
            read_index.io.enable <= UInt<1>("h1") @[AllToAllPE.scala 226:26]
            read_index.io.reset <= UInt<1>("h1") @[AllToAllPE.scala 227:25]
            node _T_19 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 229:25]
            node _T_20 = and(load_signal, _T_19) @[AllToAllPE.scala 229:22]
            when _T_20 : @[AllToAllPE.scala 229:37]
              state <= UInt<3>("h4") @[AllToAllPE.scala 230:13]
            else :
              node _T_21 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 231:32]
              node _T_22 = and(store_signal, _T_21) @[AllToAllPE.scala 231:29]
              when _T_22 : @[AllToAllPE.scala 231:44]
                state <= UInt<3>("h5") @[AllToAllPE.scala 232:13]
              else :
                node _T_23 = eq(stall_resp, UInt<1>("h0")) @[AllToAllPE.scala 233:35]
                node _T_24 = and(allToAll_signal, _T_23) @[AllToAllPE.scala 233:32]
                when _T_24 : @[AllToAllPE.scala 233:47]
                  state <= UInt<3>("h1") @[AllToAllPE.scala 234:13]
                else :
                  when stall_resp : @[AllToAllPE.scala 235:27]
                    state <= UInt<3>("h7") @[AllToAllPE.scala 236:13]
                  else :
                    state <= UInt<3>("h0") @[AllToAllPE.scala 238:13]
          else :
            node _T_25 = eq(state, UInt<3>("h7")) @[AllToAllPE.scala 241:20]
            when _T_25 : @[AllToAllPE.scala 241:36]
              io.busy <= UInt<1>("h1") @[AllToAllPE.scala 243:13]
              io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 244:18]
              io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 245:19]
              io.resp.bits.data <= resp_value @[AllToAllPE.scala 246:23]
              io.resp.bits.write_enable <= w_en @[AllToAllPE.scala 248:31]
              read_index.io.enable <= UInt<1>("h0") @[AllToAllPE.scala 250:26]
              read_index.io.reset <= UInt<1>("h0") @[AllToAllPE.scala 251:25]
              when stall_resp : @[AllToAllPE.scala 253:21]
                state <= UInt<3>("h7") @[AllToAllPE.scala 254:13]
              else :
                state <= UInt<3>("h0") @[AllToAllPE.scala 256:13]
            else :
              node _T_26 = eq(state, UInt<3>("h1")) @[AllToAllPE.scala 259:20]
              when _T_26 : @[AllToAllPE.scala 259:31]
                io.busy <= UInt<1>("h1") @[AllToAllPE.scala 260:13]
                io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 261:18]
                io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 262:19]
                io.resp.bits.data <= resp_value @[AllToAllPE.scala 263:23]
                w_en <= UInt<1>("h0") @[AllToAllPE.scala 265:10]
                io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 266:31]
                read_index.io.enable <= UInt<1>("h1") @[AllToAllPE.scala 269:26]
                read_index.io.reset <= UInt<1>("h0") @[AllToAllPE.scala 270:25]
                infer mport MPORT_2 = memPE[read_index.io.index], clock @[AllToAllPE.scala 271:24]
                read_value <= MPORT_2 @[AllToAllPE.scala 271:16]
                node _T_27 = rem(read_index.io.index, UInt<2>("h3")) @[AllToAllPE.scala 97:43]
                read_x <= _T_27 @[AllToAllPE.scala 272:12]
                node _T_28 = rem(read_index.io.index, UInt<2>("h3")) @[AllToAllPE.scala 97:43]
                read_y <= _T_28 @[AllToAllPE.scala 273:12]
                state <= UInt<3>("h3") @[AllToAllPE.scala 275:11]
              else :
                node _T_29 = eq(state, UInt<3>("h2")) @[AllToAllPE.scala 277:20]
                when _T_29 : @[AllToAllPE.scala 277:41]
                  node _T_30 = or(UInt<1>("h0"), UInt<1>("h0")) @[AllToAllPE.scala 279:25]
                  node _T_31 = or(_T_30, UInt<1>("h0")) @[AllToAllPE.scala 279:38]
                  node _T_32 = or(_T_31, UInt<1>("h0")) @[AllToAllPE.scala 279:48]
                  io.busy <= _T_32 @[AllToAllPE.scala 279:13]
                  io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 280:18]
                  io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 281:19]
                  io.resp.bits.data <= resp_value @[AllToAllPE.scala 282:23]
                  io.resp.bits.write_enable <= UInt<1>("h0") @[AllToAllPE.scala 283:31]
                  io.left.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 286:22]
                  io.right.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 287:23]
                  io.up.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 288:20]
                  io.bottom.in.ready <= UInt<1>("h1") @[AllToAllPE.scala 289:24]
                  read_index.io.enable <= signal_enable_counter @[AllToAllPE.scala 291:26]
                  read_index.io.reset <= signal_reset_counter @[AllToAllPE.scala 292:25]
                  when io.end_AllToAll : @[AllToAllPE.scala 294:27]
                    state <= UInt<3>("h3") @[AllToAllPE.scala 295:13]
                  else :
                    state <= UInt<3>("h2") @[AllToAllPE.scala 297:13]
                else :
                  node _T_33 = eq(state, UInt<3>("h3")) @[AllToAllPE.scala 300:20]
                  when _T_33 : @[AllToAllPE.scala 300:36]
                    io.busy <= UInt<1>("h0") @[AllToAllPE.scala 301:13]
                    io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 302:18]
                    io.resp.valid <= UInt<1>("h1") @[AllToAllPE.scala 303:19]
                    io.resp.bits.data <= UInt<1>("h0") @[AllToAllPE.scala 304:23]
                    io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 306:31]
                    read_index.io.enable <= UInt<1>("h0") @[AllToAllPE.scala 307:26]
                    read_index.io.reset <= UInt<1>("h0") @[AllToAllPE.scala 308:25]
                    state <= UInt<3>("h0") @[AllToAllPE.scala 310:11]
                  else :
                    io.busy <= UInt<1>("h0") @[AllToAllPE.scala 314:13]
                    io.cmd.ready <= UInt<1>("h0") @[AllToAllPE.scala 315:18]
                    io.resp.valid <= UInt<1>("h0") @[AllToAllPE.scala 316:19]
                    io.resp.bits.data <= UInt<64>("haaaaaaaa") @[AllToAllPE.scala 317:23]
                    io.resp.bits.write_enable <= UInt<1>("h1") @[AllToAllPE.scala 318:31]
                    read_index.io.enable <= UInt<1>("h0") @[AllToAllPE.scala 319:26]
                    read_index.io.reset <= UInt<1>("h0") @[AllToAllPE.scala 320:25]
    reg stateAction : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AllToAllPE.scala 329:28]
    node _T_34 = eq(stateAction, UInt<3>("h0")) @[AllToAllPE.scala 332:20]
    when _T_34 : @[AllToAllPE.scala 332:29]
      signal_enable_counter <= UInt<1>("h0") @[AllToAllPE.scala 334:27]
      signal_reset_counter <= UInt<1>("h0") @[AllToAllPE.scala 335:26]
      when start_AllToAll : @[AllToAllPE.scala 337:25]
        stateAction <= UInt<3>("h1") @[AllToAllPE.scala 338:19]
      else :
        stateAction <= UInt<3>("h0") @[AllToAllPE.scala 340:19]
    else :
      node _T_35 = eq(stateAction, UInt<3>("h1")) @[AllToAllPE.scala 342:26]
      when _T_35 : @[AllToAllPE.scala 342:37]
        node _T_36 = or(UInt<1>("h1"), is_this_PE_generation) @[AllToAllPE.scala 344:49]
        when _T_36 : @[AllToAllPE.scala 344:74]
          node _T_37 = rem(read_index.io.index, UInt<2>("h3")) @[AllToAllPE.scala 97:43]
          read_x <= _T_37 @[AllToAllPE.scala 345:14]
          node _T_38 = rem(read_index.io.index, UInt<2>("h3")) @[AllToAllPE.scala 97:43]
          read_y <= _T_38 @[AllToAllPE.scala 346:14]
          infer mport MPORT_3 = memPE[read_index.io.index], clock @[AllToAllPE.scala 347:26]
          read_value <= MPORT_3 @[AllToAllPE.scala 347:18]
          read_index.io.enable <= UInt<1>("h1") @[AllToAllPE.scala 348:28]
          signal_enable_counter <= UInt<1>("h1") @[AllToAllPE.scala 349:29]
        else :
          read_index.io.enable <= UInt<1>("h0") @[AllToAllPE.scala 351:28]
          signal_enable_counter <= UInt<1>("h0") @[AllToAllPE.scala 352:29]
        when is_this_PE_generation : @[AllToAllPE.scala 355:32]
          node _T_39 = or(index_write_this_PE, UInt<10>("h0")) @[AllToAllPE.scala 357:12]
          node _T_40 = bits(_T_39, 9, 0) @[AllToAllPE.scala 357:12]
          infer mport MPORT_4 = memPE[_T_40], clock @[AllToAllPE.scala 357:12]
          MPORT_4 <= read_value @[AllToAllPE.scala 357:34]
        signal_reset_counter <= UInt<1>("h0") @[AllToAllPE.scala 360:26]
        node _T_41 = and(read_index.io.last_index, UInt<1>("h1")) @[AllToAllPE.scala 362:35]
        when _T_41 : @[AllToAllPE.scala 362:77]
          stateAction <= UInt<3>("h0") @[AllToAllPE.scala 363:19]
        else :
          stateAction <= UInt<3>("h1") @[AllToAllPE.scala 365:19]
      else :
        signal_enable_counter <= UInt<1>("h0") @[AllToAllPE.scala 370:27]
        signal_reset_counter <= UInt<1>("h0") @[AllToAllPE.scala 371:26]
    inst left_in of Queue @[Decoupled.scala 296:21]
    left_in.clock <= clock
    left_in.reset <= reset
    left_in.io.enq.valid <= io.left.in.valid @[Decoupled.scala 297:22]
    left_in.io.enq.bits.y_dest <= io.left.in.bits.y_dest @[Decoupled.scala 298:21]
    left_in.io.enq.bits.x_dest <= io.left.in.bits.x_dest @[Decoupled.scala 298:21]
    left_in.io.enq.bits.y_0 <= io.left.in.bits.y_0 @[Decoupled.scala 298:21]
    left_in.io.enq.bits.x_0 <= io.left.in.bits.x_0 @[Decoupled.scala 298:21]
    left_in.io.enq.bits.data <= io.left.in.bits.data @[Decoupled.scala 298:21]
    io.left.in.ready <= left_in.io.enq.ready @[Decoupled.scala 299:17]
    inst right_in of Queue_1 @[Decoupled.scala 296:21]
    right_in.clock <= clock
    right_in.reset <= reset
    right_in.io.enq.valid <= io.right.in.valid @[Decoupled.scala 297:22]
    right_in.io.enq.bits.y_dest <= io.right.in.bits.y_dest @[Decoupled.scala 298:21]
    right_in.io.enq.bits.x_dest <= io.right.in.bits.x_dest @[Decoupled.scala 298:21]
    right_in.io.enq.bits.y_0 <= io.right.in.bits.y_0 @[Decoupled.scala 298:21]
    right_in.io.enq.bits.x_0 <= io.right.in.bits.x_0 @[Decoupled.scala 298:21]
    right_in.io.enq.bits.data <= io.right.in.bits.data @[Decoupled.scala 298:21]
    io.right.in.ready <= right_in.io.enq.ready @[Decoupled.scala 299:17]
    inst up_in of Queue_2 @[Decoupled.scala 296:21]
    up_in.clock <= clock
    up_in.reset <= reset
    up_in.io.enq.valid <= io.up.in.valid @[Decoupled.scala 297:22]
    up_in.io.enq.bits.y_dest <= io.up.in.bits.y_dest @[Decoupled.scala 298:21]
    up_in.io.enq.bits.x_dest <= io.up.in.bits.x_dest @[Decoupled.scala 298:21]
    up_in.io.enq.bits.y_0 <= io.up.in.bits.y_0 @[Decoupled.scala 298:21]
    up_in.io.enq.bits.x_0 <= io.up.in.bits.x_0 @[Decoupled.scala 298:21]
    up_in.io.enq.bits.data <= io.up.in.bits.data @[Decoupled.scala 298:21]
    io.up.in.ready <= up_in.io.enq.ready @[Decoupled.scala 299:17]
    inst bottom_in of Queue_3 @[Decoupled.scala 296:21]
    bottom_in.clock <= clock
    bottom_in.reset <= reset
    bottom_in.io.enq.valid <= io.bottom.in.valid @[Decoupled.scala 297:22]
    bottom_in.io.enq.bits.y_dest <= io.bottom.in.bits.y_dest @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.x_dest <= io.bottom.in.bits.x_dest @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.y_0 <= io.bottom.in.bits.y_0 @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.x_0 <= io.bottom.in.bits.x_0 @[Decoupled.scala 298:21]
    bottom_in.io.enq.bits.data <= io.bottom.in.bits.data @[Decoupled.scala 298:21]
    io.bottom.in.ready <= bottom_in.io.enq.ready @[Decoupled.scala 299:17]
    inst left_dispatcher of Dispatcher @[AllToAllPE.scala 426:31]
    left_dispatcher.clock <= clock
    left_dispatcher.reset <= reset
    inst right_dispatcher of Dispatcher_1 @[AllToAllPE.scala 427:32]
    right_dispatcher.clock <= clock
    right_dispatcher.reset <= reset
    inst up_dispatcher of Dispatcher_2 @[AllToAllPE.scala 428:29]
    up_dispatcher.clock <= clock
    up_dispatcher.reset <= reset
    inst bottom_dispatcher of Dispatcher_3 @[AllToAllPE.scala 429:33]
    bottom_dispatcher.clock <= clock
    bottom_dispatcher.reset <= reset
    inst generation_dispatcher of GenerationDispatcher @[AllToAllPE.scala 432:37]
    generation_dispatcher.clock <= clock
    generation_dispatcher.reset <= reset
    left_dispatcher.io.x_0 <= left_in.io.deq.bits.x_0 @[AllToAllPE.scala 435:26]
    left_dispatcher.io.y_0 <= left_in.io.deq.bits.y_0 @[AllToAllPE.scala 436:26]
    left_dispatcher.io.x_dest <= left_in.io.deq.bits.x_dest @[AllToAllPE.scala 437:29]
    left_dispatcher.io.y_dest <= left_in.io.deq.bits.y_dest @[AllToAllPE.scala 438:29]
    left_dispatcher.io.x_PE <= x_coord @[AllToAllPE.scala 439:27]
    left_dispatcher.io.y_PE <= y_coord @[AllToAllPE.scala 440:27]
    right_dispatcher.io.x_0 <= right_in.io.deq.bits.x_0 @[AllToAllPE.scala 442:27]
    right_dispatcher.io.y_0 <= right_in.io.deq.bits.y_0 @[AllToAllPE.scala 443:27]
    right_dispatcher.io.x_dest <= right_in.io.deq.bits.x_dest @[AllToAllPE.scala 444:30]
    right_dispatcher.io.y_dest <= right_in.io.deq.bits.y_dest @[AllToAllPE.scala 445:30]
    right_dispatcher.io.x_PE <= x_coord @[AllToAllPE.scala 446:28]
    right_dispatcher.io.y_PE <= y_coord @[AllToAllPE.scala 447:28]
    up_dispatcher.io.x_0 <= up_in.io.deq.bits.x_0 @[AllToAllPE.scala 449:24]
    up_dispatcher.io.y_0 <= up_in.io.deq.bits.y_0 @[AllToAllPE.scala 450:24]
    up_dispatcher.io.x_dest <= up_in.io.deq.bits.x_dest @[AllToAllPE.scala 451:27]
    up_dispatcher.io.y_dest <= up_in.io.deq.bits.y_dest @[AllToAllPE.scala 452:27]
    up_dispatcher.io.x_PE <= x_coord @[AllToAllPE.scala 453:25]
    up_dispatcher.io.y_PE <= y_coord @[AllToAllPE.scala 454:25]
    bottom_dispatcher.io.x_0 <= bottom_in.io.deq.bits.x_0 @[AllToAllPE.scala 456:28]
    bottom_dispatcher.io.y_0 <= bottom_in.io.deq.bits.y_0 @[AllToAllPE.scala 457:28]
    bottom_dispatcher.io.x_dest <= bottom_in.io.deq.bits.x_dest @[AllToAllPE.scala 458:31]
    bottom_dispatcher.io.y_dest <= bottom_in.io.deq.bits.y_dest @[AllToAllPE.scala 459:31]
    bottom_dispatcher.io.x_PE <= x_coord @[AllToAllPE.scala 460:29]
    bottom_dispatcher.io.y_PE <= y_coord @[AllToAllPE.scala 461:29]
    generation_dispatcher.io.x_PE <= x_coord @[AllToAllPE.scala 463:33]
    generation_dispatcher.io.y_PE <= y_coord @[AllToAllPE.scala 464:33]
    generation_dispatcher.io.x_dest <= read_x @[AllToAllPE.scala 465:35]
    generation_dispatcher.io.y_dest <= read_y @[AllToAllPE.scala 466:35]
    when left_dispatcher.io.this_PE : @[AllToAllPE.scala 470:35]
      node _T_42 = mul(left_in.io.deq.bits.y_0, UInt<2>("h3")) @[AllToAllPE.scala 471:47]
      node _T_43 = add(left_in.io.deq.bits.x_0, _T_42) @[AllToAllPE.scala 471:28]
      node _T_44 = tail(_T_43, 1) @[AllToAllPE.scala 471:28]
      node _T_45 = add(_T_44, offset) @[AllToAllPE.scala 471:53]
      node _T_46 = tail(_T_45, 1) @[AllToAllPE.scala 471:53]
      node _T_47 = or(_T_46, UInt<10>("h0")) @[AllToAllPE.scala 471:10]
      node _T_48 = bits(_T_47, 9, 0) @[AllToAllPE.scala 471:10]
      infer mport MPORT_5 = memPE[_T_48], clock @[AllToAllPE.scala 471:10]
      MPORT_5 <= left_in.io.deq.bits.data @[AllToAllPE.scala 471:63]
    when right_dispatcher.io.this_PE : @[AllToAllPE.scala 474:36]
      node _T_49 = mul(right_in.io.deq.bits.y_0, UInt<2>("h3")) @[AllToAllPE.scala 475:49]
      node _T_50 = add(right_in.io.deq.bits.x_0, _T_49) @[AllToAllPE.scala 475:29]
      node _T_51 = tail(_T_50, 1) @[AllToAllPE.scala 475:29]
      node _T_52 = add(_T_51, offset) @[AllToAllPE.scala 475:55]
      node _T_53 = tail(_T_52, 1) @[AllToAllPE.scala 475:55]
      node _T_54 = or(_T_53, UInt<10>("h0")) @[AllToAllPE.scala 475:10]
      node _T_55 = bits(_T_54, 9, 0) @[AllToAllPE.scala 475:10]
      infer mport MPORT_6 = memPE[_T_55], clock @[AllToAllPE.scala 475:10]
      MPORT_6 <= right_in.io.deq.bits.data @[AllToAllPE.scala 475:65]
    when up_dispatcher.io.this_PE : @[AllToAllPE.scala 478:33]
      node _T_56 = mul(up_in.io.deq.bits.y_0, UInt<2>("h3")) @[AllToAllPE.scala 479:43]
      node _T_57 = add(up_in.io.deq.bits.x_0, _T_56) @[AllToAllPE.scala 479:26]
      node _T_58 = tail(_T_57, 1) @[AllToAllPE.scala 479:26]
      node _T_59 = add(_T_58, offset) @[AllToAllPE.scala 479:49]
      node _T_60 = tail(_T_59, 1) @[AllToAllPE.scala 479:49]
      node _T_61 = or(_T_60, UInt<10>("h0")) @[AllToAllPE.scala 479:10]
      node _T_62 = bits(_T_61, 9, 0) @[AllToAllPE.scala 479:10]
      infer mport MPORT_7 = memPE[_T_62], clock @[AllToAllPE.scala 479:10]
      MPORT_7 <= up_in.io.deq.bits.data @[AllToAllPE.scala 479:59]
    when bottom_dispatcher.io.this_PE : @[AllToAllPE.scala 482:37]
      node _T_63 = mul(bottom_in.io.deq.bits.y_0, UInt<2>("h3")) @[AllToAllPE.scala 483:51]
      node _T_64 = add(bottom_in.io.deq.bits.x_0, _T_63) @[AllToAllPE.scala 483:30]
      node _T_65 = tail(_T_64, 1) @[AllToAllPE.scala 483:30]
      node _T_66 = add(_T_65, offset) @[AllToAllPE.scala 483:57]
      node _T_67 = tail(_T_66, 1) @[AllToAllPE.scala 483:57]
      node _T_68 = or(_T_67, UInt<10>("h0")) @[AllToAllPE.scala 483:10]
      node _T_69 = bits(_T_68, 9, 0) @[AllToAllPE.scala 483:10]
      infer mport MPORT_8 = memPE[_T_69], clock @[AllToAllPE.scala 483:10]
      MPORT_8 <= bottom_in.io.deq.bits.data @[AllToAllPE.scala 483:67]
    inst left_out_arbiter of RRArbiter @[AllToAllPE.scala 492:32]
    left_out_arbiter.clock <= clock
    left_out_arbiter.reset <= reset
    inst right_out_arbiter of RRArbiter_1 @[AllToAllPE.scala 493:33]
    right_out_arbiter.clock <= clock
    right_out_arbiter.reset <= reset
    inst up_out_arbiter of RRArbiter_2 @[AllToAllPE.scala 494:30]
    up_out_arbiter.clock <= clock
    up_out_arbiter.reset <= reset
    inst bottom_out_arbiter of RRArbiter_3 @[AllToAllPE.scala 495:33]
    bottom_out_arbiter.clock <= clock
    bottom_out_arbiter.reset <= reset
    inst left_out of Queue_4 @[Decoupled.scala 296:21]
    left_out.clock <= clock
    left_out.reset <= reset
    left_out.io.enq.valid <= left_out_arbiter.io.out.valid @[Decoupled.scala 297:22]
    left_out.io.enq.bits.y_dest <= left_out_arbiter.io.out.bits.y_dest @[Decoupled.scala 298:21]
    left_out.io.enq.bits.x_dest <= left_out_arbiter.io.out.bits.x_dest @[Decoupled.scala 298:21]
    left_out.io.enq.bits.y_0 <= left_out_arbiter.io.out.bits.y_0 @[Decoupled.scala 298:21]
    left_out.io.enq.bits.x_0 <= left_out_arbiter.io.out.bits.x_0 @[Decoupled.scala 298:21]
    left_out.io.enq.bits.data <= left_out_arbiter.io.out.bits.data @[Decoupled.scala 298:21]
    left_out_arbiter.io.out.ready <= left_out.io.enq.ready @[Decoupled.scala 299:17]
    inst right_out of Queue_5 @[Decoupled.scala 296:21]
    right_out.clock <= clock
    right_out.reset <= reset
    right_out.io.enq.valid <= right_out_arbiter.io.out.valid @[Decoupled.scala 297:22]
    right_out.io.enq.bits.y_dest <= right_out_arbiter.io.out.bits.y_dest @[Decoupled.scala 298:21]
    right_out.io.enq.bits.x_dest <= right_out_arbiter.io.out.bits.x_dest @[Decoupled.scala 298:21]
    right_out.io.enq.bits.y_0 <= right_out_arbiter.io.out.bits.y_0 @[Decoupled.scala 298:21]
    right_out.io.enq.bits.x_0 <= right_out_arbiter.io.out.bits.x_0 @[Decoupled.scala 298:21]
    right_out.io.enq.bits.data <= right_out_arbiter.io.out.bits.data @[Decoupled.scala 298:21]
    right_out_arbiter.io.out.ready <= right_out.io.enq.ready @[Decoupled.scala 299:17]
    inst up_out of Queue_6 @[Decoupled.scala 296:21]
    up_out.clock <= clock
    up_out.reset <= reset
    up_out.io.enq.valid <= up_out_arbiter.io.out.valid @[Decoupled.scala 297:22]
    up_out.io.enq.bits.y_dest <= up_out_arbiter.io.out.bits.y_dest @[Decoupled.scala 298:21]
    up_out.io.enq.bits.x_dest <= up_out_arbiter.io.out.bits.x_dest @[Decoupled.scala 298:21]
    up_out.io.enq.bits.y_0 <= up_out_arbiter.io.out.bits.y_0 @[Decoupled.scala 298:21]
    up_out.io.enq.bits.x_0 <= up_out_arbiter.io.out.bits.x_0 @[Decoupled.scala 298:21]
    up_out.io.enq.bits.data <= up_out_arbiter.io.out.bits.data @[Decoupled.scala 298:21]
    up_out_arbiter.io.out.ready <= up_out.io.enq.ready @[Decoupled.scala 299:17]
    inst bottom_out of Queue_7 @[Decoupled.scala 296:21]
    bottom_out.clock <= clock
    bottom_out.reset <= reset
    bottom_out.io.enq.valid <= bottom_out_arbiter.io.out.valid @[Decoupled.scala 297:22]
    bottom_out.io.enq.bits.y_dest <= bottom_out_arbiter.io.out.bits.y_dest @[Decoupled.scala 298:21]
    bottom_out.io.enq.bits.x_dest <= bottom_out_arbiter.io.out.bits.x_dest @[Decoupled.scala 298:21]
    bottom_out.io.enq.bits.y_0 <= bottom_out_arbiter.io.out.bits.y_0 @[Decoupled.scala 298:21]
    bottom_out.io.enq.bits.x_0 <= bottom_out_arbiter.io.out.bits.x_0 @[Decoupled.scala 298:21]
    bottom_out.io.enq.bits.data <= bottom_out_arbiter.io.out.bits.data @[Decoupled.scala 298:21]
    bottom_out_arbiter.io.out.ready <= bottom_out.io.enq.ready @[Decoupled.scala 299:17]
    io.left.out.bits.y_dest <= left_out.io.deq.bits.y_dest @[AllToAllPE.scala 505:15]
    io.left.out.bits.x_dest <= left_out.io.deq.bits.x_dest @[AllToAllPE.scala 505:15]
    io.left.out.bits.y_0 <= left_out.io.deq.bits.y_0 @[AllToAllPE.scala 505:15]
    io.left.out.bits.x_0 <= left_out.io.deq.bits.x_0 @[AllToAllPE.scala 505:15]
    io.left.out.bits.data <= left_out.io.deq.bits.data @[AllToAllPE.scala 505:15]
    io.left.out.valid <= left_out.io.deq.valid @[AllToAllPE.scala 505:15]
    left_out.io.deq.ready <= io.left.out.ready @[AllToAllPE.scala 505:15]
    io.right.out.bits.y_dest <= right_out.io.deq.bits.y_dest @[AllToAllPE.scala 506:16]
    io.right.out.bits.x_dest <= right_out.io.deq.bits.x_dest @[AllToAllPE.scala 506:16]
    io.right.out.bits.y_0 <= right_out.io.deq.bits.y_0 @[AllToAllPE.scala 506:16]
    io.right.out.bits.x_0 <= right_out.io.deq.bits.x_0 @[AllToAllPE.scala 506:16]
    io.right.out.bits.data <= right_out.io.deq.bits.data @[AllToAllPE.scala 506:16]
    io.right.out.valid <= right_out.io.deq.valid @[AllToAllPE.scala 506:16]
    right_out.io.deq.ready <= io.right.out.ready @[AllToAllPE.scala 506:16]
    io.up.out.bits.y_dest <= up_out.io.deq.bits.y_dest @[AllToAllPE.scala 507:13]
    io.up.out.bits.x_dest <= up_out.io.deq.bits.x_dest @[AllToAllPE.scala 507:13]
    io.up.out.bits.y_0 <= up_out.io.deq.bits.y_0 @[AllToAllPE.scala 507:13]
    io.up.out.bits.x_0 <= up_out.io.deq.bits.x_0 @[AllToAllPE.scala 507:13]
    io.up.out.bits.data <= up_out.io.deq.bits.data @[AllToAllPE.scala 507:13]
    io.up.out.valid <= up_out.io.deq.valid @[AllToAllPE.scala 507:13]
    up_out.io.deq.ready <= io.up.out.ready @[AllToAllPE.scala 507:13]
    io.bottom.out.bits.y_dest <= bottom_out.io.deq.bits.y_dest @[AllToAllPE.scala 508:17]
    io.bottom.out.bits.x_dest <= bottom_out.io.deq.bits.x_dest @[AllToAllPE.scala 508:17]
    io.bottom.out.bits.y_0 <= bottom_out.io.deq.bits.y_0 @[AllToAllPE.scala 508:17]
    io.bottom.out.bits.x_0 <= bottom_out.io.deq.bits.x_0 @[AllToAllPE.scala 508:17]
    io.bottom.out.bits.data <= bottom_out.io.deq.bits.data @[AllToAllPE.scala 508:17]
    io.bottom.out.valid <= bottom_out.io.deq.valid @[AllToAllPE.scala 508:17]
    bottom_out.io.deq.ready <= io.bottom.out.ready @[AllToAllPE.scala 508:17]
    left_out_arbiter.io.in[0].valid <= generation_dispatcher.io.left @[AllToAllPE.scala 513:35]
    left_out_arbiter.io.in[0].bits.data <= read_value @[AllToAllPE.scala 514:39]
    left_out_arbiter.io.in[0].bits.x_0 <= x_coord @[AllToAllPE.scala 515:38]
    left_out_arbiter.io.in[0].bits.y_0 <= y_coord @[AllToAllPE.scala 516:38]
    left_out_arbiter.io.in[0].bits.x_dest <= read_x @[AllToAllPE.scala 517:41]
    left_out_arbiter.io.in[0].bits.y_dest <= read_y @[AllToAllPE.scala 518:41]
    left_out_arbiter.io.in[1].bits.y_dest <= right_in.io.deq.bits.y_dest @[AllToAllPE.scala 519:29]
    left_out_arbiter.io.in[1].bits.x_dest <= right_in.io.deq.bits.x_dest @[AllToAllPE.scala 519:29]
    left_out_arbiter.io.in[1].bits.y_0 <= right_in.io.deq.bits.y_0 @[AllToAllPE.scala 519:29]
    left_out_arbiter.io.in[1].bits.x_0 <= right_in.io.deq.bits.x_0 @[AllToAllPE.scala 519:29]
    left_out_arbiter.io.in[1].bits.data <= right_in.io.deq.bits.data @[AllToAllPE.scala 519:29]
    left_out_arbiter.io.in[1].valid <= right_in.io.deq.valid @[AllToAllPE.scala 519:29]
    right_in.io.deq.ready <= left_out_arbiter.io.in[1].ready @[AllToAllPE.scala 519:29]
    left_out_arbiter.io.in[1].valid <= right_dispatcher.io.left @[AllToAllPE.scala 520:35]
    left_out_arbiter.io.in[2].bits.y_dest <= up_in.io.deq.bits.y_dest @[AllToAllPE.scala 521:29]
    left_out_arbiter.io.in[2].bits.x_dest <= up_in.io.deq.bits.x_dest @[AllToAllPE.scala 521:29]
    left_out_arbiter.io.in[2].bits.y_0 <= up_in.io.deq.bits.y_0 @[AllToAllPE.scala 521:29]
    left_out_arbiter.io.in[2].bits.x_0 <= up_in.io.deq.bits.x_0 @[AllToAllPE.scala 521:29]
    left_out_arbiter.io.in[2].bits.data <= up_in.io.deq.bits.data @[AllToAllPE.scala 521:29]
    left_out_arbiter.io.in[2].valid <= up_in.io.deq.valid @[AllToAllPE.scala 521:29]
    up_in.io.deq.ready <= left_out_arbiter.io.in[2].ready @[AllToAllPE.scala 521:29]
    left_out_arbiter.io.in[2].valid <= up_dispatcher.io.left @[AllToAllPE.scala 522:35]
    left_out_arbiter.io.in[3].bits.y_dest <= bottom_in.io.deq.bits.y_dest @[AllToAllPE.scala 523:29]
    left_out_arbiter.io.in[3].bits.x_dest <= bottom_in.io.deq.bits.x_dest @[AllToAllPE.scala 523:29]
    left_out_arbiter.io.in[3].bits.y_0 <= bottom_in.io.deq.bits.y_0 @[AllToAllPE.scala 523:29]
    left_out_arbiter.io.in[3].bits.x_0 <= bottom_in.io.deq.bits.x_0 @[AllToAllPE.scala 523:29]
    left_out_arbiter.io.in[3].bits.data <= bottom_in.io.deq.bits.data @[AllToAllPE.scala 523:29]
    left_out_arbiter.io.in[3].valid <= bottom_in.io.deq.valid @[AllToAllPE.scala 523:29]
    bottom_in.io.deq.ready <= left_out_arbiter.io.in[3].ready @[AllToAllPE.scala 523:29]
    left_out_arbiter.io.in[3].valid <= bottom_dispatcher.io.left @[AllToAllPE.scala 524:35]
    right_out_arbiter.io.in[0].valid <= generation_dispatcher.io.right @[AllToAllPE.scala 526:36]
    right_out_arbiter.io.in[0].bits.data <= read_value @[AllToAllPE.scala 527:40]
    right_out_arbiter.io.in[0].bits.x_0 <= x_coord @[AllToAllPE.scala 528:39]
    right_out_arbiter.io.in[0].bits.y_0 <= y_coord @[AllToAllPE.scala 529:39]
    right_out_arbiter.io.in[0].bits.x_dest <= read_x @[AllToAllPE.scala 530:42]
    right_out_arbiter.io.in[0].bits.y_dest <= read_y @[AllToAllPE.scala 531:42]
    right_out_arbiter.io.in[1].bits.y_dest <= left_in.io.deq.bits.y_dest @[AllToAllPE.scala 532:30]
    right_out_arbiter.io.in[1].bits.x_dest <= left_in.io.deq.bits.x_dest @[AllToAllPE.scala 532:30]
    right_out_arbiter.io.in[1].bits.y_0 <= left_in.io.deq.bits.y_0 @[AllToAllPE.scala 532:30]
    right_out_arbiter.io.in[1].bits.x_0 <= left_in.io.deq.bits.x_0 @[AllToAllPE.scala 532:30]
    right_out_arbiter.io.in[1].bits.data <= left_in.io.deq.bits.data @[AllToAllPE.scala 532:30]
    right_out_arbiter.io.in[1].valid <= left_in.io.deq.valid @[AllToAllPE.scala 532:30]
    left_in.io.deq.ready <= right_out_arbiter.io.in[1].ready @[AllToAllPE.scala 532:30]
    right_out_arbiter.io.in[1].valid <= left_dispatcher.io.right @[AllToAllPE.scala 533:36]
    right_out_arbiter.io.in[2].bits.y_dest <= up_in.io.deq.bits.y_dest @[AllToAllPE.scala 534:30]
    right_out_arbiter.io.in[2].bits.x_dest <= up_in.io.deq.bits.x_dest @[AllToAllPE.scala 534:30]
    right_out_arbiter.io.in[2].bits.y_0 <= up_in.io.deq.bits.y_0 @[AllToAllPE.scala 534:30]
    right_out_arbiter.io.in[2].bits.x_0 <= up_in.io.deq.bits.x_0 @[AllToAllPE.scala 534:30]
    right_out_arbiter.io.in[2].bits.data <= up_in.io.deq.bits.data @[AllToAllPE.scala 534:30]
    right_out_arbiter.io.in[2].valid <= up_in.io.deq.valid @[AllToAllPE.scala 534:30]
    up_in.io.deq.ready <= right_out_arbiter.io.in[2].ready @[AllToAllPE.scala 534:30]
    right_out_arbiter.io.in[2].valid <= up_dispatcher.io.right @[AllToAllPE.scala 535:36]
    right_out_arbiter.io.in[3].bits.y_dest <= bottom_in.io.deq.bits.y_dest @[AllToAllPE.scala 536:30]
    right_out_arbiter.io.in[3].bits.x_dest <= bottom_in.io.deq.bits.x_dest @[AllToAllPE.scala 536:30]
    right_out_arbiter.io.in[3].bits.y_0 <= bottom_in.io.deq.bits.y_0 @[AllToAllPE.scala 536:30]
    right_out_arbiter.io.in[3].bits.x_0 <= bottom_in.io.deq.bits.x_0 @[AllToAllPE.scala 536:30]
    right_out_arbiter.io.in[3].bits.data <= bottom_in.io.deq.bits.data @[AllToAllPE.scala 536:30]
    right_out_arbiter.io.in[3].valid <= bottom_in.io.deq.valid @[AllToAllPE.scala 536:30]
    bottom_in.io.deq.ready <= right_out_arbiter.io.in[3].ready @[AllToAllPE.scala 536:30]
    right_out_arbiter.io.in[3].valid <= bottom_dispatcher.io.right @[AllToAllPE.scala 537:36]
    up_out_arbiter.io.in[0].valid <= generation_dispatcher.io.up @[AllToAllPE.scala 539:33]
    up_out_arbiter.io.in[0].bits.data <= read_value @[AllToAllPE.scala 540:37]
    up_out_arbiter.io.in[0].bits.x_0 <= x_coord @[AllToAllPE.scala 541:36]
    up_out_arbiter.io.in[0].bits.y_0 <= y_coord @[AllToAllPE.scala 542:36]
    up_out_arbiter.io.in[0].bits.x_dest <= read_x @[AllToAllPE.scala 543:39]
    up_out_arbiter.io.in[0].bits.y_dest <= read_y @[AllToAllPE.scala 544:39]
    up_out_arbiter.io.in[1].bits.y_dest <= left_in.io.deq.bits.y_dest @[AllToAllPE.scala 545:27]
    up_out_arbiter.io.in[1].bits.x_dest <= left_in.io.deq.bits.x_dest @[AllToAllPE.scala 545:27]
    up_out_arbiter.io.in[1].bits.y_0 <= left_in.io.deq.bits.y_0 @[AllToAllPE.scala 545:27]
    up_out_arbiter.io.in[1].bits.x_0 <= left_in.io.deq.bits.x_0 @[AllToAllPE.scala 545:27]
    up_out_arbiter.io.in[1].bits.data <= left_in.io.deq.bits.data @[AllToAllPE.scala 545:27]
    up_out_arbiter.io.in[1].valid <= left_in.io.deq.valid @[AllToAllPE.scala 545:27]
    left_in.io.deq.ready <= up_out_arbiter.io.in[1].ready @[AllToAllPE.scala 545:27]
    up_out_arbiter.io.in[1].valid <= left_dispatcher.io.up @[AllToAllPE.scala 546:33]
    up_out_arbiter.io.in[2].bits.y_dest <= right_in.io.deq.bits.y_dest @[AllToAllPE.scala 547:27]
    up_out_arbiter.io.in[2].bits.x_dest <= right_in.io.deq.bits.x_dest @[AllToAllPE.scala 547:27]
    up_out_arbiter.io.in[2].bits.y_0 <= right_in.io.deq.bits.y_0 @[AllToAllPE.scala 547:27]
    up_out_arbiter.io.in[2].bits.x_0 <= right_in.io.deq.bits.x_0 @[AllToAllPE.scala 547:27]
    up_out_arbiter.io.in[2].bits.data <= right_in.io.deq.bits.data @[AllToAllPE.scala 547:27]
    up_out_arbiter.io.in[2].valid <= right_in.io.deq.valid @[AllToAllPE.scala 547:27]
    right_in.io.deq.ready <= up_out_arbiter.io.in[2].ready @[AllToAllPE.scala 547:27]
    up_out_arbiter.io.in[2].valid <= right_dispatcher.io.up @[AllToAllPE.scala 548:33]
    up_out_arbiter.io.in[3].bits.y_dest <= bottom_in.io.deq.bits.y_dest @[AllToAllPE.scala 549:27]
    up_out_arbiter.io.in[3].bits.x_dest <= bottom_in.io.deq.bits.x_dest @[AllToAllPE.scala 549:27]
    up_out_arbiter.io.in[3].bits.y_0 <= bottom_in.io.deq.bits.y_0 @[AllToAllPE.scala 549:27]
    up_out_arbiter.io.in[3].bits.x_0 <= bottom_in.io.deq.bits.x_0 @[AllToAllPE.scala 549:27]
    up_out_arbiter.io.in[3].bits.data <= bottom_in.io.deq.bits.data @[AllToAllPE.scala 549:27]
    up_out_arbiter.io.in[3].valid <= bottom_in.io.deq.valid @[AllToAllPE.scala 549:27]
    bottom_in.io.deq.ready <= up_out_arbiter.io.in[3].ready @[AllToAllPE.scala 549:27]
    up_out_arbiter.io.in[3].valid <= bottom_dispatcher.io.up @[AllToAllPE.scala 550:33]
    bottom_out_arbiter.io.in[0].valid <= generation_dispatcher.io.bottom @[AllToAllPE.scala 552:37]
    bottom_out_arbiter.io.in[0].bits.data <= read_value @[AllToAllPE.scala 553:41]
    bottom_out_arbiter.io.in[0].bits.x_0 <= x_coord @[AllToAllPE.scala 554:40]
    bottom_out_arbiter.io.in[0].bits.y_0 <= y_coord @[AllToAllPE.scala 555:40]
    bottom_out_arbiter.io.in[0].bits.x_dest <= read_x @[AllToAllPE.scala 556:43]
    bottom_out_arbiter.io.in[0].bits.y_dest <= read_y @[AllToAllPE.scala 557:43]
    bottom_out_arbiter.io.in[1].bits.y_dest <= left_in.io.deq.bits.y_dest @[AllToAllPE.scala 558:31]
    bottom_out_arbiter.io.in[1].bits.x_dest <= left_in.io.deq.bits.x_dest @[AllToAllPE.scala 558:31]
    bottom_out_arbiter.io.in[1].bits.y_0 <= left_in.io.deq.bits.y_0 @[AllToAllPE.scala 558:31]
    bottom_out_arbiter.io.in[1].bits.x_0 <= left_in.io.deq.bits.x_0 @[AllToAllPE.scala 558:31]
    bottom_out_arbiter.io.in[1].bits.data <= left_in.io.deq.bits.data @[AllToAllPE.scala 558:31]
    bottom_out_arbiter.io.in[1].valid <= left_in.io.deq.valid @[AllToAllPE.scala 558:31]
    left_in.io.deq.ready <= bottom_out_arbiter.io.in[1].ready @[AllToAllPE.scala 558:31]
    bottom_out_arbiter.io.in[1].valid <= left_dispatcher.io.bottom @[AllToAllPE.scala 559:37]
    bottom_out_arbiter.io.in[2].bits.y_dest <= right_in.io.deq.bits.y_dest @[AllToAllPE.scala 560:31]
    bottom_out_arbiter.io.in[2].bits.x_dest <= right_in.io.deq.bits.x_dest @[AllToAllPE.scala 560:31]
    bottom_out_arbiter.io.in[2].bits.y_0 <= right_in.io.deq.bits.y_0 @[AllToAllPE.scala 560:31]
    bottom_out_arbiter.io.in[2].bits.x_0 <= right_in.io.deq.bits.x_0 @[AllToAllPE.scala 560:31]
    bottom_out_arbiter.io.in[2].bits.data <= right_in.io.deq.bits.data @[AllToAllPE.scala 560:31]
    bottom_out_arbiter.io.in[2].valid <= right_in.io.deq.valid @[AllToAllPE.scala 560:31]
    right_in.io.deq.ready <= bottom_out_arbiter.io.in[2].ready @[AllToAllPE.scala 560:31]
    bottom_out_arbiter.io.in[2].valid <= right_dispatcher.io.bottom @[AllToAllPE.scala 561:37]
    bottom_out_arbiter.io.in[3].bits.y_dest <= up_in.io.deq.bits.y_dest @[AllToAllPE.scala 562:31]
    bottom_out_arbiter.io.in[3].bits.x_dest <= up_in.io.deq.bits.x_dest @[AllToAllPE.scala 562:31]
    bottom_out_arbiter.io.in[3].bits.y_0 <= up_in.io.deq.bits.y_0 @[AllToAllPE.scala 562:31]
    bottom_out_arbiter.io.in[3].bits.x_0 <= up_in.io.deq.bits.x_0 @[AllToAllPE.scala 562:31]
    bottom_out_arbiter.io.in[3].bits.data <= up_in.io.deq.bits.data @[AllToAllPE.scala 562:31]
    bottom_out_arbiter.io.in[3].valid <= up_in.io.deq.valid @[AllToAllPE.scala 562:31]
    up_in.io.deq.ready <= bottom_out_arbiter.io.in[3].ready @[AllToAllPE.scala 562:31]
    bottom_out_arbiter.io.in[3].valid <= bottom_dispatcher.io.bottom @[AllToAllPE.scala 563:37]

